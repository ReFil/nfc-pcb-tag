
flash_test.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
void handle_reset( void ) __attribute__((section(".text.handle_reset")));

void InterruptVectorDefault( void )
{
#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
	asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	0a70006f          	j	8a6 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0460                	addi	s0,sp,524
   a:	0000                	unimp
   c:	0414                	addi	a3,sp,512
	...
  2e:	0000                	unimp
  30:	0414                	addi	a3,sp,512
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0414                	addi	a3,sp,512
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0414                	addi	a3,sp,512
  42:	0000                	unimp
  44:	0414                	addi	a3,sp,512
  46:	0000                	unimp
  48:	0414                	addi	a3,sp,512
  4a:	0000                	unimp
  4c:	0414                	addi	a3,sp,512
  4e:	0000                	unimp
  50:	0414                	addi	a3,sp,512
  52:	0000                	unimp
  54:	0414                	addi	a3,sp,512
  56:	0000                	unimp
  58:	0414                	addi	a3,sp,512
  5a:	0000                	unimp
  5c:	0414                	addi	a3,sp,512
  5e:	0000                	unimp
  60:	0414                	addi	a3,sp,512
  62:	0000                	unimp
  64:	0414                	addi	a3,sp,512
  66:	0000                	unimp
  68:	0414                	addi	a3,sp,512
  6a:	0000                	unimp
  6c:	0414                	addi	a3,sp,512
  6e:	0000                	unimp
  70:	0414                	addi	a3,sp,512
  72:	0000                	unimp
  74:	0414                	addi	a3,sp,512
  76:	0000                	unimp
  78:	0414                	addi	a3,sp,512
  7a:	0000                	unimp
  7c:	0414                	addi	a3,sp,512
  7e:	0000                	unimp
  80:	0414                	addi	a3,sp,512
  82:	0000                	unimp
  84:	0414                	addi	a3,sp,512
  86:	0000                	unimp
  88:	0414                	addi	a3,sp,512
  8a:	0000                	unimp
  8c:	0414                	addi	a3,sp,512
  8e:	0000                	unimp
  90:	0414                	addi	a3,sp,512
  92:	0000                	unimp
  94:	0414                	addi	a3,sp,512
  96:	0000                	unimp
  98:	0414                	addi	a3,sp,512
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
  a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
  a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
  a8:	862e                	mv	a2,a1
  aa:	85aa                	mv	a1,a0
  ac:	557d                	li	a0,-1
  ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
  b0:	4685                	li	a3,1
  b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
  b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
  ba:	0606                	slli	a2,a2,0x1
  bc:	0686                	slli	a3,a3,0x1
  be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
  c2:	4501                	li	a0,0
  c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
  c8:	8d91                	sub	a1,a1,a2
  ca:	8d55                	or	a0,a0,a3
  cc:	8285                	srli	a3,a3,0x1
  ce:	8205                	srli	a2,a2,0x1
  d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
  d2:	8082                	ret

000000d4 <__umodsi3>:
  d4:	8286                	mv	t0,ra
  d6:	3fc9                	jal	a8 <__hidden___udivsi3>
  d8:	852e                	mv	a0,a1
  da:	8282                	jr	t0
  dc:	40a00533          	neg	a0,a0
  e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
  e4:	40b005b3          	neg	a1,a1
  e8:	b7c1                	j	a8 <__hidden___udivsi3>
  ea:	40b005b3          	neg	a1,a1
  ee:	8286                	mv	t0,ra
  f0:	3f65                	jal	a8 <__hidden___udivsi3>
  f2:	40a00533          	neg	a0,a0
  f6:	8282                	jr	t0

000000f8 <__modsi3>:
  f8:	8286                	mv	t0,ra
  fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
  fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
 102:	375d                	jal	a8 <__hidden___udivsi3>
 104:	852e                	mv	a0,a1
 106:	8282                	jr	t0
 108:	40b005b3          	neg	a1,a1
 10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
 110:	40a00533          	neg	a0,a0
 114:	3f51                	jal	a8 <__hidden___udivsi3>
 116:	40b00533          	neg	a0,a1
 11a:	8282                	jr	t0
	...

0000011e <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
 11e:	e00007b7          	lui	a5,0xe0000
 122:	0f47a783          	lw	a5,244(a5) # e00000f4 <_eusrstack+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
 126:	8082                	ret

00000128 <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
 128:	e0000737          	lui	a4,0xe0000
 12c:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
 130:	1121                	addi	sp,sp,-24
 132:	ca06                	sw	ra,20(sp)
 134:	c822                	sw	s0,16(sp)
 136:	c626                	sw	s1,12(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
 138:	0c07f793          	andi	a5,a5,192
 13c:	0c000693          	li	a3,192
 140:	0ad78a63          	beq	a5,a3,1f4 <_write.constprop.0+0xcc>

	char buffer[4] = { 0 };
 144:	c402                	sw	zero,8(sp)
 146:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
 148:	e1f1                	bnez	a1,20c <_write.constprop.0+0xe4>
	{
		lastdmd = (*DMDATA0);
 14a:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
 14e:	c789                	beqz	a5,158 <_write.constprop.0+0x30>
 150:	0807f793          	andi	a5,a5,128
 154:	e391                	bnez	a5,158 <_write.constprop.0+0x30>
 156:	37e1                	jal	11e <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
 158:	40d2                	lw	ra,20(sp)
 15a:	8522                	mv	a0,s0
 15c:	4442                	lw	s0,16(sp)
 15e:	44b2                	lw	s1,12(sp)
 160:	0161                	addi	sp,sp,24
 162:	8082                	ret
		int tosend = size - place;
 164:	409407b3          	sub	a5,s0,s1
 168:	471d                	li	a4,7
 16a:	00f75363          	bge	a4,a5,170 <_write.constprop.0+0x48>
 16e:	479d                	li	a5,7
 170:	00080737          	lui	a4,0x80
 174:	0705                	addi	a4,a4,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
 176:	e0000637          	lui	a2,0xe0000
 17a:	0f462683          	lw	a3,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
 17e:	0f460593          	addi	a1,a2,244
 182:	0806f313          	andi	t1,a3,128
 186:	06031163          	bnez	t1,1e8 <_write.constprop.0+0xc0>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
 18a:	c691                	beqz	a3,196 <_write.constprop.0+0x6e>
 18c:	c22a                	sw	a0,4(sp)
 18e:	c03e                	sw	a5,0(sp)
 190:	3779                	jal	11e <internal_handle_input.constprop.0>
 192:	4512                	lw	a0,4(sp)
 194:	4782                	lw	a5,0(sp)
 196:	0034                	addi	a3,sp,8
		int tosend = size - place;
 198:	470d                	li	a4,3
 19a:	85b6                	mv	a1,a3
		while( t < tosend )
 19c:	04f74e63          	blt	a4,a5,1f8 <_write.constprop.0+0xd0>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
 1a0:	46a2                	lw	a3,8(sp)
 1a2:	e0000737          	lui	a4,0xe0000
		while( t < tosend && t < 3 )
 1a6:	460d                	li	a2,3
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
 1a8:	0ed72c23          	sw	a3,248(a4) # e00000f8 <_eusrstack+0xbffff8f8>
 1ac:	009506b3          	add	a3,a0,s1
		t = 0;
 1b0:	4701                	li	a4,0
			buffer[t+1] = buf[t+place];
 1b2:	0006c283          	lbu	t0,0(a3)
 1b6:	0705                	addi	a4,a4,1
 1b8:	00e58333          	add	t1,a1,a4
 1bc:	00530023          	sb	t0,0(t1)
		while( t < tosend && t < 3 )
 1c0:	00e78563          	beq	a5,a4,1ca <_write.constprop.0+0xa2>
 1c4:	0685                	addi	a3,a3,1
 1c6:	fec716e3          	bne	a4,a2,1b2 <_write.constprop.0+0x8a>
		buffer[0] = 0x80 | (tosend + 4);
 1ca:	00478713          	addi	a4,a5,4
 1ce:	f8076713          	ori	a4,a4,-128
 1d2:	00e10423          	sb	a4,8(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
 1d6:	46a2                	lw	a3,8(sp)
 1d8:	e0000737          	lui	a4,0xe0000
		place += tosend;
 1dc:	94be                	add	s1,s1,a5
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
 1de:	0ed72a23          	sw	a3,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
	while( place < size )
 1e2:	f884c1e3          	blt	s1,s0,164 <_write.constprop.0+0x3c>
 1e6:	bf8d                	j	158 <_write.constprop.0+0x30>
 1e8:	177d                	addi	a4,a4,-1
			if( timeout-- == 0 )
 1ea:	fb41                	bnez	a4,17a <_write.constprop.0+0x52>
				*DMDATA0 |= 0xc0;
 1ec:	419c                	lw	a5,0(a1)
 1ee:	0c07e793          	ori	a5,a5,192
 1f2:	c19c                	sw	a5,0(a1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
 1f4:	4401                	li	s0,0
 1f6:	b78d                	j	158 <_write.constprop.0+0x30>
			buffer[t-3] = buf[t+place];
 1f8:	00e48633          	add	a2,s1,a4
 1fc:	962a                	add	a2,a2,a0
 1fe:	00064603          	lbu	a2,0(a2)
			t++;
 202:	0705                	addi	a4,a4,1
 204:	0685                	addi	a3,a3,1
			buffer[t-3] = buf[t+place];
 206:	fec68fa3          	sb	a2,-1(a3)
 20a:	bf49                	j	19c <_write.constprop.0+0x74>
	if( size == 0 )
 20c:	4481                	li	s1,0
 20e:	bfd1                	j	1e2 <_write.constprop.0+0xba>

00000210 <mini_itoa.part.0>:
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
 210:	1101                	addi	sp,sp,-32
 212:	ce06                	sw	ra,28(sp)
 214:	cc22                	sw	s0,24(sp)
 216:	ca26                	sw	s1,20(sp)
	int	negative = 0;
 218:	c002                	sw	zero,0(sp)
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
 21a:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
 21c:	00055763          	bgez	a0,22a <mini_itoa.part.0+0x1a>
 220:	e689                	bnez	a3,22a <mini_itoa.part.0+0x1a>
		negative = 1;
 222:	4785                	li	a5,1
		value = -value;
 224:	40a00333          	neg	t1,a0
		negative = 1;
 228:	c03e                	sw	a5,0(sp)
 22a:	06100413          	li	s0,97
 22e:	c219                	beqz	a2,234 <mini_itoa.part.0+0x24>
 230:	04100413          	li	s0,65
	int	negative = 0;
 234:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 236:	1459                	addi	s0,s0,-10
		int digit = value % radix;
 238:	851a                	mv	a0,t1
 23a:	c83a                	sw	a4,16(sp)
 23c:	c21a                	sw	t1,4(sp)
 23e:	c62e                	sw	a1,12(sp)
 240:	c41a                	sw	t1,8(sp)
 242:	3d49                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 244:	47a5                	li	a5,9
 246:	4322                	lw	t1,8(sp)
 248:	45b2                	lw	a1,12(sp)
 24a:	4742                	lw	a4,16(sp)
 24c:	0ff57693          	andi	a3,a0,255
 250:	06a7e163          	bltu	a5,a0,2b2 <mini_itoa.part.0+0xa2>
 254:	03068693          	addi	a3,a3,48
 258:	0ff6f693          	andi	a3,a3,255
 25c:	00148793          	addi	a5,s1,1
 260:	00d48023          	sb	a3,0(s1)
		value /= radix;
 264:	851a                	mv	a0,t1
 266:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 268:	c63e                	sw	a5,12(sp)
		value /= radix;
 26a:	c42e                	sw	a1,8(sp)
 26c:	3d35                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
 26e:	4692                	lw	a3,4(sp)
 270:	45a2                	lw	a1,8(sp)
 272:	47b2                	lw	a5,12(sp)
 274:	4742                	lw	a4,16(sp)
		value /= radix;
 276:	832a                	mv	t1,a0
	} while (value > 0);
 278:	02b6fb63          	bgeu	a3,a1,2ae <mini_itoa.part.0+0x9e>
	if (negative)
 27c:	4682                	lw	a3,0(sp)
 27e:	c699                	beqz	a3,28c <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
 280:	02d00693          	li	a3,45
 284:	00d78023          	sb	a3,0(a5)
 288:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
 28c:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
 290:	01f55693          	srli	a3,a0,0x1f
 294:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
 296:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
 29a:	8685                	srai	a3,a3,0x1
 29c:	4601                	li	a2,0
 29e:	17fd                	addi	a5,a5,-1
 2a0:	00d64b63          	blt	a2,a3,2b6 <mini_itoa.part.0+0xa6>
}
 2a4:	40f2                	lw	ra,28(sp)
 2a6:	4462                	lw	s0,24(sp)
 2a8:	44d2                	lw	s1,20(sp)
 2aa:	6105                	addi	sp,sp,32
 2ac:	8082                	ret
	} while (value > 0);
 2ae:	84be                	mv	s1,a5
 2b0:	b761                	j	238 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 2b2:	96a2                	add	a3,a3,s0
 2b4:	b755                	j	258 <mini_itoa.part.0+0x48>
		char j = buffer[i];
 2b6:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
 2ba:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
 2be:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
 2c2:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
 2c4:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
 2c8:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
 2cc:	bfc9                	j	29e <mini_itoa.part.0+0x8e>

000002ce <PrintN>:
	while( (*DMDATA0) & 0x80 );
 2ce:	e0000737          	lui	a4,0xe0000
 2d2:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
 2d6:	0807f793          	andi	a5,a5,128
 2da:	ffe5                	bnez	a5,2d2 <PrintN+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
 2dc:	783027b7          	lui	a5,0x78302
 2e0:	08878793          	addi	a5,a5,136 # 78302088 <_eusrstack+0x58301888>
 2e4:	0ef72a23          	sw	a5,244(a4)
		while( (*DMDATA0) & 0x80 );
 2e8:	e0000637          	lui	a2,0xe0000
	for( shift = 28; shift >= 0; shift -= 4 )
 2ec:	4771                	li	a4,28
		s += ( s < 10 ) ? '0' : ('a' - 10);
 2ee:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
 2f0:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
 2f2:	0f462783          	lw	a5,244(a2) # e00000f4 <_eusrstack+0xbffff8f4>
 2f6:	0807f793          	andi	a5,a5,128
 2fa:	ffe5                	bnez	a5,2f2 <PrintN+0x24>
		int s = (n>>shift) & 0xf;
 2fc:	00e557b3          	srl	a5,a0,a4
 300:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
 304:	03000793          	li	a5,48
 308:	00d35463          	bge	t1,a3,310 <PrintN+0x42>
 30c:	05700793          	li	a5,87
 310:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
 312:	07a2                	slli	a5,a5,0x8
 314:	0857e793          	ori	a5,a5,133
 318:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
 31c:	1771                	addi	a4,a4,-4
 31e:	fcb71ae3          	bne	a4,a1,2f2 <PrintN+0x24>
}
 322:	8082                	ret

00000324 <mini_pad>:
	int overflow = 0;
 324:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
 326:	c2ad                	beqz	a3,388 <mini_pad+0x64>
	if(len > pad_to) {
 328:	00b6d463          	bge	a3,a1,330 <mini_pad+0xc>
 32c:	85b6                	mv	a1,a3
		overflow = 1;
 32e:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
 330:	8e8d                	sub	a3,a3,a1
 332:	87ba                	mv	a5,a4
 334:	00d703b3          	add	t2,a4,a3
 338:	40f382b3          	sub	t0,t2,a5
 33c:	04504863          	bgtz	t0,38c <mini_pad+0x68>
 340:	0006d363          	bgez	a3,346 <mini_pad+0x22>
 344:	4681                	li	a3,0
 346:	96ba                	add	a3,a3,a4
 348:	4781                	li	a5,0
	for(i = len; i > 0; i --) {
 34a:	40f58633          	sub	a2,a1,a5
 34e:	04c04363          	bgtz	a2,394 <mini_pad+0x70>
 352:	0005d363          	bgez	a1,358 <mini_pad+0x34>
 356:	4581                	li	a1,0
 358:	95b6                	add	a1,a1,a3
	len = pbuffer - buffer;
 35a:	40e58533          	sub	a0,a1,a4
	if(overflow) {
 35e:	02030463          	beqz	t1,386 <mini_pad+0x62>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 362:	02b77263          	bgeu	a4,a1,386 <mini_pad+0x62>
			*(pbuffer-- - 1) = '*';
 366:	02a00793          	li	a5,42
 36a:	fef58fa3          	sb	a5,-1(a1)
 36e:	fff58693          	addi	a3,a1,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 372:	00d77a63          	bgeu	a4,a3,386 <mini_pad+0x62>
			*(pbuffer-- - 1) = '*';
 376:	fef58f23          	sb	a5,-2(a1)
 37a:	ffe58693          	addi	a3,a1,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 37e:	00d77463          	bgeu	a4,a3,386 <mini_pad+0x62>
			*(pbuffer-- - 1) = '*';
 382:	fef58ea3          	sb	a5,-3(a1)
}
 386:	8082                	ret
	if(pad_to == 0) pad_to = len;
 388:	86ae                	mv	a3,a1
 38a:	b75d                	j	330 <mini_pad+0xc>
		*(pbuffer++) = pad_char;
 38c:	0785                	addi	a5,a5,1
 38e:	fec78fa3          	sb	a2,-1(a5)
	for(i = pad_to - len; i > 0; i --) {
 392:	b75d                	j	338 <mini_pad+0x14>
		*(pbuffer++) = *(ptr++);
 394:	00f50633          	add	a2,a0,a5
 398:	00064283          	lbu	t0,0(a2)
 39c:	00f68633          	add	a2,a3,a5
 3a0:	0785                	addi	a5,a5,1
 3a2:	00560023          	sb	t0,0(a2)
	for(i = len; i > 0; i --) {
 3a6:	b755                	j	34a <mini_pad+0x26>

000003a8 <__puts_uart>:
{
 3a8:	1151                	addi	sp,sp,-12
 3aa:	c222                	sw	s0,4(sp)
 3ac:	c406                	sw	ra,8(sp)
 3ae:	842e                	mv	s0,a1
	_write( 0, s, len );
 3b0:	3ba5                	jal	128 <_write.constprop.0>
}
 3b2:	40a2                	lw	ra,8(sp)
 3b4:	8522                	mv	a0,s0
 3b6:	4412                	lw	s0,4(sp)
 3b8:	0131                	addi	sp,sp,12
 3ba:	8082                	ret

000003bc <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
 3bc:	400227b7          	lui	a5,0x40022
 3c0:	4705                	li	a4,1
 3c2:	c398                	sw	a4,0(a5)
#if defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
 3c4:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
 3c8:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
 3cc:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
 3d0:	08170713          	addi	a4,a4,129 # 1080081 <flash_test.c.96092c6c+0x107d581>
 3d4:	c398                	sw	a4,0(a5)
	#else
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
 3d6:	009f0737          	lui	a4,0x9f0
 3da:	c798                	sw	a4,8(a5)

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
 3dc:	40021737          	lui	a4,0x40021
 3e0:	431c                	lw	a5,0(a4)
 3e2:	00679693          	slli	a3,a5,0x6
 3e6:	fe06dde3          	bgez	a3,3e0 <SystemInit+0x24>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 3ea:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 3ec:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
 3f0:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
 3f2:	0027e793          	ori	a5,a5,2
 3f6:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
 3f8:	4721                	li	a4,8
 3fa:	42dc                	lw	a5,4(a3)
 3fc:	8bb1                	andi	a5,a5,12
 3fe:	fee79ee3          	bne	a5,a4,3fa <SystemInit+0x3e>
	*DMDATA1 = 0x00;
 402:	e00007b7          	lui	a5,0xe0000
 406:	0e07ac23          	sw	zero,248(a5) # e00000f8 <_eusrstack+0xbffff8f8>
	*DMDATA0 = 0x80;
 40a:	08000713          	li	a4,128
 40e:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
 412:	8082                	ret

00000414 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
 414:	34102573          	csrr	a0,mepc
	PrintN( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
 418:	3d5d                	jal	2ce <PrintN>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
 41a:	30002573          	csrr	a0,mstatus
	PrintN( __get_MSTATUS() );
 41e:	3d45                	jal	2ce <PrintN>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
 420:	34302573          	csrr	a0,mtval
	PrintN( __get_MTVAL() );
 424:	356d                	jal	2ce <PrintN>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
 426:	34202573          	csrr	a0,mcause
	PrintN( __get_MCAUSE() );
 42a:	3555                	jal	2ce <PrintN>
	while( (*DMDATA0) & 0x80 );
 42c:	e0000737          	lui	a4,0xe0000
 430:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
 434:	0807f793          	andi	a5,a5,128
 438:	ffe5                	bnez	a5,430 <ADC1_2_IRQHandler+0x1c>
	*DMDATA0 = 0x0a85;
 43a:	6785                	lui	a5,0x1
 43c:	a8578793          	addi	a5,a5,-1403 # a85 <handle_reset+0x1df>
 440:	0ef72a23          	sw	a5,244(a4)
	while( (*DMDATA0) & 0x80 );
 444:	e0000737          	lui	a4,0xe0000
 448:	0f472783          	lw	a5,244(a4) # e00000f4 <_eusrstack+0xbffff8f4>
 44c:	0807f793          	andi	a5,a5,128
 450:	ffe5                	bnez	a5,448 <ADC1_2_IRQHandler+0x34>
	*DMDATA0 = 0xaaaaaa83;
 452:	aaaab7b7          	lui	a5,0xaaaab
 456:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
 45a:	0ef72a23          	sw	a5,244(a4)
	asm volatile( "1: j 1b" );
 45e:	a001                	j	45e <ADC1_2_IRQHandler+0x4a>

00000460 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
 460:	40021737          	lui	a4,0x40021
 464:	471c                	lw	a5,8(a4)
 466:	008006b7          	lui	a3,0x800
 46a:	8fd5                	or	a5,a5,a3
 46c:	c71c                	sw	a5,8(a4)

0000046e <strlen>:
{
 46e:	87aa                	mv	a5,a0
	for (; *s; s++);
 470:	0007c703          	lbu	a4,0(a5)
 474:	e701                	bnez	a4,47c <strlen+0xe>
}
 476:	40a78533          	sub	a0,a5,a0
 47a:	8082                	ret
	for (; *s; s++);
 47c:	0785                	addi	a5,a5,1
 47e:	bfcd                	j	470 <strlen+0x2>

00000480 <mini_vpprintf>:
{
 480:	fa410113          	addi	sp,sp,-92
 484:	c8a6                	sw	s1,80(sp)
 486:	cc86                	sw	ra,88(sp)
 488:	caa2                	sw	s0,84(sp)
 48a:	c02a                	sw	a0,0(sp)
 48c:	c22e                	sw	a1,4(sp)
 48e:	84b2                	mv	s1,a2
 490:	87b6                	mv	a5,a3
	int n = 0;
 492:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
 494:	0004c703          	lbu	a4,0(s1)
 498:	00148413          	addi	s0,s1,1
 49c:	00e10fa3          	sb	a4,31(sp)
 4a0:	eb01                	bnez	a4,4b0 <mini_vpprintf+0x30>
}
 4a2:	40e6                	lw	ra,88(sp)
 4a4:	4456                	lw	s0,84(sp)
 4a6:	4542                	lw	a0,16(sp)
 4a8:	44c6                	lw	s1,80(sp)
 4aa:	05c10113          	addi	sp,sp,92
 4ae:	8082                	ret
		if (ch!='%') {
 4b0:	02500693          	li	a3,37
 4b4:	00d70f63          	beq	a4,a3,4d2 <mini_vpprintf+0x52>
 4b8:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
 4ba:	4612                	lw	a2,4(sp)
 4bc:	4782                	lw	a5,0(sp)
 4be:	4585                	li	a1,1
 4c0:	01f10513          	addi	a0,sp,31
 4c4:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
 4c6:	84a2                	mv	s1,s0
		n = n + len;
 4c8:	47c2                	lw	a5,16(sp)
 4ca:	97aa                	add	a5,a5,a0
 4cc:	c83e                	sw	a5,16(sp)
 4ce:	47a2                	lw	a5,8(sp)
 4d0:	b7d1                	j	494 <mini_vpprintf+0x14>
			ch=*(fmt++);
 4d2:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
 4d6:	03000613          	li	a2,48
			ch=*(fmt++);
 4da:	00248713          	addi	a4,s1,2
 4de:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
 4e2:	03000413          	li	s0,48
 4e6:	08c69063          	bne	a3,a2,566 <mini_vpprintf+0xe6>
				ch=*(fmt++);
 4ea:	84ba                	mv	s1,a4
 4ec:	4601                	li	a2,0
 4ee:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
 4f0:	4525                	li	a0,9
 4f2:	a811                	j	506 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
 4f4:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
 4f8:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
 4fa:	9736                	add	a4,a4,a3
				ch=*(fmt++);
 4fc:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
 500:	0706                	slli	a4,a4,0x1
 502:	972e                	add	a4,a4,a1
				ch=*(fmt++);
 504:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
 506:	fd068593          	addi	a1,a3,-48 # 7fffd0 <flash_test.c.96092c6c+0x7fd4d0>
 50a:	0ff5f313          	andi	t1,a1,255
 50e:	fe6573e3          	bgeu	a0,t1,4f4 <mini_vpprintf+0x74>
 512:	c219                	beqz	a2,518 <mini_vpprintf+0x98>
 514:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
 518:	c63a                	sw	a4,12(sp)
 51a:	4661                	li	a2,24
 51c:	00e65363          	bge	a2,a4,522 <mini_vpprintf+0xa2>
 520:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
 522:	06c00593          	li	a1,108
			char l = 0;
 526:	4601                	li	a2,0
			if (ch == 'l') {
 528:	00b69863          	bne	a3,a1,538 <mini_vpprintf+0xb8>
				ch=*(fmt++);
 52c:	0004c683          	lbu	a3,0(s1)
				l = 1;
 530:	4605                	li	a2,1
				ch=*(fmt++);
 532:	0485                	addi	s1,s1,1
 534:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
 538:	01f14683          	lbu	a3,31(sp)
 53c:	06400593          	li	a1,100
 540:	06b68363          	beq	a3,a1,5a6 <mini_vpprintf+0x126>
 544:	02d5e463          	bltu	a1,a3,56c <mini_vpprintf+0xec>
 548:	05800713          	li	a4,88
 54c:	0ae68063          	beq	a3,a4,5ec <mini_vpprintf+0x16c>
 550:	06300713          	li	a4,99
 554:	0ae68d63          	beq	a3,a4,60e <mini_vpprintf+0x18e>
 558:	d6a9                	beqz	a3,4a2 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
 55a:	4612                	lw	a2,4(sp)
 55c:	c43e                	sw	a5,8(sp)
 55e:	4585                	li	a1,1
 560:	01f10513          	addi	a0,sp,31
 564:	a0bd                	j	5d2 <mini_vpprintf+0x152>
			char pad_char = ' ';
 566:	02000413          	li	s0,32
 56a:	b741                	j	4ea <mini_vpprintf+0x6a>
			switch (ch) {
 56c:	07500593          	li	a1,117
 570:	02b68b63          	beq	a3,a1,5a6 <mini_vpprintf+0x126>
 574:	07800613          	li	a2,120
 578:	06c68a63          	beq	a3,a2,5ec <mini_vpprintf+0x16c>
 57c:	07300613          	li	a2,115
 580:	fcc69de3          	bne	a3,a2,55a <mini_vpprintf+0xda>
 584:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
 586:	00478713          	addi	a4,a5,4
 58a:	439c                	lw	a5,0(a5)
 58c:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
 58e:	853e                	mv	a0,a5
 590:	ca3e                	sw	a5,20(sp)
 592:	3df1                	jal	46e <strlen>
					if (pad_to > 0) {
 594:	4762                	lw	a4,24(sp)
 596:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
 598:	85aa                	mv	a1,a0
					if (pad_to > 0) {
 59a:	c759                	beqz	a4,628 <mini_vpprintf+0x1a8>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
 59c:	46b2                	lw	a3,12(sp)
 59e:	1838                	addi	a4,sp,56
 5a0:	8622                	mv	a2,s0
 5a2:	853e                	mv	a0,a5
 5a4:	a01d                	j	5ca <mini_vpprintf+0x14a>
					if(l) {
 5a6:	00478713          	addi	a4,a5,4
 5aa:	c43a                	sw	a4,8(sp)
 5ac:	c615                	beqz	a2,5d8 <mini_vpprintf+0x158>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 5ae:	f8b68693          	addi	a3,a3,-117
 5b2:	1018                	addi	a4,sp,32
 5b4:	0016b693          	seqz	a3,a3
 5b8:	4388                	lw	a0,0(a5)
 5ba:	4601                	li	a2,0
 5bc:	45a9                	li	a1,10
 5be:	3989                	jal	210 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 5c0:	46b2                	lw	a3,12(sp)
 5c2:	1838                	addi	a4,sp,56
 5c4:	8622                	mv	a2,s0
 5c6:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 5c8:	1008                	addi	a0,sp,32
 5ca:	3ba9                	jal	324 <mini_pad>
					len = puts(bf, len, buf);
 5cc:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 5ce:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
 5d0:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
 5d2:	4782                	lw	a5,0(sp)
 5d4:	9782                	jalr	a5
					break;
 5d6:	bdcd                	j	4c8 <mini_vpprintf+0x48>
						if(ch == 'u') {
 5d8:	07500713          	li	a4,117
 5dc:	00e69563          	bne	a3,a4,5e6 <mini_vpprintf+0x166>
	if (radix > 16)
 5e0:	1018                	addi	a4,sp,32
 5e2:	4685                	li	a3,1
 5e4:	bfd1                	j	5b8 <mini_vpprintf+0x138>
 5e6:	1018                	addi	a4,sp,32
 5e8:	4681                	li	a3,0
 5ea:	b7f9                	j	5b8 <mini_vpprintf+0x138>
					if(l) {
 5ec:	4388                	lw	a0,0(a5)
 5ee:	00478713          	addi	a4,a5,4
 5f2:	fa868613          	addi	a2,a3,-88
 5f6:	c43a                	sw	a4,8(sp)
	if (radix > 16)
 5f8:	4685                	li	a3,1
 5fa:	1018                	addi	a4,sp,32
 5fc:	00163613          	seqz	a2,a2
 600:	45c1                	li	a1,16
 602:	3139                	jal	210 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 604:	46b2                	lw	a3,12(sp)
 606:	85aa                	mv	a1,a0
 608:	1838                	addi	a4,sp,56
 60a:	8622                	mv	a2,s0
 60c:	bf75                	j	5c8 <mini_vpprintf+0x148>
					ch = (char)(va_arg(va, int));
 60e:	00478713          	addi	a4,a5,4
 612:	439c                	lw	a5,0(a5)
 614:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 616:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
 618:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 61c:	1838                	addi	a4,sp,56
 61e:	8622                	mv	a2,s0
 620:	4585                	li	a1,1
 622:	01f10513          	addi	a0,sp,31
 626:	b755                	j	5ca <mini_vpprintf+0x14a>
						len = puts(ptr, len, buf);
 628:	4612                	lw	a2,4(sp)
 62a:	853e                	mv	a0,a5
 62c:	b75d                	j	5d2 <mini_vpprintf+0x152>

0000062e <puts>:
{
 62e:	1151                	addi	sp,sp,-12
 630:	c406                	sw	ra,8(sp)
 632:	c222                	sw	s0,4(sp)
 634:	c026                	sw	s1,0(sp)
 636:	84aa                	mv	s1,a0
	int sl = strlen( s );
 638:	3d1d                	jal	46e <strlen>
 63a:	842a                	mv	s0,a0
	_write(0, s, sl );
 63c:	85aa                	mv	a1,a0
 63e:	8526                	mv	a0,s1
 640:	34e5                	jal	128 <_write.constprop.0>
	_write(0, "\n", 1 );
 642:	6505                	lui	a0,0x1
 644:	4585                	li	a1,1
 646:	9cc50513          	addi	a0,a0,-1588 # 9cc <handle_reset+0x126>
 64a:	3cf9                	jal	128 <_write.constprop.0>
}
 64c:	40a2                	lw	ra,8(sp)
 64e:	00140513          	addi	a0,s0,1
 652:	4412                	lw	s0,4(sp)
 654:	4482                	lw	s1,0(sp)
 656:	0131                	addi	sp,sp,12
 658:	8082                	ret

0000065a <printf>:
{
 65a:	fdc10113          	addi	sp,sp,-36
 65e:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 660:	862a                	mv	a2,a0
{
 662:	c82e                	sw	a1,16(sp)
 664:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 666:	4581                	li	a1,0
	va_start( args, format );
 668:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 66a:	3a800513          	li	a0,936
{
 66e:	c606                	sw	ra,12(sp)
 670:	ce3a                	sw	a4,28(sp)
 672:	d03e                	sw	a5,32(sp)
	va_start( args, format );
 674:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
 676:	3529                	jal	480 <mini_vpprintf>
}
 678:	40b2                	lw	ra,12(sp)
 67a:	02410113          	addi	sp,sp,36
 67e:	8082                	ret

00000680 <main>:
int write_ntag_into_bank(int bank);



int main()
{
 680:	1141                	addi	sp,sp,-16
 682:	c606                	sw	ra,12(sp)
 684:	c422                	sw	s0,8(sp)
 686:	c226                	sw	s1,4(sp)
	int start;
	int stop;
	int testok = 1;

	SystemInit();
 688:	3b15                	jal	3bc <SystemInit>

	RCC->CFGR0 |= (12<<4); //slowdown for lower power
 68a:	40021737          	lui	a4,0x40021
 68e:	435c                	lw	a5,4(a4)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 690:	e000f6b7          	lui	a3,0xe000f
 694:	0c07e793          	ori	a5,a5,192
 698:	c35c                	sw	a5,4(a4)
	uint32_t targend = SysTick->CNT + n;
 69a:	e000f7b7          	lui	a5,0xe000f
 69e:	4798                	lw	a4,8(a5)
 6a0:	004947b7          	lui	a5,0x494
 6a4:	e0078793          	addi	a5,a5,-512 # 493e00 <flash_test.c.96092c6c+0x491300>
 6a8:	973e                	add	a4,a4,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 6aa:	469c                	lw	a5,8(a3)
 6ac:	8f99                	sub	a5,a5,a4
 6ae:	fe07cee3          	bltz	a5,6aa <main+0x2a>

	Delay_Ms(100);

	printf( "Starting\n" );
 6b2:	6505                	lui	a0,0x1
 6b4:	93450513          	addi	a0,a0,-1740 # 934 <handle_reset+0x8e>
 6b8:	3f9d                	jal	62e <puts>
	while(1);
}

int unlock_flash() {
	// Unkock flash - be aware you need extra stuff for the bootloader.
	FLASH->KEYR = FLASH_KEY1;
 6ba:	45670737          	lui	a4,0x45670
 6be:	40022437          	lui	s0,0x40022
 6c2:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566f923>
	FLASH->KEYR = FLASH_KEY2;
 6c6:	cdef97b7          	lui	a5,0xcdef9
	FLASH->KEYR = FLASH_KEY1;
 6ca:	c058                	sw	a4,4(s0)
	FLASH->KEYR = FLASH_KEY2;
 6cc:	9ab78793          	addi	a5,a5,-1621 # cdef89ab <_eusrstack+0xadef81ab>
 6d0:	c05c                	sw	a5,4(s0)

	// For unlocking programming, in general.
	FLASH->MODEKEYR = FLASH_KEY1;
 6d2:	d058                	sw	a4,36(s0)
	FLASH->MODEKEYR = FLASH_KEY2;
 6d4:	d05c                	sw	a5,36(s0)

	printf( "FLASH->CTLR = %08lx\n", FLASH->CTLR );
 6d6:	480c                	lw	a1,16(s0)
 6d8:	6485                	lui	s1,0x1
 6da:	94048513          	addi	a0,s1,-1728 # 940 <handle_reset+0x9a>
 6de:	3fb5                	jal	65a <printf>
	if( FLASH->CTLR & 0x8080 ) 
 6e0:	481c                	lw	a5,16(s0)
 6e2:	6721                	lui	a4,0x8
 6e4:	08070713          	addi	a4,a4,128 # 8080 <flash_test.c.96092c6c+0x5580>
 6e8:	8ff9                	and	a5,a5,a4
 6ea:	c026                	sw	s1,0(sp)
 6ec:	cb89                	beqz	a5,6fe <main+0x7e>
	{
		printf( "Flash still locked\n" );
 6ee:	6505                	lui	a0,0x1
 6f0:	95850513          	addi	a0,a0,-1704 # 958 <handle_reset+0xb2>
 6f4:	3f2d                	jal	62e <puts>
		printf("Flash Locked!\n");
 6f6:	6505                	lui	a0,0x1
 6f8:	96c50513          	addi	a0,a0,-1684 # 96c <handle_reset+0xc6>
 6fc:	3f0d                	jal	62e <puts>
	printf( "Memory at: %08lx: %08lx %08lx\n", (uint32_t)ptr, ptr[0], ptr[1] );
 6fe:	08003737          	lui	a4,0x8003
 702:	4354                	lw	a3,4(a4)
 704:	4310                	lw	a2,0(a4)
 706:	6405                	lui	s0,0x1
 708:	080035b7          	lui	a1,0x8003
 70c:	97c40513          	addi	a0,s0,-1668 # 97c <handle_reset+0xd6>
 710:	37a9                	jal	65a <printf>
	printf( "FLASH->CTLR = %08lx\n", FLASH->CTLR );
 712:	400224b7          	lui	s1,0x40022
 716:	4782                	lw	a5,0(sp)
 718:	488c                	lw	a1,16(s1)
 71a:	94078513          	addi	a0,a5,-1728
 71e:	3f35                	jal	65a <printf>
	FLASH->CTLR = CR_PAGE_ER;
 720:	000207b7          	lui	a5,0x20
 724:	c89c                	sw	a5,16(s1)
	FLASH->ADDR = (intptr_t)ptr;
 726:	08003737          	lui	a4,0x8003
 72a:	c8d8                	sw	a4,20(s1)
	FLASH->CTLR = CR_STRT_Set | CR_PAGE_ER;
 72c:	04078793          	addi	a5,a5,64 # 20040 <flash_test.c.96092c6c+0x1d540>
 730:	c89c                	sw	a5,16(s1)
	start = SysTick->CNT;
 732:	e000f7b7          	lui	a5,0xe000f
 736:	4794                	lw	a3,8(a5)
	while( FLASH->STATR & FLASH_STATR_BSY );  // Takes about 3ms.
 738:	40022737          	lui	a4,0x40022
 73c:	475c                	lw	a5,12(a4)
 73e:	8b85                	andi	a5,a5,1
 740:	fff5                	bnez	a5,73c <main+0xbc>
	stop = SysTick->CNT;
 742:	e000f7b7          	lui	a5,0xe000f
 746:	4790                	lw	a2,8(a5)
	printf( "FLASH->STATR = %08lx -> %d cycles for page erase\n", FLASH->STATR, stop - start );
 748:	474c                	lw	a1,12(a4)
 74a:	6505                	lui	a0,0x1
 74c:	8e15                	sub	a2,a2,a3
 74e:	99c50513          	addi	a0,a0,-1636 # 99c <handle_reset+0xf6>
 752:	3721                	jal	65a <printf>
	printf( "Erase complete\n" );
 754:	6505                	lui	a0,0x1
 756:	9d050513          	addi	a0,a0,-1584 # 9d0 <handle_reset+0x12a>
 75a:	3dd1                	jal	62e <puts>
	printf( "Memory at %p: %08lx %08lx\n", ptr, ptr[0], ptr[1] );
 75c:	080034b7          	lui	s1,0x8003
 760:	40d4                	lw	a3,4(s1)
 762:	4090                	lw	a2,0(s1)
 764:	6505                	lui	a0,0x1
 766:	080035b7          	lui	a1,0x8003
 76a:	9e050513          	addi	a0,a0,-1568 # 9e0 <handle_reset+0x13a>
 76e:	35f5                	jal	65a <printf>
	if( ptr[0] != 0xffffffff )
 770:	4098                	lw	a4,0(s1)
 772:	57fd                	li	a5,-1
	int testok = 1;
 774:	4485                	li	s1,1
	if( ptr[0] != 0xffffffff )
 776:	00f70763          	beq	a4,a5,784 <main+0x104>
		printf( "WARNING/FAILURE: Flash general erasure failed\n" );
 77a:	6505                	lui	a0,0x1
 77c:	9fc50513          	addi	a0,a0,-1540 # 9fc <handle_reset+0x156>
 780:	357d                	jal	62e <puts>
		testok = 0;
 782:	4481                	li	s1,0
	FLASH->CTLR = CR_PAGE_PG;  // synonym of FTPG.
 784:	400227b7          	lui	a5,0x40022
 788:	6741                	lui	a4,0x10
 78a:	cb98                	sw	a4,16(a5)
	FLASH->CTLR = CR_BUF_RST | CR_PAGE_PG;
 78c:	00090737          	lui	a4,0x90
 790:	cb98                	sw	a4,16(a5)
	FLASH->ADDR = (intptr_t)ptr;  // This can actually happen about anywhere toward the end here.
 792:	08003737          	lui	a4,0x8003
 796:	cbd8                	sw	a4,20(a5)
	start = SysTick->CNT;
 798:	e000f7b7          	lui	a5,0xe000f
 79c:	4794                	lw	a3,8(a5)
	while( FLASH->STATR & FLASH_STATR_BSY );  // No real need for this.
 79e:	40022737          	lui	a4,0x40022
 7a2:	475c                	lw	a5,12(a4)
 7a4:	8b85                	andi	a5,a5,1
 7a6:	fff5                	bnez	a5,7a2 <main+0x122>
	stop = SysTick->CNT;
 7a8:	e000f7b7          	lui	a5,0xe000f
 7ac:	4790                	lw	a2,8(a5)
	printf( "FLASH->STATR = %08lx -> %d cycles for buffer reset\n", FLASH->STATR, stop - start );
 7ae:	474c                	lw	a1,12(a4)
 7b0:	6505                	lui	a0,0x1
 7b2:	8e15                	sub	a2,a2,a3
 7b4:	a2c50513          	addi	a0,a0,-1492 # a2c <handle_reset+0x186>
 7b8:	354d                	jal	65a <printf>
	start = SysTick->CNT;
 7ba:	e000f7b7          	lui	a5,0xe000f
 7be:	abcd1737          	lui	a4,0xabcd1
 7c2:	478c                	lw	a1,8(a5)
		ptr[i] = 0xabcd1234 + i; //Write to the memory
 7c4:	58cbe537          	lui	a0,0x58cbe
	start = SysTick->CNT;
 7c8:	23470793          	addi	a5,a4,564 # abcd1234 <_eusrstack+0x8bcd0a34>
		FLASH->CTLR = CR_PAGE_PG | FLASH_CTLR_BUF_LOAD; // Load the buffer.
 7cc:	400226b7          	lui	a3,0x40022
 7d0:	00050337          	lui	t1,0x50
	for( i = 0; i < 16; i++ )
 7d4:	24470713          	addi	a4,a4,580
		ptr[i] = 0xabcd1234 + i; //Write to the memory
 7d8:	00279613          	slli	a2,a5,0x2
 7dc:	962a                	add	a2,a2,a0
 7de:	72f62823          	sw	a5,1840(a2)
		FLASH->CTLR = CR_PAGE_PG | FLASH_CTLR_BUF_LOAD; // Load the buffer.
 7e2:	0066a823          	sw	t1,16(a3) # 40022010 <_eusrstack+0x20021810>
		while( FLASH->STATR & FLASH_STATR_BSY );  // Only needed if running from RAM.
 7e6:	46d0                	lw	a2,12(a3)
 7e8:	8a05                	andi	a2,a2,1
 7ea:	fe75                	bnez	a2,7e6 <main+0x166>
	for( i = 0; i < 16; i++ )
 7ec:	0785                	addi	a5,a5,1
 7ee:	fee795e3          	bne	a5,a4,7d8 <main+0x158>
	stop = SysTick->CNT;
 7f2:	e000f737          	lui	a4,0xe000f
 7f6:	471c                	lw	a5,8(a4)
	printf( "Write: %d cycles for writing data in\n", stop - start );
 7f8:	6505                	lui	a0,0x1
 7fa:	a6050513          	addi	a0,a0,-1440 # a60 <handle_reset+0x1ba>
 7fe:	40b785b3          	sub	a1,a5,a1
 802:	3da1                	jal	65a <printf>
	FLASH->CTLR = CR_PAGE_PG|CR_STRT_Set;
 804:	67c1                	lui	a5,0x10
 806:	04078793          	addi	a5,a5,64 # 10040 <flash_test.c.96092c6c+0xd540>
 80a:	400226b7          	lui	a3,0x40022
 80e:	ca9c                	sw	a5,16(a3)
	start = SysTick->CNT;
 810:	e000f737          	lui	a4,0xe000f
 814:	4714                	lw	a3,8(a4)
	while( FLASH->STATR & FLASH_STATR_BSY );
 816:	400227b7          	lui	a5,0x40022
 81a:	47d8                	lw	a4,12(a5)
 81c:	8b05                	andi	a4,a4,1
 81e:	ff75                	bnez	a4,81a <main+0x19a>
	stop = SysTick->CNT;
 820:	e000f737          	lui	a4,0xe000f
 824:	4710                	lw	a2,8(a4)
	printf( "FLASH->STATR = %08lx -> %d cycles for page write\n", FLASH->STATR, stop - start );
 826:	47cc                	lw	a1,12(a5)
 828:	6505                	lui	a0,0x1
 82a:	8e15                	sub	a2,a2,a3
 82c:	a8850513          	addi	a0,a0,-1400 # a88 <handle_reset+0x1e2>
 830:	352d                	jal	65a <printf>
	printf( "FLASH->STATR = %08lx\n", FLASH->STATR );
 832:	400227b7          	lui	a5,0x40022
 836:	47cc                	lw	a1,12(a5)
 838:	6505                	lui	a0,0x1
 83a:	abc50513          	addi	a0,a0,-1348 # abc <handle_reset+0x216>
 83e:	3d31                	jal	65a <printf>
	printf( "Memory at: %08lx: %08lx %08lx\n", (uint32_t)ptr, ptr[0], ptr[1] );
 840:	080037b7          	lui	a5,0x8003
 844:	43d4                	lw	a3,4(a5)
 846:	4390                	lw	a2,0(a5)
 848:	080035b7          	lui	a1,0x8003
 84c:	97c40513          	addi	a0,s0,-1668
 850:	3529                	jal	65a <printf>
	if( ptr[0] != 0xabcd1234 )
 852:	080037b7          	lui	a5,0x8003
 856:	4398                	lw	a4,0(a5)
 858:	abcd17b7          	lui	a5,0xabcd1
 85c:	23478793          	addi	a5,a5,564 # abcd1234 <_eusrstack+0x8bcd0a34>
 860:	00f70763          	beq	a4,a5,86e <main+0x1ee>
		printf( "WARNING/FAILURE: Flash general erasure failed\n" );
 864:	6505                	lui	a0,0x1
 866:	9fc50513          	addi	a0,a0,-1540 # 9fc <handle_reset+0x156>
 86a:	33d1                	jal	62e <puts>
		testok = 0;
 86c:	4481                	li	s1,0
 86e:	08003437          	lui	s0,0x8003
		printf( "%08lx ", ptr[i] );
 872:	6705                	lui	a4,0x1
 874:	400c                	lw	a1,0(s0)
 876:	ad470513          	addi	a0,a4,-1324 # ad4 <handle_reset+0x22e>
 87a:	0411                	addi	s0,s0,4
 87c:	3bf9                	jal	65a <printf>
	for( i = 0; i < 16; i++ )
 87e:	080037b7          	lui	a5,0x8003
 882:	04078793          	addi	a5,a5,64 # 8003040 <flash_test.c.96092c6c+0x8000540>
 886:	6705                	lui	a4,0x1
 888:	fef416e3          	bne	s0,a5,874 <main+0x1f4>
	printf( "\n\nTest results: %s\n", testok?"PASS":"FAIL" );
 88c:	e889                	bnez	s1,89e <main+0x21e>
 88e:	6585                	lui	a1,0x1
 890:	92c58593          	addi	a1,a1,-1748 # 92c <handle_reset+0x86>
 894:	6505                	lui	a0,0x1
 896:	adc50513          	addi	a0,a0,-1316 # adc <handle_reset+0x236>
 89a:	33c1                	jal	65a <printf>
	while(1);
 89c:	a001                	j	89c <main+0x21c>
	printf( "\n\nTest results: %s\n", testok?"PASS":"FAIL" );
 89e:	6585                	lui	a1,0x1
 8a0:	92458593          	addi	a1,a1,-1756 # 924 <handle_reset+0x7e>
 8a4:	bfc5                	j	894 <main+0x214>

000008a6 <handle_reset>:
	asm volatile( "\n\
 8a6:	20000197          	auipc	gp,0x20000
 8aa:	f5a18193          	addi	gp,gp,-166 # 20000800 <_eusrstack>
 8ae:	00018113          	mv	sp,gp
 8b2:	08000513          	li	a0,128
 8b6:	30051073          	csrw	mstatus,a0
 8ba:	468d                	li	a3,3
 8bc:	fffff517          	auipc	a0,0xfffff
 8c0:	74450513          	addi	a0,a0,1860 # 0 <InterruptVector>
 8c4:	8d55                	or	a0,a0,a3
 8c6:	30551073          	csrw	mtvec,a0
asm volatile(
 8ca:	1ffff517          	auipc	a0,0x1ffff
 8ce:	73650513          	addi	a0,a0,1846 # 20000000 <_data_vma>
 8d2:	1ffff597          	auipc	a1,0x1ffff
 8d6:	72e58593          	addi	a1,a1,1838 # 20000000 <_data_vma>
 8da:	4601                	li	a2,0
 8dc:	00b55663          	bge	a0,a1,8e8 <handle_reset+0x42>
 8e0:	c110                	sw	a2,0(a0)
 8e2:	0511                	addi	a0,a0,4
 8e4:	feb54ee3          	blt	a0,a1,8e0 <handle_reset+0x3a>
 8e8:	00000517          	auipc	a0,0x0
 8ec:	20850513          	addi	a0,a0,520 # af0 <_data_lma>
 8f0:	1ffff597          	auipc	a1,0x1ffff
 8f4:	71058593          	addi	a1,a1,1808 # 20000000 <_data_vma>
 8f8:	1ffff617          	auipc	a2,0x1ffff
 8fc:	70860613          	addi	a2,a2,1800 # 20000000 <_data_vma>
 900:	00c58863          	beq	a1,a2,910 <handle_reset+0x6a>
 904:	4114                	lw	a3,0(a0)
 906:	c194                	sw	a3,0(a1)
 908:	0511                	addi	a0,a0,4
 90a:	0591                	addi	a1,a1,4
 90c:	fec59ae3          	bne	a1,a2,900 <handle_reset+0x5a>
	SysTick->CTLR = 5;
 910:	e000f7b7          	lui	a5,0xe000f
 914:	4715                	li	a4,5
 916:	c398                	sw	a4,0(a5)
asm volatile(
 918:	68000793          	li	a5,1664
 91c:	34179073          	csrw	mepc,a5
 920:	30200073          	mret
 924:	4150                	lw	a2,4(a0)
 926:	00005353          	fadd.s	ft6,ft0,ft0,unknown
 92a:	0000                	unimp
 92c:	4146                	lw	sp,80(sp)
 92e:	4c49                	li	s8,18
 930:	0000                	unimp
 932:	0000                	unimp
 934:	72617453          	0x72617453
 938:	6974                	flw	fa3,84(a0)
 93a:	676e                	flw	fa4,216(sp)
 93c:	0000                	unimp
 93e:	0000                	unimp
 940:	4c46                	lw	s8,80(sp)
 942:	5341                	li	t1,-16
 944:	2d48                	fld	fa0,152(a0)
 946:	433e                	lw	t1,204(sp)
 948:	4c54                	lw	a3,28(s0)
 94a:	2052                	fld	ft0,272(sp)
 94c:	203d                	jal	97a <handle_reset+0xd4>
 94e:	3025                	jal	176 <_write.constprop.0+0x4e>
 950:	6c38                	flw	fa4,88(s0)
 952:	0a78                	addi	a4,sp,284
 954:	0000                	unimp
 956:	0000                	unimp
 958:	6c46                	flw	fs8,80(sp)
 95a:	7361                	lui	t1,0xffff8
 95c:	2068                	fld	fa0,192(s0)
 95e:	6c697473          	csrrci	s0,0x6c6,18
 962:	206c                	fld	fa1,192(s0)
 964:	6f6c                	flw	fa1,92(a4)
 966:	64656b63          	bltu	a0,t1,fbc <_data_lma+0x4cc>
 96a:	0000                	unimp
 96c:	6c46                	flw	fs8,80(sp)
 96e:	7361                	lui	t1,0xffff8
 970:	2068                	fld	fa0,192(s0)
 972:	6f4c                	flw	fa1,28(a4)
 974:	64656b63          	bltu	a0,t1,fca <_data_lma+0x4da>
 978:	0021                	c.nop	8
 97a:	0000                	unimp
 97c:	654d                	lui	a0,0x13
 97e:	6f6d                	lui	t5,0x1b
 980:	7972                	flw	fs2,60(sp)
 982:	6120                	flw	fs0,64(a0)
 984:	3a74                	fld	fa3,240(a2)
 986:	2520                	fld	fs0,72(a0)
 988:	3830                	fld	fa2,112(s0)
 98a:	786c                	flw	fa1,116(s0)
 98c:	203a                	fld	ft0,392(sp)
 98e:	3025                	jal	1b6 <_write.constprop.0+0x8e>
 990:	6c38                	flw	fa4,88(s0)
 992:	2078                	fld	fa4,192(s0)
 994:	3025                	jal	1bc <_write.constprop.0+0x94>
 996:	6c38                	flw	fa4,88(s0)
 998:	0a78                	addi	a4,sp,284
 99a:	0000                	unimp
 99c:	4c46                	lw	s8,80(sp)
 99e:	5341                	li	t1,-16
 9a0:	2d48                	fld	fa0,152(a0)
 9a2:	533e                	lw	t1,236(sp)
 9a4:	4154                	lw	a3,4(a0)
 9a6:	5254                	lw	a3,36(a2)
 9a8:	3d20                	fld	fs0,120(a0)
 9aa:	2520                	fld	fs0,72(a0)
 9ac:	3830                	fld	fa2,112(s0)
 9ae:	786c                	flw	fa1,116(s0)
 9b0:	2d20                	fld	fs0,88(a0)
 9b2:	203e                	fld	ft0,456(sp)
 9b4:	6425                	lui	s0,0x9
 9b6:	6320                	flw	fs0,64(a4)
 9b8:	6379                	lui	t1,0x1e
 9ba:	656c                	flw	fa1,76(a0)
 9bc:	6f662073          	csrs	0x6f6,a2
 9c0:	2072                	fld	ft0,280(sp)
 9c2:	6170                	flw	fa2,68(a0)
 9c4:	65206567          	0x65206567
 9c8:	6172                	flw	ft2,28(sp)
 9ca:	000a6573          	csrrsi	a0,ustatus,20
 9ce:	0000                	unimp
 9d0:	7245                	lui	tp,0xffff1
 9d2:	7361                	lui	t1,0xffff8
 9d4:	2065                	jal	a7c <handle_reset+0x1d6>
 9d6:	706d6f63          	bltu	s10,t1,10f4 <ch32fun.c.44bec7b9+0x30>
 9da:	656c                	flw	fa1,76(a0)
 9dc:	6574                	flw	fa3,76(a0)
 9de:	0000                	unimp
 9e0:	654d                	lui	a0,0x13
 9e2:	6f6d                	lui	t5,0x1b
 9e4:	7972                	flw	fs2,60(sp)
 9e6:	6120                	flw	fs0,64(a0)
 9e8:	2074                	fld	fa3,192(s0)
 9ea:	7025                	c.lui	zero,0xfffe9
 9ec:	203a                	fld	ft0,392(sp)
 9ee:	3025                	jal	216 <mini_itoa.part.0+0x6>
 9f0:	6c38                	flw	fa4,88(s0)
 9f2:	2078                	fld	fa4,192(s0)
 9f4:	3025                	jal	21c <mini_itoa.part.0+0xc>
 9f6:	6c38                	flw	fa4,88(s0)
 9f8:	0a78                	addi	a4,sp,284
 9fa:	0000                	unimp
 9fc:	4e524157          	0x4e524157
 a00:	4e49                	li	t3,18
 a02:	41462f47          	fmsub.s	ft10,fa2,fs4,fs0,rdn
 a06:	4c49                	li	s8,18
 a08:	5255                	li	tp,-11
 a0a:	3a45                	jal	3ba <__puts_uart+0x12>
 a0c:	4620                	lw	s0,72(a2)
 a0e:	616c                	flw	fa1,68(a0)
 a10:	67206873          	csrrsi	a6,0x672,0
 a14:	6e65                	lui	t3,0x19
 a16:	7265                	lui	tp,0xffff9
 a18:	6c61                	lui	s8,0x18
 a1a:	6520                	flw	fs0,72(a0)
 a1c:	6172                	flw	ft2,28(sp)
 a1e:	65727573          	csrrci	a0,0x657,4
 a22:	6620                	flw	fs0,72(a2)
 a24:	6961                	lui	s2,0x18
 a26:	656c                	flw	fa1,76(a0)
 a28:	0064                	addi	s1,sp,12
 a2a:	0000                	unimp
 a2c:	4c46                	lw	s8,80(sp)
 a2e:	5341                	li	t1,-16
 a30:	2d48                	fld	fa0,152(a0)
 a32:	533e                	lw	t1,236(sp)
 a34:	4154                	lw	a3,4(a0)
 a36:	5254                	lw	a3,36(a2)
 a38:	3d20                	fld	fs0,120(a0)
 a3a:	2520                	fld	fs0,72(a0)
 a3c:	3830                	fld	fa2,112(s0)
 a3e:	786c                	flw	fa1,116(s0)
 a40:	2d20                	fld	fs0,88(a0)
 a42:	203e                	fld	ft0,456(sp)
 a44:	6425                	lui	s0,0x9
 a46:	6320                	flw	fs0,64(a4)
 a48:	6379                	lui	t1,0x1e
 a4a:	656c                	flw	fa1,76(a0)
 a4c:	6f662073          	csrs	0x6f6,a2
 a50:	2072                	fld	ft0,280(sp)
 a52:	7562                	flw	fa0,56(sp)
 a54:	6666                	flw	fa2,88(sp)
 a56:	7265                	lui	tp,0xffff9
 a58:	7220                	flw	fs0,96(a2)
 a5a:	7365                	lui	t1,0xffff9
 a5c:	7465                	lui	s0,0xffff9
 a5e:	000a                	c.slli	zero,0x2
 a60:	74697257          	0x74697257
 a64:	3a65                	jal	41c <ADC1_2_IRQHandler+0x8>
 a66:	2520                	fld	fs0,72(a0)
 a68:	2064                	fld	fs1,192(s0)
 a6a:	6c637963          	bgeu	t1,t1,113c <ch32fun.c.44bec7b9+0x78>
 a6e:	7365                	lui	t1,0xffff9
 a70:	6620                	flw	fs0,72(a2)
 a72:	7720726f          	jal	tp,81e4 <flash_test.c.96092c6c+0x56e4>
 a76:	6972                	flw	fs2,28(sp)
 a78:	6974                	flw	fa3,84(a0)
 a7a:	676e                	flw	fa4,216(sp)
 a7c:	6420                	flw	fs0,72(s0)
 a7e:	7461                	lui	s0,0xffff8
 a80:	2061                	jal	b08 <_data_lma+0x18>
 a82:	6e69                	lui	t3,0x1a
 a84:	000a                	c.slli	zero,0x2
 a86:	0000                	unimp
 a88:	4c46                	lw	s8,80(sp)
 a8a:	5341                	li	t1,-16
 a8c:	2d48                	fld	fa0,152(a0)
 a8e:	533e                	lw	t1,236(sp)
 a90:	4154                	lw	a3,4(a0)
 a92:	5254                	lw	a3,36(a2)
 a94:	3d20                	fld	fs0,120(a0)
 a96:	2520                	fld	fs0,72(a0)
 a98:	3830                	fld	fa2,112(s0)
 a9a:	786c                	flw	fa1,116(s0)
 a9c:	2d20                	fld	fs0,88(a0)
 a9e:	203e                	fld	ft0,456(sp)
 aa0:	6425                	lui	s0,0x9
 aa2:	6320                	flw	fs0,64(a4)
 aa4:	6379                	lui	t1,0x1e
 aa6:	656c                	flw	fa1,76(a0)
 aa8:	6f662073          	csrs	0x6f6,a2
 aac:	2072                	fld	ft0,280(sp)
 aae:	6170                	flw	fa2,68(a0)
 ab0:	77206567          	0x77206567
 ab4:	6972                	flw	fs2,28(sp)
 ab6:	6574                	flw	fa3,76(a0)
 ab8:	000a                	c.slli	zero,0x2
 aba:	0000                	unimp
 abc:	4c46                	lw	s8,80(sp)
 abe:	5341                	li	t1,-16
 ac0:	2d48                	fld	fa0,152(a0)
 ac2:	533e                	lw	t1,236(sp)
 ac4:	4154                	lw	a3,4(a0)
 ac6:	5254                	lw	a3,36(a2)
 ac8:	3d20                	fld	fs0,120(a0)
 aca:	2520                	fld	fs0,72(a0)
 acc:	3830                	fld	fa2,112(s0)
 ace:	786c                	flw	fa1,116(s0)
 ad0:	000a                	c.slli	zero,0x2
 ad2:	0000                	unimp
 ad4:	3025                	jal	2fc <PrintN+0x2e>
 ad6:	6c38                	flw	fa4,88(s0)
 ad8:	2078                	fld	fa4,192(s0)
 ada:	0000                	unimp
 adc:	0a0a                	slli	s4,s4,0x2
 ade:	6554                	flw	fa3,12(a0)
 ae0:	72207473          	csrrci	s0,0x722,0
 ae4:	7365                	lui	t1,0xffff9
 ae6:	6c75                	lui	s8,0x1d
 ae8:	7374                	flw	fa3,100(a4)
 aea:	203a                	fld	ft0,392(sp)
 aec:	7325                	lui	t1,0xfffe9
 aee:	000a                	c.slli	zero,0x2
