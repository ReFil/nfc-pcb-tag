
full_tag.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
void handle_reset( void ) __attribute__((section(".text.handle_reset")));

void InterruptVectorDefault( void )
{
#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
	asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	1460106f          	j	1146 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	06fc                	addi	a5,sp,844
   a:	0000                	unimp
   c:	06b0                	addi	a2,sp,840
	...
  2e:	0000                	unimp
  30:	06b0                	addi	a2,sp,840
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	06b0                	addi	a2,sp,840
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	06b0                	addi	a2,sp,840
  42:	0000                	unimp
  44:	06b0                	addi	a2,sp,840
  46:	0000                	unimp
  48:	06b0                	addi	a2,sp,840
  4a:	0000                	unimp
  4c:	06b0                	addi	a2,sp,840
  4e:	0000                	unimp
  50:	06b0                	addi	a2,sp,840
  52:	0000                	unimp
  54:	06b0                	addi	a2,sp,840
  56:	0000                	unimp
  58:	06b0                	addi	a2,sp,840
  5a:	0000                	unimp
  5c:	06b0                	addi	a2,sp,840
  5e:	0000                	unimp
  60:	06b0                	addi	a2,sp,840
  62:	0000                	unimp
  64:	06b0                	addi	a2,sp,840
  66:	0000                	unimp
  68:	06b0                	addi	a2,sp,840
  6a:	0000                	unimp
  6c:	06b0                	addi	a2,sp,840
  6e:	0000                	unimp
  70:	06b0                	addi	a2,sp,840
  72:	0000                	unimp
  74:	06b0                	addi	a2,sp,840
  76:	0000                	unimp
  78:	06b0                	addi	a2,sp,840
  7a:	0000                	unimp
  7c:	06b0                	addi	a2,sp,840
  7e:	0000                	unimp
  80:	06b0                	addi	a2,sp,840
  82:	0000                	unimp
  84:	06b0                	addi	a2,sp,840
  86:	0000                	unimp
  88:	06b0                	addi	a2,sp,840
  8a:	0000                	unimp
  8c:	06b0                	addi	a2,sp,840
  8e:	0000                	unimp
  90:	06b0                	addi	a2,sp,840
  92:	0000                	unimp
  94:	06b0                	addi	a2,sp,840
  96:	0000                	unimp
  98:	06b0                	addi	a2,sp,840
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
     11e:	e00007b7          	lui	a5,0xe0000
     122:	0f47a783          	lw	a5,244(a5) # e00000f4 <__global_pointer$+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
     126:	8082                	ret

00000128 <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     128:	e0000737          	lui	a4,0xe0000
     12c:	0f472783          	lw	a5,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     130:	1121                	addi	sp,sp,-24
     132:	ca06                	sw	ra,20(sp)
     134:	c822                	sw	s0,16(sp)
     136:	c626                	sw	s1,12(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     138:	0c07f793          	andi	a5,a5,192
     13c:	0c000693          	li	a3,192
     140:	0ad78a63          	beq	a5,a3,1f4 <_write.constprop.0+0xcc>

	char buffer[4] = { 0 };
     144:	c402                	sw	zero,8(sp)
     146:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
     148:	e1f1                	bnez	a1,20c <_write.constprop.0+0xe4>
	{
		lastdmd = (*DMDATA0);
     14a:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     14e:	c789                	beqz	a5,158 <_write.constprop.0+0x30>
     150:	0807f793          	andi	a5,a5,128
     154:	e391                	bnez	a5,158 <_write.constprop.0+0x30>
     156:	37e1                	jal	11e <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
     158:	40d2                	lw	ra,20(sp)
     15a:	8522                	mv	a0,s0
     15c:	4442                	lw	s0,16(sp)
     15e:	44b2                	lw	s1,12(sp)
     160:	0161                	addi	sp,sp,24
     162:	8082                	ret
		int tosend = size - place;
     164:	409407b3          	sub	a5,s0,s1
     168:	471d                	li	a4,7
     16a:	00f75363          	bge	a4,a5,170 <_write.constprop.0+0x48>
     16e:	479d                	li	a5,7
     170:	00080737          	lui	a4,0x80
     174:	0705                	addi	a4,a4,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     176:	e0000637          	lui	a2,0xe0000
     17a:	0f462683          	lw	a3,244(a2) # e00000f4 <__global_pointer$+0xbffff8f4>
     17e:	0f460593          	addi	a1,a2,244
     182:	0806f313          	andi	t1,a3,128
     186:	06031163          	bnez	t1,1e8 <_write.constprop.0+0xc0>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     18a:	c691                	beqz	a3,196 <_write.constprop.0+0x6e>
     18c:	c22a                	sw	a0,4(sp)
     18e:	c03e                	sw	a5,0(sp)
     190:	3779                	jal	11e <internal_handle_input.constprop.0>
     192:	4512                	lw	a0,4(sp)
     194:	4782                	lw	a5,0(sp)
     196:	0034                	addi	a3,sp,8
		int tosend = size - place;
     198:	470d                	li	a4,3
     19a:	85b6                	mv	a1,a3
		while( t < tosend )
     19c:	04f74e63          	blt	a4,a5,1f8 <_write.constprop.0+0xd0>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     1a0:	46a2                	lw	a3,8(sp)
     1a2:	e0000737          	lui	a4,0xe0000
		while( t < tosend && t < 3 )
     1a6:	460d                	li	a2,3
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     1a8:	0ed72c23          	sw	a3,248(a4) # e00000f8 <__global_pointer$+0xbffff8f8>
     1ac:	009506b3          	add	a3,a0,s1
		t = 0;
     1b0:	4701                	li	a4,0
			buffer[t+1] = buf[t+place];
     1b2:	0006c283          	lbu	t0,0(a3)
     1b6:	0705                	addi	a4,a4,1
     1b8:	00e58333          	add	t1,a1,a4
     1bc:	00530023          	sb	t0,0(t1)
		while( t < tosend && t < 3 )
     1c0:	00e78563          	beq	a5,a4,1ca <_write.constprop.0+0xa2>
     1c4:	0685                	addi	a3,a3,1
     1c6:	fec716e3          	bne	a4,a2,1b2 <_write.constprop.0+0x8a>
		buffer[0] = 0x80 | (tosend + 4);
     1ca:	00478713          	addi	a4,a5,4
     1ce:	f8076713          	ori	a4,a4,-128
     1d2:	00e10423          	sb	a4,8(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     1d6:	46a2                	lw	a3,8(sp)
     1d8:	e0000737          	lui	a4,0xe0000
		place += tosend;
     1dc:	94be                	add	s1,s1,a5
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     1de:	0ed72a23          	sw	a3,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
	while( place < size )
     1e2:	f884c1e3          	blt	s1,s0,164 <_write.constprop.0+0x3c>
     1e6:	bf8d                	j	158 <_write.constprop.0+0x30>
     1e8:	177d                	addi	a4,a4,-1
			if( timeout-- == 0 )
     1ea:	fb41                	bnez	a4,17a <_write.constprop.0+0x52>
				*DMDATA0 |= 0xc0;
     1ec:	419c                	lw	a5,0(a1)
     1ee:	0c07e793          	ori	a5,a5,192
     1f2:	c19c                	sw	a5,0(a1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     1f4:	4401                	li	s0,0
     1f6:	b78d                	j	158 <_write.constprop.0+0x30>
			buffer[t-3] = buf[t+place];
     1f8:	00e48633          	add	a2,s1,a4
     1fc:	962a                	add	a2,a2,a0
     1fe:	00064603          	lbu	a2,0(a2)
			t++;
     202:	0705                	addi	a4,a4,1
     204:	0685                	addi	a3,a3,1
			buffer[t-3] = buf[t+place];
     206:	fec68fa3          	sb	a2,-1(a3)
     20a:	bf49                	j	19c <_write.constprop.0+0x74>
	if( size == 0 )
     20c:	4481                	li	s1,0
     20e:	bfd1                	j	1e2 <_write.constprop.0+0xba>

00000210 <i2c_write.constprop.0>:

	return i2c_ret;
}


i2c_err_t i2c_write(const uint8_t addr,		const uint8_t reg,
     210:	7d100693          	li	a3,2001
{
	i2c_err_t i2c_ret = I2C_OK;

	// Wait for the bus to become not busy - set state to I2C_ERR_TIMEOUT on failure
	int32_t timeout = I2C_TIMEOUT;
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
     214:	40005337          	lui	t1,0x40005
     218:	41835703          	lhu	a4,1048(t1) # 40005418 <__global_pointer$+0x20004c18>
     21c:	40030793          	addi	a5,t1,1024
     220:	8b09                	andi	a4,a4,2
     222:	e775                	bnez	a4,30e <i2c_write.constprop.0+0xfe>
		if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}

	if(i2c_ret == I2C_OK)
	{
		// Send a START Signal and wait for it to assert
		I2C1->CTLR1 |= I2C_CTLR1_START;
     224:	0007d703          	lhu	a4,0(a5)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     228:	400052b7          	lui	t0,0x40005
		I2C1->CTLR1 |= I2C_CTLR1_START;
     22c:	0742                	slli	a4,a4,0x10
     22e:	8341                	srli	a4,a4,0x10
     230:	10076713          	ori	a4,a4,256
     234:	00e79023          	sh	a4,0(a5)
	return (status & status_mask) == status_mask; 
     238:	00030737          	lui	a4,0x30
     23c:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     23e:	4142d783          	lhu	a5,1044(t0) # 40005414 <__global_pointer$+0x20004c14>
     242:	01079313          	slli	t1,a5,0x10
     246:	4182d783          	lhu	a5,1048(t0)
     24a:	01035313          	srli	t1,t1,0x10
     24e:	07c2                	slli	a5,a5,0x10
     250:	0067e7b3          	or	a5,a5,t1
	return (status & status_mask) == status_mask; 
     254:	8ff9                	and	a5,a5,a4
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     256:	fee794e3          	bne	a5,a4,23e <i2c_write.constprop.0+0x2e>

		// Send the Address and wait for it to finish transmitting
		timeout = I2C_TIMEOUT;
		I2C1->DATAR = (addr << 1) & 0xFE;
     25a:	4791                	li	a5,4
	return (status & status_mask) == status_mask; 
     25c:	000706b7          	lui	a3,0x70
		I2C1->DATAR = (addr << 1) & 0xFE;
     260:	40f29823          	sh	a5,1040(t0)
     264:	7d100313          	li	t1,2001
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     268:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     26c:	08268693          	addi	a3,a3,130 # 70082 <lib_i2c.c.e7f16be4+0x6bd24>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     270:	4142d703          	lhu	a4,1044(t0) # 40005414 <__global_pointer$+0x20004c14>
     274:	40028793          	addi	a5,t0,1024
     278:	01071393          	slli	t2,a4,0x10
     27c:	0187d703          	lhu	a4,24(a5)
     280:	0103d393          	srli	t2,t2,0x10
     284:	0742                	slli	a4,a4,0x10
     286:	00776733          	or	a4,a4,t2
	return (status & status_mask) == status_mask; 
     28a:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
     28c:	0ad71e63          	bne	a4,a3,348 <i2c_write.constprop.0+0x138>


	if(i2c_ret == I2C_OK)
	{
		// Send the Register Byte
		I2C1->DATAR = reg;
     290:	0542                	slli	a0,a0,0x10
     292:	8141                	srli	a0,a0,0x10
     294:	00a79823          	sh	a0,16(a5)
		while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     298:	40005737          	lui	a4,0x40005
     29c:	41475783          	lhu	a5,1044(a4) # 40005414 <__global_pointer$+0x20004c14>
     2a0:	0807f793          	andi	a5,a5,128
     2a4:	dfe5                	beqz	a5,29c <i2c_write.constprop.0+0x8c>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     2a6:	6505                	lui	a0,0x1
		while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     2a8:	86ae                	mv	a3,a1
		// Write bytes
		uint8_t cbyte = 0;
		while(cbyte < len)
		{
			// Write the byte and wait for it to finish transmitting
			while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     2aa:	40005337          	lui	t1,0x40005
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     2ae:	80050513          	addi	a0,a0,-2048 # 800 <mini_vpprintf+0xd2>
			while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     2b2:	41435703          	lhu	a4,1044(t1) # 40005414 <__global_pointer$+0x20004c14>
     2b6:	40030793          	addi	a5,t1,1024
     2ba:	08077713          	andi	a4,a4,128
     2be:	db75                	beqz	a4,2b2 <i2c_write.constprop.0+0xa2>
			I2C1->DATAR = buf[cbyte];
     2c0:	0006c703          	lbu	a4,0(a3)
     2c4:	00e79823          	sh	a4,16(a5)
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
     2c8:	0147d703          	lhu	a4,20(a5)
     2cc:	10077713          	andi	a4,a4,256
     2d0:	c76d                	beqz	a4,3ba <i2c_write.constprop.0+0x1aa>
     2d2:	0147d703          	lhu	a4,20(a5)
     2d6:	4505                	li	a0,1
     2d8:	0742                	slli	a4,a4,0x10
     2da:	8341                	srli	a4,a4,0x10
     2dc:	eff77713          	andi	a4,a4,-257
     2e0:	0742                	slli	a4,a4,0x10
     2e2:	8341                	srli	a4,a4,0x10
     2e4:	00e79a23          	sh	a4,20(a5)
	return (status & status_mask) == status_mask; 
     2e8:	00070737          	lui	a4,0x70
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     2ec:	400055b7          	lui	a1,0x40005
	return (status & status_mask) == status_mask; 
     2f0:	08470713          	addi	a4,a4,132 # 70084 <lib_i2c.c.e7f16be4+0x6bd26>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     2f4:	4145d783          	lhu	a5,1044(a1) # 40005414 <__global_pointer$+0x20004c14>
     2f8:	01079693          	slli	a3,a5,0x10
     2fc:	4185d783          	lhu	a5,1048(a1)
     300:	82c1                	srli	a3,a3,0x10
     302:	07c2                	slli	a5,a5,0x10
     304:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     306:	8ff9                	and	a5,a5,a4

			++cbyte;
		}

		// Wait for the bus to finish transmitting
		while(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED));
     308:	fee796e3          	bne	a5,a4,2f4 <i2c_write.constprop.0+0xe4>
     30c:	a01d                	j	332 <i2c_write.constprop.0+0x122>
     30e:	16fd                	addi	a3,a3,-1
		if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     310:	f681                	bnez	a3,218 <i2c_write.constprop.0+0x8>
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
     312:	0147d703          	lhu	a4,20(a5)
     316:	10077713          	andi	a4,a4,256
     31a:	cb1d                	beqz	a4,350 <i2c_write.constprop.0+0x140>
     31c:	0147d703          	lhu	a4,20(a5)
     320:	4505                	li	a0,1
     322:	0742                	slli	a4,a4,0x10
     324:	8341                	srli	a4,a4,0x10
     326:	eff77713          	andi	a4,a4,-257
     32a:	0742                	slli	a4,a4,0x10
     32c:	8341                	srli	a4,a4,0x10
     32e:	00e79a23          	sh	a4,20(a5)
	}

	// Send a STOP Condition, to aut-reset for the next operation
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     332:	40005737          	lui	a4,0x40005
     336:	40075783          	lhu	a5,1024(a4) # 40005400 <__global_pointer$+0x20004c00>
     33a:	07c2                	slli	a5,a5,0x10
     33c:	83c1                	srli	a5,a5,0x10
     33e:	2007e793          	ori	a5,a5,512
     342:	40f71023          	sh	a5,1024(a4)

	return i2c_ret;
}
     346:	8082                	ret
     348:	137d                	addi	t1,t1,-1
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     34a:	f20313e3          	bnez	t1,270 <i2c_write.constprop.0+0x60>
     34e:	b7d1                	j	312 <i2c_write.constprop.0+0x102>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
     350:	0147d703          	lhu	a4,20(a5)
     354:	40077713          	andi	a4,a4,1024
     358:	cf09                	beqz	a4,372 <i2c_write.constprop.0+0x162>
     35a:	0147d703          	lhu	a4,20(a5)
     35e:	4509                	li	a0,2
     360:	0742                	slli	a4,a4,0x10
     362:	8341                	srli	a4,a4,0x10
     364:	bff77713          	andi	a4,a4,-1025
     368:	0742                	slli	a4,a4,0x10
     36a:	8341                	srli	a4,a4,0x10
     36c:	00e79a23          	sh	a4,20(a5)
     370:	b7c9                	j	332 <i2c_write.constprop.0+0x122>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
     372:	0147d703          	lhu	a4,20(a5)
     376:	20077713          	andi	a4,a4,512
     37a:	cf09                	beqz	a4,394 <i2c_write.constprop.0+0x184>
     37c:	0147d703          	lhu	a4,20(a5)
     380:	450d                	li	a0,3
     382:	0742                	slli	a4,a4,0x10
     384:	8341                	srli	a4,a4,0x10
     386:	dff77713          	andi	a4,a4,-513
     38a:	0742                	slli	a4,a4,0x10
     38c:	8341                	srli	a4,a4,0x10
     38e:	00e79a23          	sh	a4,20(a5)
     392:	b745                	j	332 <i2c_write.constprop.0+0x122>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     394:	0147d703          	lhu	a4,20(a5)
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     398:	4515                	li	a0,5
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     39a:	01471693          	slli	a3,a4,0x14
     39e:	f806dae3          	bgez	a3,332 <i2c_write.constprop.0+0x122>
     3a2:	0147d703          	lhu	a4,20(a5)
     3a6:	76fd                	lui	a3,0xfffff
     3a8:	7ff68693          	addi	a3,a3,2047 # fffff7ff <__global_pointer$+0xdfffefff>
     3ac:	0742                	slli	a4,a4,0x10
     3ae:	8341                	srli	a4,a4,0x10
     3b0:	8f75                	and	a4,a4,a3
     3b2:	00e79a23          	sh	a4,20(a5)
     3b6:	4511                	li	a0,4
     3b8:	bfad                	j	332 <i2c_write.constprop.0+0x122>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
     3ba:	0147d703          	lhu	a4,20(a5)
     3be:	40077713          	andi	a4,a4,1024
     3c2:	cf09                	beqz	a4,3dc <i2c_write.constprop.0+0x1cc>
     3c4:	0147d703          	lhu	a4,20(a5)
     3c8:	4509                	li	a0,2
     3ca:	0742                	slli	a4,a4,0x10
     3cc:	8341                	srli	a4,a4,0x10
     3ce:	bff77713          	andi	a4,a4,-1025
     3d2:	0742                	slli	a4,a4,0x10
     3d4:	8341                	srli	a4,a4,0x10
     3d6:	00e79a23          	sh	a4,20(a5)
     3da:	b739                	j	2e8 <i2c_write.constprop.0+0xd8>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
     3dc:	0147d703          	lhu	a4,20(a5)
     3e0:	20077713          	andi	a4,a4,512
     3e4:	cf09                	beqz	a4,3fe <i2c_write.constprop.0+0x1ee>
     3e6:	0147d703          	lhu	a4,20(a5)
     3ea:	450d                	li	a0,3
     3ec:	0742                	slli	a4,a4,0x10
     3ee:	8341                	srli	a4,a4,0x10
     3f0:	dff77713          	andi	a4,a4,-513
     3f4:	0742                	slli	a4,a4,0x10
     3f6:	8341                	srli	a4,a4,0x10
     3f8:	00e79a23          	sh	a4,20(a5)
     3fc:	b5f5                	j	2e8 <i2c_write.constprop.0+0xd8>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     3fe:	0147d703          	lhu	a4,20(a5)
     402:	0742                	slli	a4,a4,0x10
     404:	8341                	srli	a4,a4,0x10
     406:	8f69                	and	a4,a4,a0
     408:	cf09                	beqz	a4,422 <i2c_write.constprop.0+0x212>
     40a:	0147d703          	lhu	a4,20(a5)
     40e:	76fd                	lui	a3,0xfffff
     410:	7ff68693          	addi	a3,a3,2047 # fffff7ff <__global_pointer$+0xdfffefff>
     414:	0742                	slli	a4,a4,0x10
     416:	8341                	srli	a4,a4,0x10
     418:	8f75                	and	a4,a4,a3
     41a:	00e79a23          	sh	a4,20(a5)
     41e:	4511                	li	a0,4
     420:	b5e1                	j	2e8 <i2c_write.constprop.0+0xd8>
     422:	0685                	addi	a3,a3,1
		while(cbyte < len)
     424:	40b687b3          	sub	a5,a3,a1
     428:	0ff7f793          	andi	a5,a5,255
     42c:	e8c7e3e3          	bltu	a5,a2,2b2 <i2c_write.constprop.0+0xa2>
     430:	4501                	li	a0,0
     432:	bd5d                	j	2e8 <i2c_write.constprop.0+0xd8>

00000434 <start_blinking>:
		// printf("Button 2 pressed\n");
	}
}

void start_blinking(uint8_t long_count, uint8_t short_count){
	if((SysTick->CNT)- blink_start >= BLINK_SPACE_TIME){
     434:	e000f637          	lui	a2,0xe000f
     438:	a0818793          	addi	a5,gp,-1528 # 20000208 <blink_start>
     43c:	4398                	lw	a4,0(a5)
     43e:	4614                	lw	a3,8(a2)
     440:	8e99                	sub	a3,a3,a4
     442:	0016e737          	lui	a4,0x16e
     446:	35f70713          	addi	a4,a4,863 # 16e35f <lib_i2c.c.e7f16be4+0x16a001>
     44a:	02d77763          	bgeu	a4,a3,478 <start_blinking+0x44>
		target_long_blinks = long_count * 2;  
     44e:	0506                	slli	a0,a0,0x1
     450:	a0a18d23          	sb	a0,-1510(gp) # 2000021a <target_long_blinks>
		target_short_blinks = short_count * 2;  
     454:	0586                	slli	a1,a1,0x1
     456:	a0b18da3          	sb	a1,-1509(gp) # 2000021b <target_short_blinks>
		blink_start = (SysTick->CNT);
     45a:	4618                	lw	a4,8(a2)
     45c:	c398                	sw	a4,0(a5)
		is_blinking = true;
     45e:	4705                	li	a4,1
     460:	a0e189a3          	sb	a4,-1517(gp) # 20000213 <is_blinking>
		led_state = false;
     464:	a0018c23          	sb	zero,-1512(gp) # 20000218 <led_state>
		GPIOD->OUTDR &= ~(1<<6);
     468:	400117b7          	lui	a5,0x40011
     46c:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
     470:	fbf77713          	andi	a4,a4,-65
     474:	40e7a623          	sw	a4,1036(a5)
		// printf("Blink start, long %d, short %d", target_long_blinks, target_short_blinks);
	}
}
     478:	8082                	ret

0000047a <__disable_irq>:
}

// Disable Global Interrupt
RV_STATIC_INLINE void __disable_irq()
{
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
     47a:	300027f3          	csrr	a5,mstatus
	result &= ~0x88; __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
     47e:	f777f793          	andi	a5,a5,-137
     482:	30079073          	csrw	mstatus,a5
}
     486:	8082                	ret

00000488 <__enable_irq>:
	uint32_t result; __ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mstatus": "=r"(result) );
     488:	300027f3          	csrr	a5,mstatus
	result |= 0x88;  __ASM volatile( ADD_ARCH_ZICSR "csrw mstatus, %0" : : "r" (result) );
     48c:	0887e793          	ori	a5,a5,136
     490:	30079073          	csrw	mstatus,a5
}
     494:	8082                	ret

00000496 <mini_itoa.part.0>:
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
     496:	1101                	addi	sp,sp,-32
     498:	ce06                	sw	ra,28(sp)
     49a:	cc22                	sw	s0,24(sp)
     49c:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     49e:	c002                	sw	zero,0(sp)
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
     4a0:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     4a2:	00055763          	bgez	a0,4b0 <mini_itoa.part.0+0x1a>
     4a6:	e689                	bnez	a3,4b0 <mini_itoa.part.0+0x1a>
		negative = 1;
     4a8:	4785                	li	a5,1
		value = -value;
     4aa:	40a00333          	neg	t1,a0
		negative = 1;
     4ae:	c03e                	sw	a5,0(sp)
     4b0:	06100413          	li	s0,97
     4b4:	c219                	beqz	a2,4ba <mini_itoa.part.0+0x24>
     4b6:	04100413          	li	s0,65
	int	negative = 0;
     4ba:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     4bc:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     4be:	851a                	mv	a0,t1
     4c0:	c83a                	sw	a4,16(sp)
     4c2:	c21a                	sw	t1,4(sp)
     4c4:	c62e                	sw	a1,12(sp)
     4c6:	c41a                	sw	t1,8(sp)
     4c8:	3131                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     4ca:	47a5                	li	a5,9
     4cc:	4322                	lw	t1,8(sp)
     4ce:	45b2                	lw	a1,12(sp)
     4d0:	4742                	lw	a4,16(sp)
     4d2:	0ff57693          	andi	a3,a0,255
     4d6:	06a7e163          	bltu	a5,a0,538 <mini_itoa.part.0+0xa2>
     4da:	03068693          	addi	a3,a3,48
     4de:	0ff6f693          	andi	a3,a3,255
     4e2:	00148793          	addi	a5,s1,1
     4e6:	00d48023          	sb	a3,0(s1)
		value /= radix;
     4ea:	851a                	mv	a0,t1
     4ec:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     4ee:	c63e                	sw	a5,12(sp)
		value /= radix;
     4f0:	c42e                	sw	a1,8(sp)
     4f2:	3e5d                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
     4f4:	4692                	lw	a3,4(sp)
     4f6:	45a2                	lw	a1,8(sp)
     4f8:	47b2                	lw	a5,12(sp)
     4fa:	4742                	lw	a4,16(sp)
		value /= radix;
     4fc:	832a                	mv	t1,a0
	} while (value > 0);
     4fe:	02b6fb63          	bgeu	a3,a1,534 <mini_itoa.part.0+0x9e>
	if (negative)
     502:	4682                	lw	a3,0(sp)
     504:	c699                	beqz	a3,512 <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     506:	02d00693          	li	a3,45
     50a:	00d78023          	sb	a3,0(a5)
     50e:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     512:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     516:	01f55693          	srli	a3,a0,0x1f
     51a:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     51c:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     520:	8685                	srai	a3,a3,0x1
     522:	4601                	li	a2,0
     524:	17fd                	addi	a5,a5,-1
     526:	00d64b63          	blt	a2,a3,53c <mini_itoa.part.0+0xa6>
}
     52a:	40f2                	lw	ra,28(sp)
     52c:	4462                	lw	s0,24(sp)
     52e:	44d2                	lw	s1,20(sp)
     530:	6105                	addi	sp,sp,32
     532:	8082                	ret
	} while (value > 0);
     534:	84be                	mv	s1,a5
     536:	b761                	j	4be <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     538:	96a2                	add	a3,a3,s0
     53a:	b755                	j	4de <mini_itoa.part.0+0x48>
		char j = buffer[i];
     53c:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     540:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     544:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     548:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     54a:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     54e:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     552:	bfc9                	j	524 <mini_itoa.part.0+0x8e>

00000554 <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
     554:	e000f7b7          	lui	a5,0xe000f
     558:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     55a:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     55e:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     560:	471c                	lw	a5,8(a4)
     562:	8f89                	sub	a5,a5,a0
     564:	fe07cee3          	bltz	a5,560 <DelaySysTick+0xc>
	uint32_t targend = SysTick->CNTL + n;
	while( ((int32_t)( SysTick->CNTL - targend )) < 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     568:	8082                	ret

0000056a <PrintN>:
	while( (*DMDATA0) & 0x80 );
     56a:	e0000737          	lui	a4,0xe0000
     56e:	0f472783          	lw	a5,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
     572:	0807f793          	andi	a5,a5,128
     576:	ffe5                	bnez	a5,56e <PrintN+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     578:	783027b7          	lui	a5,0x78302
     57c:	08878793          	addi	a5,a5,136 # 78302088 <__global_pointer$+0x58301888>
     580:	0ef72a23          	sw	a5,244(a4)
		while( (*DMDATA0) & 0x80 );
     584:	e0000637          	lui	a2,0xe0000
	for( shift = 28; shift >= 0; shift -= 4 )
     588:	4771                	li	a4,28
		s += ( s < 10 ) ? '0' : ('a' - 10);
     58a:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     58c:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     58e:	0f462783          	lw	a5,244(a2) # e00000f4 <__global_pointer$+0xbffff8f4>
     592:	0807f793          	andi	a5,a5,128
     596:	ffe5                	bnez	a5,58e <PrintN+0x24>
		int s = (n>>shift) & 0xf;
     598:	00e557b3          	srl	a5,a0,a4
     59c:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     5a0:	03000793          	li	a5,48
     5a4:	00d35463          	bge	t1,a3,5ac <PrintN+0x42>
     5a8:	05700793          	li	a5,87
     5ac:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     5ae:	07a2                	slli	a5,a5,0x8
     5b0:	0857e793          	ori	a5,a5,133
     5b4:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     5b8:	1771                	addi	a4,a4,-4
     5ba:	fcb71ae3          	bne	a4,a1,58e <PrintN+0x24>
}
     5be:	8082                	ret

000005c0 <mini_pad>:
	int overflow = 0;
     5c0:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     5c2:	c2ad                	beqz	a3,624 <mini_pad+0x64>
	if(len > pad_to) {
     5c4:	00b6d463          	bge	a3,a1,5cc <mini_pad+0xc>
     5c8:	85b6                	mv	a1,a3
		overflow = 1;
     5ca:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     5cc:	8e8d                	sub	a3,a3,a1
     5ce:	87ba                	mv	a5,a4
     5d0:	00d703b3          	add	t2,a4,a3
     5d4:	40f382b3          	sub	t0,t2,a5
     5d8:	04504863          	bgtz	t0,628 <mini_pad+0x68>
     5dc:	0006d363          	bgez	a3,5e2 <mini_pad+0x22>
     5e0:	4681                	li	a3,0
     5e2:	96ba                	add	a3,a3,a4
     5e4:	4781                	li	a5,0
	for(i = len; i > 0; i --) {
     5e6:	40f58633          	sub	a2,a1,a5
     5ea:	04c04363          	bgtz	a2,630 <mini_pad+0x70>
     5ee:	0005d363          	bgez	a1,5f4 <mini_pad+0x34>
     5f2:	4581                	li	a1,0
     5f4:	95b6                	add	a1,a1,a3
	len = pbuffer - buffer;
     5f6:	40e58533          	sub	a0,a1,a4
	if(overflow) {
     5fa:	02030463          	beqz	t1,622 <mini_pad+0x62>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     5fe:	02b77263          	bgeu	a4,a1,622 <mini_pad+0x62>
			*(pbuffer-- - 1) = '*';
     602:	02a00793          	li	a5,42
     606:	fef58fa3          	sb	a5,-1(a1)
     60a:	fff58693          	addi	a3,a1,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     60e:	00d77a63          	bgeu	a4,a3,622 <mini_pad+0x62>
			*(pbuffer-- - 1) = '*';
     612:	fef58f23          	sb	a5,-2(a1)
     616:	ffe58693          	addi	a3,a1,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     61a:	00d77463          	bgeu	a4,a3,622 <mini_pad+0x62>
			*(pbuffer-- - 1) = '*';
     61e:	fef58ea3          	sb	a5,-3(a1)
}
     622:	8082                	ret
	if(pad_to == 0) pad_to = len;
     624:	86ae                	mv	a3,a1
     626:	b75d                	j	5cc <mini_pad+0xc>
		*(pbuffer++) = pad_char;
     628:	0785                	addi	a5,a5,1
     62a:	fec78fa3          	sb	a2,-1(a5)
	for(i = pad_to - len; i > 0; i --) {
     62e:	b75d                	j	5d4 <mini_pad+0x14>
		*(pbuffer++) = *(ptr++);
     630:	00f50633          	add	a2,a0,a5
     634:	00064283          	lbu	t0,0(a2)
     638:	00f68633          	add	a2,a3,a5
     63c:	0785                	addi	a5,a5,1
     63e:	00560023          	sb	t0,0(a2)
	for(i = len; i > 0; i --) {
     642:	b755                	j	5e6 <mini_pad+0x26>

00000644 <__puts_uart>:
{
     644:	1151                	addi	sp,sp,-12
     646:	c222                	sw	s0,4(sp)
     648:	c406                	sw	ra,8(sp)
     64a:	842e                	mv	s0,a1
	_write( 0, s, len );
     64c:	3cf1                	jal	128 <_write.constprop.0>
}
     64e:	40a2                	lw	ra,8(sp)
     650:	8522                	mv	a0,s0
     652:	4412                	lw	s0,4(sp)
     654:	0131                	addi	sp,sp,12
     656:	8082                	ret

00000658 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
     658:	400227b7          	lui	a5,0x40022
     65c:	4705                	li	a4,1
     65e:	c398                	sw	a4,0(a5)
#if defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
     660:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     664:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
     668:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     66c:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.e7f16be4+0x107bd23>
     670:	c398                	sw	a4,0(a5)
	#else
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
     672:	009f0737          	lui	a4,0x9f0
     676:	c798                	sw	a4,8(a5)

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
     678:	40021737          	lui	a4,0x40021
     67c:	431c                	lw	a5,0(a4)
     67e:	00679693          	slli	a3,a5,0x6
     682:	fe06dde3          	bgez	a3,67c <SystemInit+0x24>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     686:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     688:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     68c:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
     68e:	0027e793          	ori	a5,a5,2
     692:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     694:	4721                	li	a4,8
     696:	42dc                	lw	a5,4(a3)
     698:	8bb1                	andi	a5,a5,12
     69a:	fee79ee3          	bne	a5,a4,696 <SystemInit+0x3e>
	*DMDATA1 = 0x00;
     69e:	e00007b7          	lui	a5,0xe0000
     6a2:	0e07ac23          	sw	zero,248(a5) # e00000f8 <__global_pointer$+0xbffff8f8>
	*DMDATA0 = 0x80;
     6a6:	08000713          	li	a4,128
     6aa:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     6ae:	8082                	ret

000006b0 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     6b0:	34102573          	csrr	a0,mepc
	PrintN( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     6b4:	3d5d                	jal	56a <PrintN>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     6b6:	30002573          	csrr	a0,mstatus
	PrintN( __get_MSTATUS() );
     6ba:	3d45                	jal	56a <PrintN>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     6bc:	34302573          	csrr	a0,mtval
	PrintN( __get_MTVAL() );
     6c0:	356d                	jal	56a <PrintN>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     6c2:	34202573          	csrr	a0,mcause
	PrintN( __get_MCAUSE() );
     6c6:	3555                	jal	56a <PrintN>
	while( (*DMDATA0) & 0x80 );
     6c8:	e0000737          	lui	a4,0xe0000
     6cc:	0f472783          	lw	a5,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
     6d0:	0807f793          	andi	a5,a5,128
     6d4:	ffe5                	bnez	a5,6cc <ADC1_2_IRQHandler+0x1c>
	*DMDATA0 = 0x0a85;
     6d6:	6785                	lui	a5,0x1
     6d8:	a8578793          	addi	a5,a5,-1403 # a85 <main+0xc3>
     6dc:	0ef72a23          	sw	a5,244(a4)
	while( (*DMDATA0) & 0x80 );
     6e0:	e0000737          	lui	a4,0xe0000
     6e4:	0f472783          	lw	a5,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
     6e8:	0807f793          	andi	a5,a5,128
     6ec:	ffe5                	bnez	a5,6e4 <ADC1_2_IRQHandler+0x34>
	*DMDATA0 = 0xaaaaaa83;
     6ee:	aaaab7b7          	lui	a5,0xaaaab
     6f2:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <__global_pointer$+0x8aaaa283>
     6f6:	0ef72a23          	sw	a5,244(a4)
	asm volatile( "1: j 1b" );
     6fa:	a001                	j	6fa <ADC1_2_IRQHandler+0x4a>

000006fc <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     6fc:	40021737          	lui	a4,0x40021
     700:	471c                	lw	a5,8(a4)
     702:	008006b7          	lui	a3,0x800
     706:	8fd5                	or	a5,a5,a3
     708:	c71c                	sw	a5,8(a4)

0000070a <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     70a:	962a                	add	a2,a2,a0
     70c:	87aa                	mv	a5,a0
     70e:	00c79363          	bne	a5,a2,714 <memset+0xa>
     712:	8082                	ret
     714:	00b78023          	sb	a1,0(a5)
     718:	0785                	addi	a5,a5,1
     71a:	bfd5                	j	70e <memset+0x4>

0000071c <strlen>:
{
     71c:	87aa                	mv	a5,a0
	for (; *s; s++);
     71e:	0007c703          	lbu	a4,0(a5)
     722:	e701                	bnez	a4,72a <strlen+0xe>
}
     724:	40a78533          	sub	a0,a5,a0
     728:	8082                	ret
	for (; *s; s++);
     72a:	0785                	addi	a5,a5,1
     72c:	bfcd                	j	71e <strlen+0x2>

0000072e <mini_vpprintf>:
{
     72e:	fa410113          	addi	sp,sp,-92
     732:	c8a6                	sw	s1,80(sp)
     734:	cc86                	sw	ra,88(sp)
     736:	caa2                	sw	s0,84(sp)
     738:	c02a                	sw	a0,0(sp)
     73a:	c22e                	sw	a1,4(sp)
     73c:	84b2                	mv	s1,a2
     73e:	87b6                	mv	a5,a3
	int n = 0;
     740:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     742:	0004c703          	lbu	a4,0(s1)
     746:	00148413          	addi	s0,s1,1
     74a:	00e10fa3          	sb	a4,31(sp)
     74e:	eb01                	bnez	a4,75e <mini_vpprintf+0x30>
}
     750:	40e6                	lw	ra,88(sp)
     752:	4456                	lw	s0,84(sp)
     754:	4542                	lw	a0,16(sp)
     756:	44c6                	lw	s1,80(sp)
     758:	05c10113          	addi	sp,sp,92
     75c:	8082                	ret
		if (ch!='%') {
     75e:	02500693          	li	a3,37
     762:	00d70f63          	beq	a4,a3,780 <mini_vpprintf+0x52>
     766:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     768:	4612                	lw	a2,4(sp)
     76a:	4782                	lw	a5,0(sp)
     76c:	4585                	li	a1,1
     76e:	01f10513          	addi	a0,sp,31
     772:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     774:	84a2                	mv	s1,s0
		n = n + len;
     776:	47c2                	lw	a5,16(sp)
     778:	97aa                	add	a5,a5,a0
     77a:	c83e                	sw	a5,16(sp)
     77c:	47a2                	lw	a5,8(sp)
     77e:	b7d1                	j	742 <mini_vpprintf+0x14>
			ch=*(fmt++);
     780:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     784:	03000613          	li	a2,48
			ch=*(fmt++);
     788:	00248713          	addi	a4,s1,2
     78c:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     790:	03000413          	li	s0,48
     794:	08c69063          	bne	a3,a2,814 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     798:	84ba                	mv	s1,a4
     79a:	4601                	li	a2,0
     79c:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     79e:	4525                	li	a0,9
     7a0:	a811                	j	7b4 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     7a2:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     7a6:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     7a8:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     7aa:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     7ae:	0706                	slli	a4,a4,0x1
     7b0:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     7b2:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     7b4:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.e7f16be4+0x7fbc72>
     7b8:	0ff5f313          	andi	t1,a1,255
     7bc:	fe6573e3          	bgeu	a0,t1,7a2 <mini_vpprintf+0x74>
     7c0:	c219                	beqz	a2,7c6 <mini_vpprintf+0x98>
     7c2:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     7c6:	c63a                	sw	a4,12(sp)
     7c8:	4661                	li	a2,24
     7ca:	00e65363          	bge	a2,a4,7d0 <mini_vpprintf+0xa2>
     7ce:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     7d0:	06c00593          	li	a1,108
			char l = 0;
     7d4:	4601                	li	a2,0
			if (ch == 'l') {
     7d6:	00b69863          	bne	a3,a1,7e6 <mini_vpprintf+0xb8>
				ch=*(fmt++);
     7da:	0004c683          	lbu	a3,0(s1)
				l = 1;
     7de:	4605                	li	a2,1
				ch=*(fmt++);
     7e0:	0485                	addi	s1,s1,1
     7e2:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     7e6:	01f14683          	lbu	a3,31(sp)
     7ea:	06400593          	li	a1,100
     7ee:	06b68363          	beq	a3,a1,854 <mini_vpprintf+0x126>
     7f2:	02d5e463          	bltu	a1,a3,81a <mini_vpprintf+0xec>
     7f6:	05800713          	li	a4,88
     7fa:	0ae68063          	beq	a3,a4,89a <mini_vpprintf+0x16c>
     7fe:	06300713          	li	a4,99
     802:	0ae68d63          	beq	a3,a4,8bc <mini_vpprintf+0x18e>
     806:	d6a9                	beqz	a3,750 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     808:	4612                	lw	a2,4(sp)
     80a:	c43e                	sw	a5,8(sp)
     80c:	4585                	li	a1,1
     80e:	01f10513          	addi	a0,sp,31
     812:	a0bd                	j	880 <mini_vpprintf+0x152>
			char pad_char = ' ';
     814:	02000413          	li	s0,32
     818:	b741                	j	798 <mini_vpprintf+0x6a>
			switch (ch) {
     81a:	07500593          	li	a1,117
     81e:	02b68b63          	beq	a3,a1,854 <mini_vpprintf+0x126>
     822:	07800613          	li	a2,120
     826:	06c68a63          	beq	a3,a2,89a <mini_vpprintf+0x16c>
     82a:	07300613          	li	a2,115
     82e:	fcc69de3          	bne	a3,a2,808 <mini_vpprintf+0xda>
     832:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     834:	00478713          	addi	a4,a5,4
     838:	439c                	lw	a5,0(a5)
     83a:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     83c:	853e                	mv	a0,a5
     83e:	ca3e                	sw	a5,20(sp)
     840:	3df1                	jal	71c <strlen>
					if (pad_to > 0) {
     842:	4762                	lw	a4,24(sp)
     844:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     846:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     848:	c759                	beqz	a4,8d6 <mini_vpprintf+0x1a8>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     84a:	46b2                	lw	a3,12(sp)
     84c:	1838                	addi	a4,sp,56
     84e:	8622                	mv	a2,s0
     850:	853e                	mv	a0,a5
     852:	a01d                	j	878 <mini_vpprintf+0x14a>
					if(l) {
     854:	00478713          	addi	a4,a5,4
     858:	c43a                	sw	a4,8(sp)
     85a:	c615                	beqz	a2,886 <mini_vpprintf+0x158>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     85c:	f8b68693          	addi	a3,a3,-117
     860:	1018                	addi	a4,sp,32
     862:	0016b693          	seqz	a3,a3
     866:	4388                	lw	a0,0(a5)
     868:	4601                	li	a2,0
     86a:	45a9                	li	a1,10
     86c:	312d                	jal	496 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     86e:	46b2                	lw	a3,12(sp)
     870:	1838                	addi	a4,sp,56
     872:	8622                	mv	a2,s0
     874:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     876:	1008                	addi	a0,sp,32
     878:	33a1                	jal	5c0 <mini_pad>
					len = puts(bf, len, buf);
     87a:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     87c:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     87e:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     880:	4782                	lw	a5,0(sp)
     882:	9782                	jalr	a5
					break;
     884:	bdcd                	j	776 <mini_vpprintf+0x48>
						if(ch == 'u') {
     886:	07500713          	li	a4,117
     88a:	00e69563          	bne	a3,a4,894 <mini_vpprintf+0x166>
	if (radix > 16)
     88e:	1018                	addi	a4,sp,32
     890:	4685                	li	a3,1
     892:	bfd1                	j	866 <mini_vpprintf+0x138>
     894:	1018                	addi	a4,sp,32
     896:	4681                	li	a3,0
     898:	b7f9                	j	866 <mini_vpprintf+0x138>
					if(l) {
     89a:	4388                	lw	a0,0(a5)
     89c:	00478713          	addi	a4,a5,4
     8a0:	fa868613          	addi	a2,a3,-88
     8a4:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     8a6:	4685                	li	a3,1
     8a8:	1018                	addi	a4,sp,32
     8aa:	00163613          	seqz	a2,a2
     8ae:	45c1                	li	a1,16
     8b0:	36dd                	jal	496 <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     8b2:	46b2                	lw	a3,12(sp)
     8b4:	85aa                	mv	a1,a0
     8b6:	1838                	addi	a4,sp,56
     8b8:	8622                	mv	a2,s0
     8ba:	bf75                	j	876 <mini_vpprintf+0x148>
					ch = (char)(va_arg(va, int));
     8bc:	00478713          	addi	a4,a5,4
     8c0:	439c                	lw	a5,0(a5)
     8c2:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     8c4:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     8c6:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     8ca:	1838                	addi	a4,sp,56
     8cc:	8622                	mv	a2,s0
     8ce:	4585                	li	a1,1
     8d0:	01f10513          	addi	a0,sp,31
     8d4:	b755                	j	878 <mini_vpprintf+0x14a>
						len = puts(ptr, len, buf);
     8d6:	4612                	lw	a2,4(sp)
     8d8:	853e                	mv	a0,a5
     8da:	b75d                	j	880 <mini_vpprintf+0x152>

000008dc <puts>:
{
     8dc:	1151                	addi	sp,sp,-12
     8de:	c406                	sw	ra,8(sp)
     8e0:	c222                	sw	s0,4(sp)
     8e2:	c026                	sw	s1,0(sp)
     8e4:	84aa                	mv	s1,a0
	int sl = strlen( s );
     8e6:	3d1d                	jal	71c <strlen>
     8e8:	842a                	mv	s0,a0
	_write(0, s, sl );
     8ea:	85aa                	mv	a1,a0
     8ec:	8526                	mv	a0,s1
     8ee:	83bff0ef          	jal	ra,128 <_write.constprop.0>
	_write(0, "\n", 1 );
     8f2:	6505                	lui	a0,0x1
     8f4:	4585                	li	a1,1
     8f6:	1c050513          	addi	a0,a0,448 # 11c0 <handle_reset+0x7a>
     8fa:	82fff0ef          	jal	ra,128 <_write.constprop.0>
}
     8fe:	40a2                	lw	ra,8(sp)
     900:	00140513          	addi	a0,s0,1
     904:	4412                	lw	s0,4(sp)
     906:	4482                	lw	s1,0(sp)
     908:	0131                	addi	sp,sp,12
     90a:	8082                	ret

0000090c <read_bank_into_ntag>:
	GPIOD->OUTDR &= ~(1<<6);
     90c:	400117b7          	lui	a5,0x40011
     910:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
int read_bank_into_ntag(int bank) {
     914:	1151                	addi	sp,sp,-12
     916:	c222                	sw	s0,4(sp)
	GPIOD->OUTDR &= ~(1<<6);
     918:	fbf77713          	andi	a4,a4,-65
int read_bank_into_ntag(int bank) {
     91c:	c406                	sw	ra,8(sp)
     91e:	c026                	sw	s1,0(sp)
	GPIOD->OUTDR &= ~(1<<6);
     920:	40e7a623          	sw	a4,1036(a5)
		uint32_t *ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (i<<4));
     924:	00251713          	slli	a4,a0,0x2
     928:	6505                	lui	a0,0x1
     92a:	2d050513          	addi	a0,a0,720 # 12d0 <bank_addrs>
     92e:	953a                	add	a0,a0,a4
     930:	4100                	lw	s0,0(a0)
	for(int i=0; i<55; i++) {
     932:	4781                	li	a5,0
		uint32_t *ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (i<<4));
     934:	00479593          	slli	a1,a5,0x4
		i2c_err_t i2c_stat = i2c_write(NTAG_ADDR, (i+1), (uint8_t*) ptr, 16);
     938:	00178493          	addi	s1,a5,1
     93c:	4641                	li	a2,16
     93e:	95a2                	add	a1,a1,s0
     940:	0ff4f513          	andi	a0,s1,255
     944:	30f1                	jal	210 <i2c_write.constprop.0>
		if(i2c_stat != I2C_OK) 
     946:	c509                	beqz	a0,950 <read_bank_into_ntag+0x44>
			printf("Error Using the I2C Bus\n");
     948:	6505                	lui	a0,0x1
     94a:	1c450513          	addi	a0,a0,452 # 11c4 <handle_reset+0x7e>
     94e:	3779                	jal	8dc <puts>
		Delay_Us(160);
     950:	6509                	lui	a0,0x2
     952:	e0050513          	addi	a0,a0,-512 # 1e00 <ch32fun.c.60bab88f+0x6c3>
     956:	3efd                	jal	554 <DelaySysTick>
	for(int i=0; i<55; i++) {
     958:	03700713          	li	a4,55
     95c:	87a6                	mv	a5,s1
     95e:	fce49be3          	bne	s1,a4,934 <read_bank_into_ntag+0x28>
	i2c_err_t i2c_stat = i2c_write(NTAG_ADDR, (56), (uint8_t*) ptr, 8);
     962:	4621                	li	a2,8
     964:	38040593          	addi	a1,s0,896
     968:	03800513          	li	a0,56
     96c:	3055                	jal	210 <i2c_write.constprop.0>
	if(i2c_stat != I2C_OK) 
     96e:	c509                	beqz	a0,978 <read_bank_into_ntag+0x6c>
		printf("Error Using the I2C Bus\n");
     970:	6505                	lui	a0,0x1
     972:	1c450513          	addi	a0,a0,452 # 11c4 <handle_reset+0x7e>
     976:	379d                	jal	8dc <puts>
	Delay_Us(160);
     978:	6509                	lui	a0,0x2
     97a:	e0050513          	addi	a0,a0,-512 # 1e00 <ch32fun.c.60bab88f+0x6c3>
     97e:	3ed9                	jal	554 <DelaySysTick>
	GPIOD->OUTDR |= (1<<6);
     980:	400117b7          	lui	a5,0x40011
     984:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
}
     988:	40a2                	lw	ra,8(sp)
     98a:	4412                	lw	s0,4(sp)
	GPIOD->OUTDR |= (1<<6);
     98c:	04076713          	ori	a4,a4,64
     990:	40e7a623          	sw	a4,1036(a5)
}
     994:	4482                	lw	s1,0(sp)
     996:	4501                	li	a0,0
     998:	0131                	addi	sp,sp,12
     99a:	8082                	ret

0000099c <printf>:
{
     99c:	fdc10113          	addi	sp,sp,-36
     9a0:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     9a2:	862a                	mv	a2,a0
{
     9a4:	c82e                	sw	a1,16(sp)
     9a6:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     9a8:	4581                	li	a1,0
	va_start( args, format );
     9aa:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     9ac:	64400513          	li	a0,1604
{
     9b0:	c606                	sw	ra,12(sp)
     9b2:	ce3a                	sw	a4,28(sp)
     9b4:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     9b6:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     9b8:	3b9d                	jal	72e <mini_vpprintf>
}
     9ba:	40b2                	lw	ra,12(sp)
     9bc:	02410113          	addi	sp,sp,36
     9c0:	8082                	ret

000009c2 <main>:
{
     9c2:	711d                	addi	sp,sp,-96
     9c4:	ce86                	sw	ra,92(sp)
     9c6:	cca2                	sw	s0,88(sp)
     9c8:	caa6                	sw	s1,84(sp)
	SystemInit();
     9ca:	3179                	jal	658 <SystemInit>
	RCC->CFGR0 |= (12<<4); //slowdown for lower power
     9cc:	40021737          	lui	a4,0x40021
     9d0:	435c                	lw	a5,4(a4)
	GPIOD->CFGLR &= ~(0xf<<(4*6));
     9d2:	f1000637          	lui	a2,0xf1000
     9d6:	167d                	addi	a2,a2,-1
	RCC->CFGR0 |= (12<<4); //slowdown for lower power
     9d8:	0c07e793          	ori	a5,a5,192
     9dc:	c35c                	sw	a5,4(a4)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_ADC1;
     9de:	4f1c                	lw	a5,24(a4)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
     9e0:	00200537          	lui	a0,0x200
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     9e4:	ffe005b7          	lui	a1,0xffe00
     9e8:	2207e793          	ori	a5,a5,544
     9ec:	cf1c                	sw	a5,24(a4)
	GPIOD->CFGLR &= ~(0xf<<(4*6));
     9ee:	400117b7          	lui	a5,0x40011
     9f2:	4007a683          	lw	a3,1024(a5) # 40011400 <__global_pointer$+0x20010c00>
     9f6:	15fd                	addi	a1,a1,-1
     9f8:	8ef1                	and	a3,a3,a2
     9fa:	40d7a023          	sw	a3,1024(a5)
	GPIOD->CFGLR |= ((GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*6));
     9fe:	4007a683          	lw	a3,1024(a5)
     a02:	01000637          	lui	a2,0x1000
     a06:	8ed1                	or	a3,a3,a2
     a08:	40d7a023          	sw	a3,1024(a5)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
     a0c:	4b10                	lw	a2,16(a4)
     a0e:	8e49                	or	a2,a2,a0
     a10:	cb10                	sw	a2,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     a12:	4b10                	lw	a2,16(a4)
     a14:	8e6d                	and	a2,a2,a1
     a16:	cb10                	sw	a2,16(a4)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     a18:	4f54                	lw	a3,28(a4)
	AFIO->PCFR1 &= ~(0x04400002);
     a1a:	fbc00637          	lui	a2,0xfbc00
     a1e:	1675                	addi	a2,a2,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     a20:	8ec9                	or	a3,a3,a0
     a22:	cf54                	sw	a3,28(a4)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
     a24:	4f14                	lw	a3,24(a4)
     a26:	0116e693          	ori	a3,a3,17
     a2a:	cf14                	sw	a3,24(a4)
	AFIO->PCFR1 &= ~(0x04400002);
     a2c:	40010737          	lui	a4,0x40010
     a30:	4354                	lw	a3,4(a4)
     a32:	8ef1                	and	a3,a3,a2
     a34:	c354                	sw	a3,4(a4)
	AFIO->PCFR1 |= I2C_AFIO_REG;
     a36:	4354                	lw	a3,4(a4)
     a38:	c354                	sw	a3,4(a4)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
     a3a:	4398                	lw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
     a3c:	76fd                	lui	a3,0xfffff
     a3e:	0ff68693          	addi	a3,a3,255 # fffff0ff <__global_pointer$+0xdfffe8ff>
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
     a42:	f0f77713          	andi	a4,a4,-241
     a46:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
     a48:	4398                	lw	a4,0(a5)
     a4a:	0d076713          	ori	a4,a4,208
     a4e:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
     a50:	4398                	lw	a4,0(a5)
     a52:	8f75                	and	a4,a4,a3
     a54:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
     a56:	4398                	lw	a4,0(a5)
     a58:	6685                	lui	a3,0x1
     a5a:	d0068693          	addi	a3,a3,-768 # d00 <main+0x33e>
     a5e:	8f55                	or	a4,a4,a3
     a60:	c398                	sw	a4,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
     a62:	400056b7          	lui	a3,0x40005
     a66:	4046d783          	lhu	a5,1028(a3) # 40005404 <__global_pointer$+0x20004c04>
     a6a:	07c2                	slli	a5,a5,0x10
     a6c:	83c1                	srli	a5,a5,0x10
     a6e:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
     a72:	0307e793          	ori	a5,a5,48
	I2C1->CTLR2 = i2c_conf;
     a76:	40f69223          	sh	a5,1028(a3)
	I2C1->CKCFGR = i2c_conf;
     a7a:	77e1                	lui	a5,0xffff8
     a7c:	02878793          	addi	a5,a5,40 # ffff8028 <__global_pointer$+0xdfff7828>
     a80:	40f69e23          	sh	a5,1052(a3)
	I2C1->CTLR1 |= I2C_CTLR1_PE;
     a84:	4006d783          	lhu	a5,1024(a3)
     a88:	07c2                	slli	a5,a5,0x10
     a8a:	83c1                	srli	a5,a5,0x10
     a8c:	0017e793          	ori	a5,a5,1
     a90:	40f69023          	sh	a5,1024(a3)
	if(I2C1->STAR1 & I2C_STAR1_BERR) 
     a94:	4146d783          	lhu	a5,1044(a3)
     a98:	1007f793          	andi	a5,a5,256
     a9c:	cf99                	beqz	a5,aba <main+0xf8>
		I2C1->STAR1 &= ~(I2C_STAR1_BERR); 
     a9e:	4146d783          	lhu	a5,1044(a3)
	if(i2c_init(I2C_CLK_400KHZ) != I2C_OK) printf("Failed to init the I2C Bus\n");
     aa2:	6505                	lui	a0,0x1
     aa4:	1dc50513          	addi	a0,a0,476 # 11dc <handle_reset+0x96>
     aa8:	07c2                	slli	a5,a5,0x10
     aaa:	83c1                	srli	a5,a5,0x10
     aac:	eff7f793          	andi	a5,a5,-257
     ab0:	07c2                	slli	a5,a5,0x10
     ab2:	83c1                	srli	a5,a5,0x10
     ab4:	40f69a23          	sh	a5,1044(a3)
     ab8:	3515                	jal	8dc <puts>
	Delay_Ms(100);
     aba:	00494537          	lui	a0,0x494
     abe:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.e7f16be4+0x48faa2>
     ac2:	3c49                	jal	554 <DelaySysTick>
	GPIOD->OUTDR = 1<<6;
     ac4:	400117b7          	lui	a5,0x40011
     ac8:	04000713          	li	a4,64
     acc:	40e7a623          	sw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>

static void InitTouchADC( );
void InitTouchADC( )
{
	// ADCCLK = 24 MHz => RCC_ADCPRE = 0: divide sys clock by 2
	RCC->CFGR0 &= ~(0x1F<<11);
     ad0:	400216b7          	lui	a3,0x40021
     ad4:	42dc                	lw	a5,4(a3)
     ad6:	7741                	lui	a4,0xffff0
     ad8:	7ff70713          	addi	a4,a4,2047 # ffff07ff <__global_pointer$+0xdffeffff>
     adc:	8ff9                	and	a5,a5,a4
     ade:	c2dc                	sw	a5,4(a3)

	// Set up single conversion on chl 2
	ADC1->RSQR1 = 0;
     ae0:	400127b7          	lui	a5,0x40012
     ae4:	4207a623          	sw	zero,1068(a5) # 4001242c <__global_pointer$+0x20011c2c>
	ADC1->RSQR2 = 0;
     ae8:	4207a823          	sw	zero,1072(a5)

	// turn on ADC and set rule group to sw trig
	ADC1->CTLR2 |= ADC_ADON | ADC_EXTSEL;
     aec:	4087a703          	lw	a4,1032(a5)
     af0:	000e06b7          	lui	a3,0xe0
     af4:	0685                	addi	a3,a3,1
     af6:	8f55                	or	a4,a4,a3
     af8:	40e7a423          	sw	a4,1032(a5)
	
	// Reset calibration
	ADC1->CTLR2 |= ADC_RSTCAL;
     afc:	4087a703          	lw	a4,1032(a5)
	while(ADC1->CTLR2 & ADC_RSTCAL);
     b00:	400126b7          	lui	a3,0x40012
	ADC1->CTLR2 |= ADC_RSTCAL;
     b04:	00876713          	ori	a4,a4,8
     b08:	40e7a423          	sw	a4,1032(a5)
	while(ADC1->CTLR2 & ADC_RSTCAL);
     b0c:	4086a703          	lw	a4,1032(a3) # 40012408 <__global_pointer$+0x20011c08>
     b10:	8b21                	andi	a4,a4,8
     b12:	ff6d                	bnez	a4,b0c <main+0x14a>
	
	// Calibrate
	ADC1->CTLR2 |= ADC_CAL;
     b14:	4086a703          	lw	a4,1032(a3)
     b18:	00476713          	ori	a4,a4,4
     b1c:	40e6a423          	sw	a4,1032(a3)
	while(ADC1->CTLR2 & ADC_CAL);
     b20:	40012737          	lui	a4,0x40012
     b24:	40872783          	lw	a5,1032(a4) # 40012408 <__global_pointer$+0x20011c08>
     b28:	8b91                	andi	a5,a5,4
     b2a:	ffed                	bnez	a5,b24 <main+0x162>
	mode = 0;
     b2c:	a0018ca3          	sb	zero,-1511(gp) # 20000219 <mode>
     b30:	a1918413          	addi	s0,gp,-1511 # 20000219 <mode>
		uint32_t current_time = (SysTick->CNT);
     b34:	e000f6b7          	lui	a3,0xe000f
		if (current_time - last_interaction > TIMEOUT) {
     b38:	a141a783          	lw	a5,-1516(gp) # 20000214 <last_interaction>
		uint32_t current_time = (SysTick->CNT);
     b3c:	4698                	lw	a4,8(a3)
		if (current_time - last_interaction > TIMEOUT) {
     b3e:	8f1d                	sub	a4,a4,a5
     b40:	02aea7b7          	lui	a5,0x2aea
     b44:	54078793          	addi	a5,a5,1344 # 2aea540 <lib_i2c.c.e7f16be4+0x2ae61e2>
     b48:	00e7fa63          	bgeu	a5,a4,b5c <main+0x19a>
			mode = 0;
     b4c:	00040023          	sb	zero,0(s0)
			count = 0;
     b50:	a0018923          	sb	zero,-1518(gp) # 20000212 <count>
			last_interaction = (SysTick->CNT);
     b54:	469c                	lw	a5,8(a3)
     b56:	a1418713          	addi	a4,gp,-1516 # 20000214 <last_interaction>
     b5a:	c31c                	sw	a5,0(a4)
		uint32_t touchval1 = ReadTouchPin( GPIOD, 5, 5, 3);
     b5c:	4595                	li	a1,5
     b5e:	4515                	li	a0,5
     b60:	1ffff097          	auipc	ra,0x1ffff
     b64:	4a0080e7          	jalr	1184(ra) # 20000000 <ReadTouchPin.constprop.0>
     b68:	84aa                	mv	s1,a0
		uint32_t touchval2 = ReadTouchPin( GPIOD, 4, 7, 3);
     b6a:	459d                	li	a1,7
     b6c:	4511                	li	a0,4
     b6e:	1ffff097          	auipc	ra,0x1ffff
     b72:	492080e7          	jalr	1170(ra) # 20000000 <ReadTouchPin.constprop.0>
     b76:	c02a                	sw	a0,0(sp)
		bool button2 = touchval2 > TOUCH_THRESH;
     b78:	03353713          	sltiu	a4,a0,51
		printf("Button 1 %d %d, button 2 %d %d\n", touchval1, button1, touchval2, button2);
     b7c:	86aa                	mv	a3,a0
		bool button1 = touchval1 > TOUCH_THRESH;
     b7e:	0334b613          	sltiu	a2,s1,51
		printf("Button 1 %d %d, button 2 %d %d\n", touchval1, button1, touchval2, button2);
     b82:	6505                	lui	a0,0x1
     b84:	00174713          	xori	a4,a4,1
     b88:	00164613          	xori	a2,a2,1
     b8c:	85a6                	mv	a1,s1
     b8e:	1f850513          	addi	a0,a0,504 # 11f8 <handle_reset+0xb2>
     b92:	3529                	jal	99c <printf>
    if (pressed) {  
     b94:	03200713          	li	a4,50
     b98:	a1018793          	addi	a5,gp,-1520 # 20000210 <button_1_pressed>
     b9c:	0c977e63          	bgeu	a4,s1,c78 <main+0x2b6>
        if (!button_1_pressed) {  
     ba0:	0007c703          	lbu	a4,0(a5)
     ba4:	eb09                	bnez	a4,bb6 <main+0x1f4>
            button_1_pressed = true;
     ba6:	4705                	li	a4,1
     ba8:	00e78023          	sb	a4,0(a5)
            button_1_press_start = (SysTick->CNT);
     bac:	e000f7b7          	lui	a5,0xe000f
     bb0:	4798                	lw	a4,8(a5)
     bb2:	a0e1a623          	sw	a4,-1524(gp) # 2000020c <button_1_press_start>
	if (pressed) {  
     bb6:	4602                	lw	a2,0(sp)
     bb8:	a1118793          	addi	a5,gp,-1519 # 20000211 <button_2_pressed>
     bbc:	03200693          	li	a3,50
     bc0:	0007c703          	lbu	a4,0(a5) # e000f000 <__global_pointer$+0xc000e800>
     bc4:	48c6fc63          	bgeu	a3,a2,105c <main+0x69a>
        if (!button_2_pressed) {  
     bc8:	e719                	bnez	a4,bd6 <main+0x214>
            button_2_pressed = true;
     bca:	4705                	li	a4,1
     bcc:	00e78023          	sb	a4,0(a5)
            button_2_press_start = (SysTick->CNT);
     bd0:	e000f7b7          	lui	a5,0xe000f
     bd4:	479c                	lw	a5,8(a5)

void update_blinking() {
	
    if (!is_blinking) {
     bd6:	a131c783          	lbu	a5,-1517(gp) # 20000213 <is_blinking>
     bda:	a1318693          	addi	a3,gp,-1517 # 20000213 <is_blinking>
     bde:	cba5                	beqz	a5,c4e <main+0x28c>
		return;
	};

    uint32_t current_time = (SysTick->CNT);
     be0:	e000f7b7          	lui	a5,0xe000f
	if(target_long_blinks){
     be4:	a1a1c603          	lbu	a2,-1510(gp) # 2000021a <target_long_blinks>
    uint32_t current_time = (SysTick->CNT);
     be8:	4798                	lw	a4,8(a5)
	if(target_long_blinks){
     bea:	a1a18593          	addi	a1,gp,-1510 # 2000021a <target_long_blinks>
     bee:	a1818793          	addi	a5,gp,-1512 # 20000218 <led_state>
     bf2:	4c060363          	beqz	a2,10b8 <main+0x6f6>
		if (!led_state && (current_time - blink_start >= LONG_BLINK_TIME)) {
     bf6:	a0818513          	addi	a0,gp,-1528 # 20000208 <blink_start>
     bfa:	00052283          	lw	t0,0(a0)
     bfe:	0007c383          	lbu	t2,0(a5) # e000f000 <__global_pointer$+0xc000e800>
     c02:	00113337          	lui	t1,0x113
     c06:	405702b3          	sub	t0,a4,t0
     c0a:	a8730313          	addi	t1,t1,-1401 # 112a87 <lib_i2c.c.e7f16be4+0x10e729>
     c0e:	48039a63          	bnez	t2,10a2 <main+0x6e0>
     c12:	02537e63          	bgeu	t1,t0,c4e <main+0x28c>
			led_state = true;
     c16:	4305                	li	t1,1
     c18:	00678023          	sb	t1,0(a5)
			GPIOD->OUTDR |= (1<<6);
     c1c:	40011337          	lui	t1,0x40011
     c20:	40c32283          	lw	t0,1036(t1) # 4001140c <__global_pointer$+0x20010c0c>
     c24:	0402e293          	ori	t0,t0,64
			target_long_blinks--;
			// printf("Long blink on");
		} 
		else if (led_state && (current_time - blink_start >= LONG_BLINK_TIME)) {
			led_state = false;
			GPIOD->OUTDR &= ~(1<<6);
     c28:	40532623          	sw	t0,1036(t1)
			blink_start = current_time;
			target_long_blinks--;
     c2c:	167d                	addi	a2,a2,-1
     c2e:	00c58023          	sb	a2,0(a1) # ffe00000 <__global_pointer$+0xdfdff800>
			target_short_blinks--;
			// printf("short blink off");
		}
	}

    if ((target_long_blinks == 0) && (target_short_blinks == 0) && !led_state) {
     c32:	0005c603          	lbu	a2,0(a1)
			blink_start = current_time;
     c36:	c118                	sw	a4,0(a0)
    if ((target_long_blinks == 0) && (target_short_blinks == 0) && !led_state) {
     c38:	ea19                	bnez	a2,c4e <main+0x28c>
     c3a:	a1b1c603          	lbu	a2,-1509(gp) # 2000021b <target_short_blinks>
     c3e:	ea01                	bnez	a2,c4e <main+0x28c>
     c40:	0007c783          	lbu	a5,0(a5)
     c44:	e789                	bnez	a5,c4e <main+0x28c>
		// printf("Targer blinks reached\n");
        is_blinking = false;
     c46:	00068023          	sb	zero,0(a3) # e000f000 <__global_pointer$+0xc000e800>
		blink_start = current_time;
     c4a:	a0e1a423          	sw	a4,-1528(gp) # 20000208 <blink_start>
		switch (mode) {
     c4e:	00044783          	lbu	a5,0(s0)
     c52:	4705                	li	a4,1
     c54:	4ce78363          	beq	a5,a4,111a <main+0x758>
     c58:	4709                	li	a4,2
     c5a:	4ce78b63          	beq	a5,a4,1130 <main+0x76e>
     c5e:	eb81                	bnez	a5,c6e <main+0x2ac>
				if (!is_blinking) {
     c60:	0006c783          	lbu	a5,0(a3)
     c64:	e789                	bnez	a5,c6e <main+0x2ac>
					start_blinking(0, (1));
     c66:	4585                	li	a1,1
     c68:	4501                	li	a0,0
					start_blinking(2, (count+1));
     c6a:	fcaff0ef          	jal	ra,434 <start_blinking>
	Delay_Us(500);
     c6e:	6519                	lui	a0,0x6
     c70:	dc050513          	addi	a0,a0,-576 # 5dc0 <lib_i2c.c.e7f16be4+0x1a62>
     c74:	30c5                	jal	554 <DelaySysTick>
	while(1) {
     c76:	bd7d                	j	b34 <main+0x172>
    } else if (button_1_pressed) {  
     c78:	0007c703          	lbu	a4,0(a5)
     c7c:	df0d                	beqz	a4,bb6 <main+0x1f4>
        uint32_t press_duration = (SysTick->CNT) - button_1_press_start;
     c7e:	e000f6b7          	lui	a3,0xe000f
     c82:	4698                	lw	a4,8(a3)
     c84:	a0c1a603          	lw	a2,-1524(gp) # 2000020c <button_1_press_start>
        button_1_pressed = false;
     c88:	00078023          	sb	zero,0(a5)
        if (press_duration >= SHORT_PRESS_TIME && press_duration < LONG_PRESS_TIME) {
     c8c:	7795                	lui	a5,0xfffe5
        uint32_t press_duration = (SysTick->CNT) - button_1_press_start;
     c8e:	8f11                	sub	a4,a4,a2
        if (press_duration >= SHORT_PRESS_TIME && press_duration < LONG_PRESS_TIME) {
     c90:	88c78793          	addi	a5,a5,-1908 # fffe488c <__global_pointer$+0xdffe408c>
     c94:	00153637          	lui	a2,0x153
     c98:	97ba                	add	a5,a5,a4
     c9a:	beb60613          	addi	a2,a2,-1045 # 152beb <lib_i2c.c.e7f16be4+0x14e88d>
     c9e:	38f66b63          	bltu	a2,a5,1034 <main+0x672>
			if (mode == 0) {
     ca2:	00044783          	lbu	a5,0(s0)
     ca6:	eb91                	bnez	a5,cba <main+0x2f8>
				read_bank_into_ntag(0);
     ca8:	4501                	li	a0,0
     caa:	318d                	jal	90c <read_bank_into_ntag>
        last_interaction = (SysTick->CNT);
     cac:	e000f7b7          	lui	a5,0xe000f
     cb0:	479c                	lw	a5,8(a5)
     cb2:	a1418713          	addi	a4,gp,-1516 # 20000214 <last_interaction>
     cb6:	c31c                	sw	a5,0(a4)
     cb8:	bdfd                	j	bb6 <main+0x1f4>
			else if (mode == 1) {
     cba:	4705                	li	a4,1
     cbc:	00e79863          	bne	a5,a4,ccc <main+0x30a>
                read_bank_into_ntag(count);
     cc0:	a121c503          	lbu	a0,-1518(gp) # 20000212 <count>
     cc4:	31a1                	jal	90c <read_bank_into_ntag>
				mode = 0;
     cc6:	00040023          	sb	zero,0(s0)
     cca:	b7cd                	j	cac <main+0x2ea>
            } else if (mode == 2) {
     ccc:	4709                	li	a4,2
     cce:	fce79fe3          	bne	a5,a4,cac <main+0x2ea>
	FLASH->KEYR = FLASH_KEY1;
     cd2:	456706b7          	lui	a3,0x45670
                write_ntag_into_bank(count);
     cd6:	a121c603          	lbu	a2,-1518(gp) # 20000212 <count>
	FLASH->KEYR = FLASH_KEY1;
     cda:	12368693          	addi	a3,a3,291 # 45670123 <__global_pointer$+0x2566f923>
     cde:	400227b7          	lui	a5,0x40022
	FLASH->KEYR = FLASH_KEY2;
     ce2:	cdef9737          	lui	a4,0xcdef9
	FLASH->KEYR = FLASH_KEY1;
     ce6:	c3d4                	sw	a3,4(a5)
	FLASH->KEYR = FLASH_KEY2;
     ce8:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <__global_pointer$+0xadef81ab>
     cec:	c3d8                	sw	a4,4(a5)
	FLASH->MODEKEYR = FLASH_KEY1;
     cee:	d3d4                	sw	a3,36(a5)
	FLASH->MODEKEYR = FLASH_KEY2;
     cf0:	d3d8                	sw	a4,36(a5)
	if( FLASH->CTLR & 0x8080 ) 
     cf2:	4b9c                	lw	a5,16(a5)
     cf4:	6721                	lui	a4,0x8
     cf6:	08070713          	addi	a4,a4,128 # 8080 <lib_i2c.c.e7f16be4+0x3d22>
     cfa:	8ff9                	and	a5,a5,a4
     cfc:	cb99                	beqz	a5,d12 <main+0x350>
		printf( "Flash still locked\n" );
     cfe:	6505                	lui	a0,0x1
     d00:	21850513          	addi	a0,a0,536 # 1218 <handle_reset+0xd2>
     d04:	c232                	sw	a2,4(sp)
     d06:	3ed9                	jal	8dc <puts>
		printf("Flash Locked!\n");
     d08:	6505                	lui	a0,0x1
     d0a:	22c50513          	addi	a0,a0,556 # 122c <handle_reset+0xe6>
     d0e:	36f9                	jal	8dc <puts>
     d10:	4612                	lw	a2,4(sp)
	GPIOD->OUTDR &= ~(1<<6);
     d12:	400117b7          	lui	a5,0x40011
     d16:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
		uint32_t * ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (j<<6));
     d1a:	060a                	slli	a2,a2,0x2
	int block_to_read = 1;
     d1c:	4485                	li	s1,1
	GPIOD->OUTDR &= ~(1<<6);
     d1e:	fbf77713          	andi	a4,a4,-65
     d22:	40e7a623          	sw	a4,1036(a5)
		uint32_t * ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (j<<6));
     d26:	6785                	lui	a5,0x1
     d28:	2d078793          	addi	a5,a5,720 # 12d0 <bank_addrs>
     d2c:	97b2                	add	a5,a5,a2
     d2e:	c23e                	sw	a5,4(sp)
		uint32_t blocks[4][4] = {0};
     d30:	04000613          	li	a2,64
     d34:	4581                	li	a1,0
     d36:	0848                	addi	a0,sp,20
     d38:	3ac9                	jal	70a <memset>
		uint32_t * ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (j<<6));
     d3a:	4712                	lw	a4,4(sp)
     d3c:	00449293          	slli	t0,s1,0x4
     d40:	ff028793          	addi	a5,t0,-16
     d44:	00072283          	lw	t0,0(a4)
		printf("Reading 4 blocks from %d to %d from ntag, writing to address %lx \n", block_to_read, block_to_read + 3, (uint32_t) ptr);
     d48:	6505                	lui	a0,0x1
     d4a:	00348613          	addi	a2,s1,3
		uint32_t * ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (j<<6));
     d4e:	92be                	add	t0,t0,a5
		printf("Reading 4 blocks from %d to %d from ntag, writing to address %lx \n", block_to_read, block_to_read + 3, (uint32_t) ptr);
     d50:	8696                	mv	a3,t0
     d52:	85a6                	mv	a1,s1
     d54:	23c50513          	addi	a0,a0,572 # 123c <handle_reset+0xf6>
     d58:	c416                	sw	t0,8(sp)
     d5a:	3189                	jal	99c <printf>
		for(int k=0; k<4; k++){
     d5c:	42a2                	lw	t0,8(sp)
     d5e:	085c                	addi	a5,sp,20
     d60:	4381                	li	t2,0
     d62:	7d100613          	li	a2,2001
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
     d66:	400055b7          	lui	a1,0x40005
     d6a:	4185d683          	lhu	a3,1048(a1) # 40005418 <__global_pointer$+0x20004c18>
     d6e:	40058713          	addi	a4,a1,1024
     d72:	8a89                	andi	a3,a3,2
     d74:	14069d63          	bnez	a3,ece <main+0x50c>
		I2C1->CTLR1 |= I2C_CTLR1_START;
     d78:	00075683          	lhu	a3,0(a4)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     d7c:	400055b7          	lui	a1,0x40005
		I2C1->CTLR1 |= I2C_CTLR1_START;
     d80:	06c2                	slli	a3,a3,0x10
     d82:	82c1                	srli	a3,a3,0x10
     d84:	1006e693          	ori	a3,a3,256
     d88:	00d71023          	sh	a3,0(a4)
	return (status & status_mask) == status_mask; 
     d8c:	000306b7          	lui	a3,0x30
     d90:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     d92:	4145d703          	lhu	a4,1044(a1) # 40005414 <__global_pointer$+0x20004c14>
     d96:	01071513          	slli	a0,a4,0x10
     d9a:	4185d703          	lhu	a4,1048(a1)
     d9e:	8141                	srli	a0,a0,0x10
     da0:	0742                	slli	a4,a4,0x10
     da2:	8f49                	or	a4,a4,a0
	return (status & status_mask) == status_mask; 
     da4:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     da6:	fed716e3          	bne	a4,a3,d92 <main+0x3d0>
		I2C1->DATAR = (addr << 1) & 0xFE;
     daa:	4711                	li	a4,4
	return (status & status_mask) == status_mask; 
     dac:	00070637          	lui	a2,0x70
		I2C1->DATAR = (addr << 1) & 0xFE;
     db0:	40e59823          	sh	a4,1040(a1)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     db4:	40005537          	lui	a0,0x40005
		I2C1->DATAR = (addr << 1) & 0xFE;
     db8:	7d100593          	li	a1,2001
	return (status & status_mask) == status_mask; 
     dbc:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.e7f16be4+0x6bd24>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     dc0:	41455683          	lhu	a3,1044(a0) # 40005414 <__global_pointer$+0x20004c14>
     dc4:	40050713          	addi	a4,a0,1024
     dc8:	01069093          	slli	ra,a3,0x10
     dcc:	01875683          	lhu	a3,24(a4)
     dd0:	0100d093          	srli	ra,ra,0x10
     dd4:	06c2                	slli	a3,a3,0x10
     dd6:	0016e6b3          	or	a3,a3,ra
	return (status & status_mask) == status_mask; 
     dda:	8ef1                	and	a3,a3,a2
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
     ddc:	1ec69d63          	bne	a3,a2,fd6 <main+0x614>
     de0:	007486b3          	add	a3,s1,t2
     de4:	06c2                	slli	a3,a3,0x10
     de6:	82c1                	srli	a3,a3,0x10
		I2C1->DATAR = reg;
     de8:	00d71823          	sh	a3,16(a4)
		while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     dec:	40005637          	lui	a2,0x40005
     df0:	41465683          	lhu	a3,1044(a2) # 40005414 <__global_pointer$+0x20004c14>
     df4:	0806f693          	andi	a3,a3,128
     df8:	dee5                	beqz	a3,df0 <main+0x42e>
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
     dfa:	40065683          	lhu	a3,1024(a2)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     dfe:	400055b7          	lui	a1,0x40005
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
     e02:	06c2                	slli	a3,a3,0x10
     e04:	82c1                	srli	a3,a3,0x10
     e06:	4006e693          	ori	a3,a3,1024
     e0a:	40d61023          	sh	a3,1024(a2)
		I2C1->CTLR1 |= I2C_CTLR1_START;
     e0e:	40065683          	lhu	a3,1024(a2)
     e12:	06c2                	slli	a3,a3,0x10
     e14:	82c1                	srli	a3,a3,0x10
     e16:	1006e693          	ori	a3,a3,256
     e1a:	40d61023          	sh	a3,1024(a2)
	return (status & status_mask) == status_mask; 
     e1e:	000306b7          	lui	a3,0x30
     e22:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     e24:	4145d703          	lhu	a4,1044(a1) # 40005414 <__global_pointer$+0x20004c14>
     e28:	01071513          	slli	a0,a4,0x10
     e2c:	4185d703          	lhu	a4,1048(a1)
     e30:	8141                	srli	a0,a0,0x10
     e32:	0742                	slli	a4,a4,0x10
     e34:	8f49                	or	a4,a4,a0
	return (status & status_mask) == status_mask; 
     e36:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     e38:	fed716e3          	bne	a4,a3,e24 <main+0x462>
		I2C1->DATAR = (addr << 1) | 0x01;
     e3c:	4715                	li	a4,5
	return (status & status_mask) == status_mask; 
     e3e:	00030637          	lui	a2,0x30
		I2C1->DATAR = (addr << 1) | 0x01;
     e42:	40e59823          	sh	a4,1040(a1)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     e46:	40005537          	lui	a0,0x40005
		I2C1->DATAR = (addr << 1) | 0x01;
     e4a:	7d100593          	li	a1,2001
	return (status & status_mask) == status_mask; 
     e4e:	0609                	addi	a2,a2,2
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     e50:	41455683          	lhu	a3,1044(a0) # 40005414 <__global_pointer$+0x20004c14>
     e54:	40050713          	addi	a4,a0,1024
     e58:	01069093          	slli	ra,a3,0x10
     e5c:	01875683          	lhu	a3,24(a4)
     e60:	0100d093          	srli	ra,ra,0x10
     e64:	06c2                	slli	a3,a3,0x10
     e66:	0016e6b3          	or	a3,a3,ra
	return (status & status_mask) == status_mask; 
     e6a:	8ef1                	and	a3,a3,a2
		while(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
     e6c:	16c69963          	bne	a3,a2,fde <main+0x61c>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     e70:	6585                	lui	a1,0x1
		while(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
     e72:	863e                	mv	a2,a5
			while(!(I2C1->STAR1 & I2C_STAR1_RXNE));
     e74:	400050b7          	lui	ra,0x40005
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     e78:	80058593          	addi	a1,a1,-2048 # 800 <mini_vpprintf+0xd2>
		while(cbyte < len)
     e7c:	01078513          	addi	a0,a5,16
			while(!(I2C1->STAR1 & I2C_STAR1_RXNE));
     e80:	4140d683          	lhu	a3,1044(ra) # 40005414 <__global_pointer$+0x20004c14>
     e84:	40008713          	addi	a4,ra,1024
     e88:	0406f693          	andi	a3,a3,64
     e8c:	daf5                	beqz	a3,e80 <main+0x4be>
			buf[cbyte] = I2C1->DATAR;
     e8e:	01075683          	lhu	a3,16(a4)
     e92:	00d60023          	sb	a3,0(a2) # 30000 <lib_i2c.c.e7f16be4+0x2bca2>
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
     e96:	01475683          	lhu	a3,20(a4)
     e9a:	1006f693          	andi	a3,a3,256
     e9e:	e2a9                	bnez	a3,ee0 <main+0x51e>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
     ea0:	01475683          	lhu	a3,20(a4)
     ea4:	4006f693          	andi	a3,a3,1024
     ea8:	14069463          	bnez	a3,ff0 <main+0x62e>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
     eac:	01475683          	lhu	a3,20(a4)
     eb0:	2006f693          	andi	a3,a3,512
     eb4:	14069a63          	bnez	a3,1008 <main+0x646>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     eb8:	01475683          	lhu	a3,20(a4)
     ebc:	06c2                	slli	a3,a3,0x10
     ebe:	82c1                	srli	a3,a3,0x10
     ec0:	8eed                	and	a3,a3,a1
     ec2:	16069063          	bnez	a3,1022 <main+0x660>
     ec6:	0605                	addi	a2,a2,1
		while(cbyte < len)
     ec8:	fac51ce3          	bne	a0,a2,e80 <main+0x4be>
     ecc:	a025                	j	ef4 <main+0x532>
     ece:	167d                	addi	a2,a2,-1
		if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     ed0:	e8061de3          	bnez	a2,d6a <main+0x3a8>
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
     ed4:	01475683          	lhu	a3,20(a4)
     ed8:	1006f693          	andi	a3,a3,256
     edc:	10068563          	beqz	a3,fe6 <main+0x624>
     ee0:	01475683          	lhu	a3,20(a4)
     ee4:	06c2                	slli	a3,a3,0x10
     ee6:	82c1                	srli	a3,a3,0x10
     ee8:	eff6f693          	andi	a3,a3,-257
     eec:	06c2                	slli	a3,a3,0x10
     eee:	82c1                	srli	a3,a3,0x10
     ef0:	00d71a23          	sh	a3,20(a4)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     ef4:	400056b7          	lui	a3,0x40005
     ef8:	4006d703          	lhu	a4,1024(a3) # 40005400 <__global_pointer$+0x20004c00>
     efc:	c81e                	sw	t2,16(sp)
     efe:	c616                	sw	t0,12(sp)
     f00:	0742                	slli	a4,a4,0x10
     f02:	8341                	srli	a4,a4,0x10
     f04:	20076713          	ori	a4,a4,512
     f08:	40e69023          	sh	a4,1024(a3)
			printf("0x%lx, 0x%lx, 0x%lx, 0x%lx \n", blocks[k][0], blocks[k][1], blocks[k][2], blocks[k][3]);
     f0c:	43d0                	lw	a2,4(a5)
     f0e:	47d8                	lw	a4,12(a5)
     f10:	4794                	lw	a3,8(a5)
     f12:	438c                	lw	a1,0(a5)
     f14:	c43e                	sw	a5,8(sp)
     f16:	6785                	lui	a5,0x1
     f18:	28078513          	addi	a0,a5,640 # 1280 <handle_reset+0x13a>
     f1c:	3441                	jal	99c <printf>
		for(int k=0; k<4; k++){
     f1e:	43c2                	lw	t2,16(sp)
     f20:	47a2                	lw	a5,8(sp)
     f22:	4711                	li	a4,4
     f24:	0385                	addi	t2,t2,1
     f26:	42b2                	lw	t0,12(sp)
     f28:	07c1                	addi	a5,a5,16
     f2a:	e2e39ce3          	bne	t2,a4,d62 <main+0x3a0>
		FLASH->CTLR = CR_PAGE_ER;
     f2e:	40022737          	lui	a4,0x40022
     f32:	000207b7          	lui	a5,0x20
     f36:	cb1c                	sw	a5,16(a4)
		FLASH->ADDR = (intptr_t)ptr;
     f38:	00572a23          	sw	t0,20(a4) # 40022014 <__global_pointer$+0x20021814>
		FLASH->CTLR = CR_STRT_Set | CR_PAGE_ER;
     f3c:	04078793          	addi	a5,a5,64 # 20040 <lib_i2c.c.e7f16be4+0x1bce2>
     f40:	0491                	addi	s1,s1,4
     f42:	cb1c                	sw	a5,16(a4)
		while( FLASH->STATR & FLASH_STATR_BSY );  // Takes about 3ms.
     f44:	475c                	lw	a5,12(a4)
     f46:	8b85                	andi	a5,a5,1
     f48:	fff5                	bnez	a5,f44 <main+0x582>
		if( ptr[0] != 0xffffffff )
     f4a:	0002a703          	lw	a4,0(t0)
     f4e:	57fd                	li	a5,-1
     f50:	00f70863          	beq	a4,a5,f60 <main+0x59e>
			printf( "WARNING/FAILURE: Flash general erasure failed\n" );
     f54:	6505                	lui	a0,0x1
     f56:	2a050513          	addi	a0,a0,672 # 12a0 <handle_reset+0x15a>
     f5a:	c416                	sw	t0,8(sp)
     f5c:	3241                	jal	8dc <puts>
     f5e:	42a2                	lw	t0,8(sp)
		FLASH->CTLR = CR_PAGE_PG;  // synonym of FTPG.
     f60:	400227b7          	lui	a5,0x40022
     f64:	6741                	lui	a4,0x10
     f66:	cb98                	sw	a4,16(a5)
		FLASH->CTLR = CR_BUF_RST | CR_PAGE_PG;
     f68:	00090737          	lui	a4,0x90
     f6c:	cb98                	sw	a4,16(a5)
		FLASH->ADDR = (intptr_t)ptr;  // This can actually happen about anywhere toward the end here.
     f6e:	0057aa23          	sw	t0,20(a5) # 40022014 <__global_pointer$+0x20021814>
		while( FLASH->STATR & FLASH_STATR_BSY );  // No real need for this.
     f72:	40022737          	lui	a4,0x40022
     f76:	475c                	lw	a5,12(a4)
     f78:	8b85                	andi	a5,a5,1
     f7a:	fff5                	bnez	a5,f76 <main+0x5b4>
			FLASH->CTLR = CR_PAGE_PG | FLASH_CTLR_BUF_LOAD; // Load the buffer.
     f7c:	40022737          	lui	a4,0x40022
     f80:	000505b7          	lui	a1,0x50
		for( i = 0; i < 16; i++ )
     f84:	4641                	li	a2,16
			ptr[i] = blocks[i/4][i%4]; //Write to the memory
     f86:	00279513          	slli	a0,a5,0x2
     f8a:	05410313          	addi	t1,sp,84
     f8e:	951a                	add	a0,a0,t1
     f90:	fc052503          	lw	a0,-64(a0)
     f94:	00279693          	slli	a3,a5,0x2
     f98:	9696                	add	a3,a3,t0
     f9a:	c288                	sw	a0,0(a3)
			FLASH->CTLR = CR_PAGE_PG | FLASH_CTLR_BUF_LOAD; // Load the buffer.
     f9c:	cb0c                	sw	a1,16(a4)
			while( FLASH->STATR & FLASH_STATR_BSY );  // Only needed if running from RAM.
     f9e:	4754                	lw	a3,12(a4)
     fa0:	8a85                	andi	a3,a3,1
     fa2:	fef5                	bnez	a3,f9e <main+0x5dc>
		for( i = 0; i < 16; i++ )
     fa4:	0785                	addi	a5,a5,1
     fa6:	fec790e3          	bne	a5,a2,f86 <main+0x5c4>
		FLASH->CTLR = CR_PAGE_PG|CR_STRT_Set;
     faa:	67c1                	lui	a5,0x10
     fac:	04078793          	addi	a5,a5,64 # 10040 <lib_i2c.c.e7f16be4+0xbce2>
     fb0:	cb1c                	sw	a5,16(a4)
		while( FLASH->STATR & FLASH_STATR_BSY );
     fb2:	40022737          	lui	a4,0x40022
     fb6:	475c                	lw	a5,12(a4)
     fb8:	8b85                	andi	a5,a5,1
     fba:	fff5                	bnez	a5,fb6 <main+0x5f4>
	for(int j=0; j<14; j++) {	
     fbc:	03900793          	li	a5,57
     fc0:	d6f498e3          	bne	s1,a5,d30 <main+0x36e>
	GPIOD->OUTDR |= (1<<6);
     fc4:	400117b7          	lui	a5,0x40011
     fc8:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
     fcc:	04076713          	ori	a4,a4,64
     fd0:	40e7a623          	sw	a4,1036(a5)
     fd4:	b9cd                	j	cc6 <main+0x304>
     fd6:	15fd                	addi	a1,a1,-1
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     fd8:	de0594e3          	bnez	a1,dc0 <main+0x3fe>
     fdc:	bde5                	j	ed4 <main+0x512>
     fde:	15fd                	addi	a1,a1,-1
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     fe0:	e60598e3          	bnez	a1,e50 <main+0x48e>
     fe4:	bdc5                	j	ed4 <main+0x512>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
     fe6:	01475683          	lhu	a3,20(a4) # 40022014 <__global_pointer$+0x20021814>
     fea:	4006f693          	andi	a3,a3,1024
     fee:	ca81                	beqz	a3,ffe <main+0x63c>
     ff0:	01475683          	lhu	a3,20(a4)
     ff4:	06c2                	slli	a3,a3,0x10
     ff6:	82c1                	srli	a3,a3,0x10
     ff8:	bff6f693          	andi	a3,a3,-1025
     ffc:	bdc5                	j	eec <main+0x52a>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
     ffe:	01475683          	lhu	a3,20(a4)
    1002:	2006f693          	andi	a3,a3,512
    1006:	ca81                	beqz	a3,1016 <main+0x654>
    1008:	01475683          	lhu	a3,20(a4)
    100c:	06c2                	slli	a3,a3,0x10
    100e:	82c1                	srli	a3,a3,0x10
    1010:	dff6f693          	andi	a3,a3,-513
    1014:	bde1                	j	eec <main+0x52a>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
    1016:	01475683          	lhu	a3,20(a4)
    101a:	01469613          	slli	a2,a3,0x14
    101e:	ec065be3          	bgez	a2,ef4 <main+0x532>
    1022:	01475683          	lhu	a3,20(a4)
    1026:	767d                	lui	a2,0xfffff
    1028:	7ff60613          	addi	a2,a2,2047 # fffff7ff <__global_pointer$+0xdfffefff>
    102c:	06c2                	slli	a3,a3,0x10
    102e:	82c1                	srli	a3,a3,0x10
    1030:	8ef1                	and	a3,a3,a2
    1032:	bd7d                	j	ef0 <main+0x52e>
		else if (press_duration > LONG_PRESS_TIME) {
    1034:	0016e7b7          	lui	a5,0x16e
    1038:	36078793          	addi	a5,a5,864 # 16e360 <lib_i2c.c.e7f16be4+0x16a002>
    103c:	c6e7f8e3          	bgeu	a5,a4,cac <main+0x2ea>
			mode = (mode + 1)%3;
    1040:	00044503          	lbu	a0,0(s0)
    1044:	458d                	li	a1,3
    1046:	0505                	addi	a0,a0,1
    1048:	8b0ff0ef          	jal	ra,f8 <__modsi3>
    104c:	00a40023          	sb	a0,0(s0)
			count = 0; // Reset count when switching modes
    1050:	a0018923          	sb	zero,-1518(gp) # 20000212 <count>
			last_interaction = (SysTick->CNT);
    1054:	e000f6b7          	lui	a3,0xe000f
    1058:	469c                	lw	a5,8(a3)
    105a:	b989                	j	cac <main+0x2ea>
    } else if (button_2_pressed) {  
    105c:	b6070de3          	beqz	a4,bd6 <main+0x214>
        uint32_t press_duration = (SysTick->CNT) - button_1_press_start;
    1060:	e000f6b7          	lui	a3,0xe000f
    1064:	4698                	lw	a4,8(a3)
    1066:	a0c1a603          	lw	a2,-1524(gp) # 2000020c <button_1_press_start>
        button_2_pressed = false;
    106a:	00078023          	sb	zero,0(a5)
        if (press_duration >= SHORT_PRESS_TIME){
    106e:	67ed                	lui	a5,0x1b
        uint32_t press_duration = (SysTick->CNT) - button_1_press_start;
    1070:	8f11                	sub	a4,a4,a2
        if (press_duration >= SHORT_PRESS_TIME){
    1072:	77378793          	addi	a5,a5,1907 # 1b773 <lib_i2c.c.e7f16be4+0x17415>
    1076:	b6e7f0e3          	bgeu	a5,a4,bd6 <main+0x214>
			if(mode == 0){
    107a:	00044783          	lbu	a5,0(s0)
    107e:	e789                	bnez	a5,1088 <main+0x6c6>
				read_bank_into_ntag(1);
    1080:	4505                	li	a0,1
    1082:	88bff0ef          	jal	ra,90c <read_bank_into_ntag>
    1086:	be81                	j	bd6 <main+0x214>
			count = (count + 1)%4;
    1088:	a1218713          	addi	a4,gp,-1518 # 20000212 <count>
    108c:	00074783          	lbu	a5,0(a4)
    1090:	0785                	addi	a5,a5,1
    1092:	8b8d                	andi	a5,a5,3
    1094:	00f70023          	sb	a5,0(a4)
			last_interaction = (SysTick->CNT);
    1098:	469c                	lw	a5,8(a3)
    109a:	a1418713          	addi	a4,gp,-1516 # 20000214 <last_interaction>
    109e:	c31c                	sw	a5,0(a4)
    10a0:	be1d                	j	bd6 <main+0x214>
		else if (led_state && (current_time - blink_start >= LONG_BLINK_TIME)) {
    10a2:	ba5376e3          	bgeu	t1,t0,c4e <main+0x28c>
			GPIOD->OUTDR &= ~(1<<6);
    10a6:	40011337          	lui	t1,0x40011
    10aa:	40c32283          	lw	t0,1036(t1) # 4001140c <__global_pointer$+0x20010c0c>
			led_state = false;
    10ae:	00078023          	sb	zero,0(a5)
			GPIOD->OUTDR &= ~(1<<6);
    10b2:	fbf2f293          	andi	t0,t0,-65
    10b6:	be8d                	j	c28 <main+0x266>
	} else if(target_short_blinks) {
    10b8:	a1b18593          	addi	a1,gp,-1509 # 2000021b <target_short_blinks>
    10bc:	0005c603          	lbu	a2,0(a1) # 50000 <lib_i2c.c.e7f16be4+0x4bca2>
    10c0:	b80600e3          	beqz	a2,c40 <main+0x27e>
		if (!led_state && (current_time - blink_start >= SHORT_BLINK_TIME)) {
    10c4:	a0818513          	addi	a0,gp,-1528 # 20000208 <blink_start>
    10c8:	00052283          	lw	t0,0(a0)
    10cc:	0007c383          	lbu	t2,0(a5)
    10d0:	00049337          	lui	t1,0x49
    10d4:	405702b3          	sub	t0,a4,t0
    10d8:	3df30313          	addi	t1,t1,991 # 493df <lib_i2c.c.e7f16be4+0x45081>
    10dc:	02039463          	bnez	t2,1104 <main+0x742>
    10e0:	b65377e3          	bgeu	t1,t0,c4e <main+0x28c>
			led_state = true;
    10e4:	4305                	li	t1,1
    10e6:	00678023          	sb	t1,0(a5)
			GPIOD->OUTDR |= (1<<6);
    10ea:	40011337          	lui	t1,0x40011
    10ee:	40c32283          	lw	t0,1036(t1) # 4001140c <__global_pointer$+0x20010c0c>
    10f2:	0402e293          	ori	t0,t0,64
			GPIOD->OUTDR &= ~(1<<6);
    10f6:	40532623          	sw	t0,1036(t1)
			target_short_blinks--;
    10fa:	167d                	addi	a2,a2,-1
			blink_start = current_time;
    10fc:	c118                	sw	a4,0(a0)
			target_short_blinks--;
    10fe:	00c58023          	sb	a2,0(a1)
    1102:	be25                	j	c3a <main+0x278>
		else if (led_state && (current_time - blink_start >= SHORT_BLINK_TIME)) {
    1104:	b45375e3          	bgeu	t1,t0,c4e <main+0x28c>
			GPIOD->OUTDR &= ~(1<<6);
    1108:	40011337          	lui	t1,0x40011
    110c:	40c32283          	lw	t0,1036(t1) # 4001140c <__global_pointer$+0x20010c0c>
			led_state = false;
    1110:	00078023          	sb	zero,0(a5)
			GPIOD->OUTDR &= ~(1<<6);
    1114:	fbf2f293          	andi	t0,t0,-65
    1118:	bff9                	j	10f6 <main+0x734>
				if (!is_blinking) {
    111a:	0006c783          	lbu	a5,0(a3) # e000f000 <__global_pointer$+0xc000e800>
    111e:	b40798e3          	bnez	a5,c6e <main+0x2ac>
					start_blinking(1, (count+1));
    1122:	a121c583          	lbu	a1,-1518(gp) # 20000212 <count>
    1126:	4505                	li	a0,1
    1128:	0585                	addi	a1,a1,1
    112a:	0ff5f593          	andi	a1,a1,255
    112e:	be35                	j	c6a <main+0x2a8>
				if (!is_blinking) {
    1130:	0006c783          	lbu	a5,0(a3)
    1134:	b2079de3          	bnez	a5,c6e <main+0x2ac>
					start_blinking(2, (count+1));
    1138:	a121c583          	lbu	a1,-1518(gp) # 20000212 <count>
    113c:	4509                	li	a0,2
    113e:	0585                	addi	a1,a1,1
    1140:	0ff5f593          	andi	a1,a1,255
    1144:	b61d                	j	c6a <main+0x2a8>

00001146 <handle_reset>:
	asm volatile( "\n\
    1146:	1ffff197          	auipc	gp,0x1ffff
    114a:	6ba18193          	addi	gp,gp,1722 # 20000800 <__global_pointer$>
    114e:	00018113          	mv	sp,gp
    1152:	08000513          	li	a0,128
    1156:	30051073          	csrw	mstatus,a0
    115a:	468d                	li	a3,3
    115c:	fffff517          	auipc	a0,0xfffff
    1160:	ea450513          	addi	a0,a0,-348 # 0 <InterruptVector>
    1164:	8d55                	or	a0,a0,a3
    1166:	30551073          	csrw	mtvec,a0
asm volatile(
    116a:	a0818513          	addi	a0,gp,-1528 # 20000208 <blink_start>
    116e:	a1c18593          	addi	a1,gp,-1508 # 2000021c <_ebss>
    1172:	4601                	li	a2,0
    1174:	00b55663          	bge	a0,a1,1180 <handle_reset+0x3a>
    1178:	c110                	sw	a2,0(a0)
    117a:	0511                	addi	a0,a0,4
    117c:	feb54ee3          	blt	a0,a1,1178 <handle_reset+0x32>
    1180:	00000517          	auipc	a0,0x0
    1184:	16050513          	addi	a0,a0,352 # 12e0 <_data_lma>
    1188:	1ffff597          	auipc	a1,0x1ffff
    118c:	e7858593          	addi	a1,a1,-392 # 20000000 <ReadTouchPin.constprop.0>
    1190:	1ffff617          	auipc	a2,0x1ffff
    1194:	07860613          	addi	a2,a2,120 # 20000208 <blink_start>
    1198:	00c58863          	beq	a1,a2,11a8 <handle_reset+0x62>
    119c:	4114                	lw	a3,0(a0)
    119e:	c194                	sw	a3,0(a1)
    11a0:	0511                	addi	a0,a0,4
    11a2:	0591                	addi	a1,a1,4
    11a4:	fec59ae3          	bne	a1,a2,1198 <handle_reset+0x52>
	SysTick->CTLR = 5;
    11a8:	e000f7b7          	lui	a5,0xe000f
    11ac:	4715                	li	a4,5
    11ae:	c398                	sw	a4,0(a5)
asm volatile(
    11b0:	6785                	lui	a5,0x1
    11b2:	9c278793          	addi	a5,a5,-1598 # 9c2 <main>
    11b6:	34179073          	csrw	mepc,a5
    11ba:	30200073          	mret
    11be:	0000                	unimp
    11c0:	000a                	c.slli	zero,0x2
    11c2:	0000                	unimp
    11c4:	7245                	lui	tp,0xffff1
    11c6:	6f72                	flw	ft10,28(sp)
    11c8:	2072                	fld	ft0,280(sp)
    11ca:	7355                	lui	t1,0xffff5
    11cc:	6e69                	lui	t3,0x1a
    11ce:	68742067          	0x68742067
    11d2:	2065                	jal	127a <handle_reset+0x134>
    11d4:	3249                	jal	b56 <main+0x194>
    11d6:	75422043          	0x75422043
    11da:	61460073          	0x61460073
    11de:	6c69                	lui	s8,0x1a
    11e0:	6465                	lui	s0,0x19
    11e2:	7420                	flw	fs0,104(s0)
    11e4:	6e69206f          	j	938ca <lib_i2c.c.e7f16be4+0x8f56c>
    11e8:	7469                	lui	s0,0xffffa
    11ea:	7420                	flw	fs0,104(s0)
    11ec:	6568                	flw	fa0,76(a0)
    11ee:	4920                	lw	s0,80(a0)
    11f0:	4332                	lw	t1,12(sp)
    11f2:	4220                	lw	s0,64(a2)
    11f4:	7375                	lui	t1,0xffffd
    11f6:	0000                	unimp
    11f8:	7542                	flw	fa0,48(sp)
    11fa:	7474                	flw	fa3,108(s0)
    11fc:	31206e6f          	jal	t3,750e <lib_i2c.c.e7f16be4+0x31b0>
    1200:	2520                	fld	fs0,72(a0)
    1202:	2064                	fld	fs1,192(s0)
    1204:	6425                	lui	s0,0x9
    1206:	202c                	fld	fa1,64(s0)
    1208:	7562                	flw	fa0,56(sp)
    120a:	7474                	flw	fa3,108(s0)
    120c:	32206e6f          	jal	t3,752e <lib_i2c.c.e7f16be4+0x31d0>
    1210:	2520                	fld	fs0,72(a0)
    1212:	2064                	fld	fs1,192(s0)
    1214:	6425                	lui	s0,0x9
    1216:	000a                	c.slli	zero,0x2
    1218:	6c46                	flw	fs8,80(sp)
    121a:	7361                	lui	t1,0xffff8
    121c:	2068                	fld	fa0,192(s0)
    121e:	6c697473          	csrrci	s0,0x6c6,18
    1222:	206c                	fld	fa1,192(s0)
    1224:	6f6c                	flw	fa1,92(a4)
    1226:	64656b63          	bltu	a0,t1,187c <ch32fun.c.60bab88f+0x13f>
    122a:	0000                	unimp
    122c:	6c46                	flw	fs8,80(sp)
    122e:	7361                	lui	t1,0xffff8
    1230:	2068                	fld	fa0,192(s0)
    1232:	6f4c                	flw	fa1,28(a4)
    1234:	64656b63          	bltu	a0,t1,188a <ch32fun.c.60bab88f+0x14d>
    1238:	0021                	c.nop	8
    123a:	0000                	unimp
    123c:	6552                	flw	fa0,20(sp)
    123e:	6461                	lui	s0,0x18
    1240:	6e69                	lui	t3,0x1a
    1242:	20342067          	0x20342067
    1246:	6c62                	flw	fs8,24(sp)
    1248:	736b636f          	jal	t1,b797e <lib_i2c.c.e7f16be4+0xb3620>
    124c:	6620                	flw	fs0,72(a2)
    124e:	6f72                	flw	ft10,28(sp)
    1250:	206d                	jal	12fa <_data_lma+0x1a>
    1252:	6425                	lui	s0,0x9
    1254:	7420                	flw	fs0,104(s0)
    1256:	6425206f          	j	53898 <lib_i2c.c.e7f16be4+0x4f53a>
    125a:	6620                	flw	fs0,72(a2)
    125c:	6f72                	flw	ft10,28(sp)
    125e:	206d                	jal	1308 <_data_lma+0x28>
    1260:	746e                	flw	fs0,248(sp)
    1262:	6761                	lui	a4,0x18
    1264:	202c                	fld	fa1,64(s0)
    1266:	74697277          	0x74697277
    126a:	6e69                	lui	t3,0x1a
    126c:	6f742067          	0x6f742067
    1270:	6120                	flw	fs0,64(a0)
    1272:	6464                	flw	fs1,76(s0)
    1274:	6572                	flw	fa0,28(sp)
    1276:	25207373          	csrrci	t1,0x252,0
    127a:	786c                	flw	fa1,116(s0)
    127c:	0a20                	addi	s0,sp,280
    127e:	0000                	unimp
    1280:	7830                	flw	fa2,112(s0)
    1282:	6c25                	lui	s8,0x9
    1284:	2c78                	fld	fa4,216(s0)
    1286:	3020                	fld	fs0,96(s0)
    1288:	2578                	fld	fa4,200(a0)
    128a:	786c                	flw	fa1,116(s0)
    128c:	202c                	fld	fa1,64(s0)
    128e:	7830                	flw	fa2,112(s0)
    1290:	6c25                	lui	s8,0x9
    1292:	2c78                	fld	fa4,216(s0)
    1294:	3020                	fld	fs0,96(s0)
    1296:	2578                	fld	fa4,200(a0)
    1298:	786c                	flw	fa1,116(s0)
    129a:	0a20                	addi	s0,sp,280
    129c:	0000                	unimp
    129e:	0000                	unimp
    12a0:	4e524157          	0x4e524157
    12a4:	4e49                	li	t3,18
    12a6:	41462f47          	fmsub.s	ft10,fa2,fs4,fs0,rdn
    12aa:	4c49                	li	s8,18
    12ac:	5255                	li	tp,-11
    12ae:	3a45                	jal	c5e <main+0x29c>
    12b0:	4620                	lw	s0,72(a2)
    12b2:	616c                	flw	fa1,68(a0)
    12b4:	67206873          	csrrsi	a6,0x672,0
    12b8:	6e65                	lui	t3,0x19
    12ba:	7265                	lui	tp,0xffff9
    12bc:	6c61                	lui	s8,0x18
    12be:	6520                	flw	fs0,72(a0)
    12c0:	6172                	flw	ft2,28(sp)
    12c2:	65727573          	csrrci	a0,0x657,4
    12c6:	6620                	flw	fs0,72(a2)
    12c8:	6961                	lui	s2,0x18
    12ca:	656c                	flw	fa1,76(a0)
    12cc:	0064                	addi	s1,sp,12
	...

000012d0 <bank_addrs>:
    12d0:	3000 0800 3400 0800 3800 0800 3c00 0800     .0...4...8...<..

Disassembly of section .data:

20000000 <ReadTouchPin.constprop.0>:
}

// Run from RAM to get even more stable timing.
// This function call takes about 8.1uS to execute.
static uint32_t ReadTouchPin( GPIO_TypeDef * io, int portpin, int adcno, int iterations ) __attribute__((noinline, section(".srodata")));
uint32_t ReadTouchPin( GPIO_TypeDef * io, int portpin, int adcno, int iterations )
20000000:	fdc10113          	addi	sp,sp,-36
20000004:	ce22                	sw	s0,28(sp)
20000006:	cc26                	sw	s1,24(sp)
20000008:	d006                	sw	ra,32(sp)
2000000a:	84aa                	mv	s1,a0
2000000c:	842e                	mv	s0,a1
{
	uint32_t ret = 0;

	__disable_irq();
2000000e:	47a000e7          	jalr	1146(zero) # 0 <InterruptVector>
	FORCEALIGNADC
20000012:	e000f7b7          	lui	a5,0xe000f
20000016:	479c                	lw	a5,8(a5)
20000018:	0037f613          	andi	a2,a5,3
2000001c:	0606                	slli	a2,a2,0x1
2000001e:	0631                	addi	a2,a2,12
20000020:	00000597          	auipc	a1,0x0
20000024:	962e                	add	a2,a2,a1
20000026:	001600e7          	jalr	1(a2)
2000002a:	0001                	nop
2000002c:	0001                	nop
2000002e:	0001                	nop
20000030:	0001                	nop
	ADC1->RSQR3 = adcno;
20000032:	40012737          	lui	a4,0x40012
	ADC1->SAMPTR2 = TOUCH_ADC_SAMPLE_TIME<<(3*adcno);
20000036:	00141793          	slli	a5,s0,0x1
	ADC1->RSQR3 = adcno;
2000003a:	42872a23          	sw	s0,1076(a4) # 40012434 <__global_pointer$+0x20011c34>
	ADC1->SAMPTR2 = TOUCH_ADC_SAMPLE_TIME<<(3*adcno);
2000003e:	008785b3          	add	a1,a5,s0
20000042:	4409                	li	s0,2
20000044:	00b415b3          	sll	a1,s0,a1
20000048:	40b72823          	sw	a1,1040(a4)
	__enable_irq();
2000004c:	488000e7          	jalr	1160(zero) # 0 <InterruptVector>

	uint32_t CFGBASE = io->CFGLR & (~(0xf<<(4*portpin)));
20000050:	400117b7          	lui	a5,0x40011
20000054:	4007a683          	lw	a3,1024(a5) # 40011400 <__global_pointer$+0x20010c00>
20000058:	00249713          	slli	a4,s1,0x2
2000005c:	47bd                	li	a5,15
2000005e:	00e797b3          	sll	a5,a5,a4
20000062:	fff7c793          	not	a5,a5
20000066:	8ff5                	and	a5,a5,a3
	uint32_t CFGFLOAT = ((GPIO_CFGLR_IN_PUPD)<<(4*portpin)) | CFGBASE;
20000068:	46a1                	li	a3,8
	uint32_t CFGDRIVE = (GPIO_CFGLR_OUT_2Mhz_PP)<<(4*portpin) | CFGBASE;
2000006a:	00e41433          	sll	s0,s0,a4
	uint32_t CFGFLOAT = ((GPIO_CFGLR_IN_PUPD)<<(4*portpin)) | CFGBASE;
2000006e:	00e696b3          	sll	a3,a3,a4
	for( i = 0; i < iterations; i++ )
	{
		// Wait a variable amount of time based on loop iteration, in order
		// to get a variety of RC points and minimize DNL.

		INNER_LOOP( 0 );
20000072:	4505                	li	a0,1
	uint32_t CFGFLOAT = ((GPIO_CFGLR_IN_PUPD)<<(4*portpin)) | CFGBASE;
20000074:	8edd                	or	a3,a3,a5
	uint32_t CFGDRIVE = (GPIO_CFGLR_OUT_2Mhz_PP)<<(4*portpin) | CFGBASE;
20000076:	8fc1                	or	a5,a5,s0
20000078:	c23e                	sw	a5,4(sp)
		INNER_LOOP( 0 );
2000007a:	009517b3          	sll	a5,a0,s1
2000007e:	01048413          	addi	s0,s1,16
20000082:	c43e                	sw	a5,8(sp)
20000084:	004e04b7          	lui	s1,0x4e0
20000088:	478d                	li	a5,3
2000008a:	00851433          	sll	s0,a0,s0
	uint32_t CFGFLOAT = ((GPIO_CFGLR_IN_PUPD)<<(4*portpin)) | CFGBASE;
2000008e:	c036                	sw	a3,0(sp)
		INNER_LOOP( 0 );
20000090:	c63e                	sw	a5,12(sp)
	uint32_t ret = 0;
20000092:	4501                	li	a0,0
		INNER_LOOP( 0 );
20000094:	0485                	addi	s1,s1,1
20000096:	c82a                	sw	a0,16(sp)
20000098:	47a000e7          	jalr	1146(zero) # 0 <InterruptVector>
2000009c:	e000f7b7          	lui	a5,0xe000f
200000a0:	479c                	lw	a5,8(a5)
200000a2:	0001                	nop
200000a4:	0037f613          	andi	a2,a5,3
200000a8:	0606                	slli	a2,a2,0x1
200000aa:	0631                	addi	a2,a2,12
200000ac:	00000597          	auipc	a1,0x0
200000b0:	962e                	add	a2,a2,a1
200000b2:	001600e7          	jalr	1(a2)
200000b6:	0001                	nop
200000b8:	0001                	nop
200000ba:	0001                	nop
200000bc:	0001                	nop
200000be:	400127b7          	lui	a5,0x40012
200000c2:	4097a423          	sw	s1,1032(a5) # 40012408 <__global_pointer$+0x20011c08>
200000c6:	4682                	lw	a3,0(sp)
200000c8:	400117b7          	lui	a5,0x40011
200000cc:	40d7a023          	sw	a3,1024(a5) # 40011400 <__global_pointer$+0x20010c00>
200000d0:	4087a823          	sw	s0,1040(a5)
200000d4:	488000e7          	jalr	1160(zero) # 0 <InterruptVector>
200000d8:	4542                	lw	a0,16(sp)
200000da:	40012737          	lui	a4,0x40012
200000de:	40072783          	lw	a5,1024(a4) # 40012400 <__global_pointer$+0x20011c00>
200000e2:	40070313          	addi	t1,a4,1024
200000e6:	8b89                	andi	a5,a5,2
200000e8:	dbfd                	beqz	a5,200000de <ReadTouchPin.constprop.0+0xde>
200000ea:	4792                	lw	a5,4(sp)
200000ec:	ca2a                	sw	a0,20(sp)
200000ee:	400116b7          	lui	a3,0x40011
200000f2:	40f6a023          	sw	a5,1024(a3) # 40011400 <__global_pointer$+0x20010c00>
200000f6:	47a2                	lw	a5,8(sp)
200000f8:	40f6a823          	sw	a5,1040(a3)
200000fc:	04c32783          	lw	a5,76(t1) # ffff804c <__global_pointer$+0xdfff784c>
20000100:	c83e                	sw	a5,16(sp)
		INNER_LOOP( 2 );
20000102:	47a000e7          	jalr	1146(zero) # 0 <InterruptVector>
20000106:	e000f637          	lui	a2,0xe000f
2000010a:	00862283          	lw	t0,8(a2) # e000f008 <__global_pointer$+0xc000e808>
2000010e:	0001                	nop
20000110:	0032f613          	andi	a2,t0,3
20000114:	0606                	slli	a2,a2,0x1
20000116:	0631                	addi	a2,a2,12
20000118:	00000597          	auipc	a1,0x0
2000011c:	962e                	add	a2,a2,a1
2000011e:	001600e7          	jalr	1(a2)
20000122:	0001                	nop
20000124:	0001                	nop
20000126:	0001                	nop
20000128:	0001                	nop
2000012a:	400127b7          	lui	a5,0x40012
2000012e:	4097a423          	sw	s1,1032(a5) # 40012408 <__global_pointer$+0x20011c08>
20000132:	0001                	nop
20000134:	0001                	nop
20000136:	4782                	lw	a5,0(sp)
20000138:	400116b7          	lui	a3,0x40011
2000013c:	40f6a023          	sw	a5,1024(a3) # 40011400 <__global_pointer$+0x20010c00>
20000140:	400117b7          	lui	a5,0x40011
20000144:	4087a823          	sw	s0,1040(a5) # 40011410 <__global_pointer$+0x20010c10>
20000148:	488000e7          	jalr	1160(zero) # 0 <InterruptVector>
2000014c:	4552                	lw	a0,20(sp)
2000014e:	47c2                	lw	a5,16(sp)
20000150:	40012737          	lui	a4,0x40012
20000154:	40072683          	lw	a3,1024(a4) # 40012400 <__global_pointer$+0x20011c00>
20000158:	40070313          	addi	t1,a4,1024
2000015c:	8a89                	andi	a3,a3,2
2000015e:	dafd                	beqz	a3,20000154 <ReadTouchPin.constprop.0+0x154>
20000160:	4712                	lw	a4,4(sp)
20000162:	ca2a                	sw	a0,20(sp)
20000164:	400116b7          	lui	a3,0x40011
20000168:	40e6a023          	sw	a4,1024(a3) # 40011400 <__global_pointer$+0x20010c00>
2000016c:	4722                	lw	a4,8(sp)
2000016e:	40e6a823          	sw	a4,1040(a3)
20000172:	04c32703          	lw	a4,76(t1)
20000176:	973e                	add	a4,a4,a5
20000178:	c83a                	sw	a4,16(sp)
		INNER_LOOP( 4 );
2000017a:	47a000e7          	jalr	1146(zero) # 0 <InterruptVector>
2000017e:	e000f7b7          	lui	a5,0xe000f
20000182:	479c                	lw	a5,8(a5)
20000184:	0037f613          	andi	a2,a5,3
20000188:	0606                	slli	a2,a2,0x1
2000018a:	0631                	addi	a2,a2,12
2000018c:	00000597          	auipc	a1,0x0
20000190:	962e                	add	a2,a2,a1
20000192:	001600e7          	jalr	1(a2)
20000196:	0001                	nop
20000198:	0001                	nop
2000019a:	0001                	nop
2000019c:	0001                	nop
2000019e:	400127b7          	lui	a5,0x40012
200001a2:	4097a423          	sw	s1,1032(a5) # 40012408 <__global_pointer$+0x20011c08>
200001a6:	0001                	nop
200001a8:	0001                	nop
200001aa:	0001                	nop
200001ac:	0001                	nop
200001ae:	4782                	lw	a5,0(sp)
200001b0:	400116b7          	lui	a3,0x40011
200001b4:	40f6a023          	sw	a5,1024(a3) # 40011400 <__global_pointer$+0x20010c00>
200001b8:	400117b7          	lui	a5,0x40011
200001bc:	4087a823          	sw	s0,1040(a5) # 40011410 <__global_pointer$+0x20010c10>
200001c0:	488000e7          	jalr	1160(zero) # 0 <InterruptVector>
200001c4:	4552                	lw	a0,20(sp)
200001c6:	4742                	lw	a4,16(sp)
200001c8:	400126b7          	lui	a3,0x40012
200001cc:	4006a783          	lw	a5,1024(a3) # 40012400 <__global_pointer$+0x20011c00>
200001d0:	40068613          	addi	a2,a3,1024
200001d4:	8b89                	andi	a5,a5,2
200001d6:	dbfd                	beqz	a5,200001cc <ReadTouchPin.constprop.0+0x1cc>
200001d8:	4592                	lw	a1,4(sp)
200001da:	400117b7          	lui	a5,0x40011
200001de:	40078693          	addi	a3,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
200001e2:	40b7a023          	sw	a1,1024(a5)
200001e6:	47a2                	lw	a5,8(sp)
200001e8:	ca9c                	sw	a5,16(a3)
200001ea:	467c                	lw	a5,76(a2)
200001ec:	97ba                	add	a5,a5,a4
200001ee:	953e                	add	a0,a0,a5
200001f0:	47b2                	lw	a5,12(sp)
200001f2:	17fd                	addi	a5,a5,-1
200001f4:	c63e                	sw	a5,12(sp)
	for( i = 0; i < iterations; i++ )
200001f6:	ea0790e3          	bnez	a5,20000096 <ReadTouchPin.constprop.0+0x96>
	}

	return ret;
}
200001fa:	5082                	lw	ra,32(sp)
200001fc:	4472                	lw	s0,28(sp)
200001fe:	44e2                	lw	s1,24(sp)
20000200:	02410113          	addi	sp,sp,36
20000204:	8082                	ret
	...
