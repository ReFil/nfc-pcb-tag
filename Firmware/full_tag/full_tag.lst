
full_tag.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
void handle_reset( void ) __attribute__((section(".text.handle_reset")));

void InterruptVectorDefault( void )
{
#if !defined(FUNCONF_TINYVECTOR) || !FUNCONF_TINYVECTOR
	asm volatile( DEFAULT_INTERRUPT_VECTOR_CONTENTS );
   0:	13e0106f          	j	113e <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	06e4                	addi	s1,sp,844
   a:	0000                	unimp
   c:	0698                	addi	a4,sp,832
	...
  2e:	0000                	unimp
  30:	0698                	addi	a4,sp,832
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0698                	addi	a4,sp,832
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0698                	addi	a4,sp,832
  42:	0000                	unimp
  44:	0698                	addi	a4,sp,832
  46:	0000                	unimp
  48:	0698                	addi	a4,sp,832
  4a:	0000                	unimp
  4c:	0698                	addi	a4,sp,832
  4e:	0000                	unimp
  50:	0698                	addi	a4,sp,832
  52:	0000                	unimp
  54:	0698                	addi	a4,sp,832
  56:	0000                	unimp
  58:	0698                	addi	a4,sp,832
  5a:	0000                	unimp
  5c:	0698                	addi	a4,sp,832
  5e:	0000                	unimp
  60:	0698                	addi	a4,sp,832
  62:	0000                	unimp
  64:	0698                	addi	a4,sp,832
  66:	0000                	unimp
  68:	0698                	addi	a4,sp,832
  6a:	0000                	unimp
  6c:	0698                	addi	a4,sp,832
  6e:	0000                	unimp
  70:	0698                	addi	a4,sp,832
  72:	0000                	unimp
  74:	0698                	addi	a4,sp,832
  76:	0000                	unimp
  78:	0698                	addi	a4,sp,832
  7a:	0000                	unimp
  7c:	0698                	addi	a4,sp,832
  7e:	0000                	unimp
  80:	0698                	addi	a4,sp,832
  82:	0000                	unimp
  84:	0698                	addi	a4,sp,832
  86:	0000                	unimp
  88:	0698                	addi	a4,sp,832
  8a:	0000                	unimp
  8c:	0698                	addi	a4,sp,832
  8e:	0000                	unimp
  90:	0698                	addi	a4,sp,832
  92:	0000                	unimp
  94:	0698                	addi	a4,sp,832
  96:	0000                	unimp
  98:	0698                	addi	a4,sp,832
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <internal_handle_input.constprop.0>:
void handle_debug_input( int numbytes, uint8_t * data ) __attribute__((weak));
void handle_debug_input( int numbytes, uint8_t * data ) { (void)numbytes; (void)data; }

static void internal_handle_input( volatile uint32_t * dmdata0 )
{
	uint32_t dmd0 = *dmdata0;
     11e:	e00007b7          	lui	a5,0xe0000
     122:	0f47a783          	lw	a5,244(a5) # e00000f4 <__global_pointer$+0xbffff8f4>
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 && bytes < 16 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
     126:	8082                	ret

00000128 <_write.constprop.0>:
//     status word = 0xcx = timed out.
// declare as weak to allow overriding.
WEAK int _write(int fd, const char *buf, int size)
{
	(void)fd;
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     128:	e0000737          	lui	a4,0xe0000
     12c:	0f472783          	lw	a5,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
WEAK int _write(int fd, const char *buf, int size)
     130:	1121                	addi	sp,sp,-24
     132:	ca06                	sw	ra,20(sp)
     134:	c822                	sw	s0,16(sp)
     136:	c626                	sw	s1,12(sp)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     138:	0c07f793          	andi	a5,a5,192
     13c:	0c000693          	li	a3,192
     140:	0ad78a63          	beq	a5,a3,1f4 <_write.constprop.0+0xcc>

	char buffer[4] = { 0 };
     144:	c402                	sw	zero,8(sp)
     146:	842e                	mv	s0,a1
	int place = 0;
	uint32_t lastdmd;
	uint32_t timeout = FUNCONF_DEBUGPRINTF_TIMEOUT; // Give up after ~120ms

	if( size == 0 )
     148:	e1f1                	bnez	a1,20c <_write.constprop.0+0xe4>
	{
		lastdmd = (*DMDATA0);
     14a:	0f472783          	lw	a5,244(a4)
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     14e:	c789                	beqz	a5,158 <_write.constprop.0+0x30>
     150:	0807f793          	andi	a5,a5,128
     154:	e391                	bnez	a5,158 <_write.constprop.0+0x30>
     156:	37e1                	jal	11e <internal_handle_input.constprop.0>

		//buf += tosend;
		place += tosend;
	}
	return size;
}
     158:	40d2                	lw	ra,20(sp)
     15a:	8522                	mv	a0,s0
     15c:	4442                	lw	s0,16(sp)
     15e:	44b2                	lw	s1,12(sp)
     160:	0161                	addi	sp,sp,24
     162:	8082                	ret
		int tosend = size - place;
     164:	409407b3          	sub	a5,s0,s1
     168:	471d                	li	a4,7
     16a:	00f75363          	bge	a4,a5,170 <_write.constprop.0+0x48>
     16e:	479d                	li	a5,7
     170:	00080737          	lui	a4,0x80
     174:	0705                	addi	a4,a4,1
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     176:	e0000637          	lui	a2,0xe0000
     17a:	0f462683          	lw	a3,244(a2) # e00000f4 <__global_pointer$+0xbffff8f4>
     17e:	0f460593          	addi	a1,a2,244
     182:	0806f313          	andi	t1,a3,128
     186:	06031163          	bnez	t1,1e8 <_write.constprop.0+0xc0>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     18a:	c691                	beqz	a3,196 <_write.constprop.0+0x6e>
     18c:	c22a                	sw	a0,4(sp)
     18e:	c03e                	sw	a5,0(sp)
     190:	3779                	jal	11e <internal_handle_input.constprop.0>
     192:	4512                	lw	a0,4(sp)
     194:	4782                	lw	a5,0(sp)
     196:	0034                	addi	a3,sp,8
		int tosend = size - place;
     198:	470d                	li	a4,3
     19a:	85b6                	mv	a1,a3
		while( t < tosend )
     19c:	04f74e63          	blt	a4,a5,1f8 <_write.constprop.0+0xd0>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     1a0:	46a2                	lw	a3,8(sp)
     1a2:	e0000737          	lui	a4,0xe0000
		while( t < tosend && t < 3 )
     1a6:	460d                	li	a2,3
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     1a8:	0ed72c23          	sw	a3,248(a4) # e00000f8 <__global_pointer$+0xbffff8f8>
     1ac:	009506b3          	add	a3,a0,s1
		t = 0;
     1b0:	4701                	li	a4,0
			buffer[t+1] = buf[t+place];
     1b2:	0006c283          	lbu	t0,0(a3)
     1b6:	0705                	addi	a4,a4,1
     1b8:	00e58333          	add	t1,a1,a4
     1bc:	00530023          	sb	t0,0(t1)
		while( t < tosend && t < 3 )
     1c0:	00e78563          	beq	a5,a4,1ca <_write.constprop.0+0xa2>
     1c4:	0685                	addi	a3,a3,1
     1c6:	fec716e3          	bne	a4,a2,1b2 <_write.constprop.0+0x8a>
		buffer[0] = 0x80 | (tosend + 4);
     1ca:	00478713          	addi	a4,a5,4
     1ce:	f8076713          	ori	a4,a4,-128
     1d2:	00e10423          	sb	a4,8(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     1d6:	46a2                	lw	a3,8(sp)
     1d8:	e0000737          	lui	a4,0xe0000
		place += tosend;
     1dc:	94be                	add	s1,s1,a5
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     1de:	0ed72a23          	sw	a3,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
	while( place < size )
     1e2:	f884c1e3          	blt	s1,s0,164 <_write.constprop.0+0x3c>
     1e6:	bf8d                	j	158 <_write.constprop.0+0x30>
     1e8:	177d                	addi	a4,a4,-1
			if( timeout-- == 0 )
     1ea:	fb41                	bnez	a4,17a <_write.constprop.0+0x52>
				*DMDATA0 |= 0xc0;
     1ec:	419c                	lw	a5,0(a1)
     1ee:	0c07e793          	ori	a5,a5,192
     1f2:	c19c                	sw	a5,0(a1)
	if( ( *DMDATA0 & 0xc0 ) == 0xc0 ) return 0;
     1f4:	4401                	li	s0,0
     1f6:	b78d                	j	158 <_write.constprop.0+0x30>
			buffer[t-3] = buf[t+place];
     1f8:	00e48633          	add	a2,s1,a4
     1fc:	962a                	add	a2,a2,a0
     1fe:	00064603          	lbu	a2,0(a2)
			t++;
     202:	0705                	addi	a4,a4,1
     204:	0685                	addi	a3,a3,1
			buffer[t-3] = buf[t+place];
     206:	fec68fa3          	sb	a2,-1(a3)
     20a:	bf49                	j	19c <_write.constprop.0+0x74>
	if( size == 0 )
     20c:	4481                	li	s1,0
     20e:	bfd1                	j	1e2 <_write.constprop.0+0xba>

00000210 <i2c_write.constprop.0>:

	return i2c_ret;
}


i2c_err_t i2c_write(const uint8_t addr,		const uint8_t reg,
     210:	7d100693          	li	a3,2001
{
	i2c_err_t i2c_ret = I2C_OK;

	// Wait for the bus to become not busy - set state to I2C_ERR_TIMEOUT on failure
	int32_t timeout = I2C_TIMEOUT;
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
     214:	40005337          	lui	t1,0x40005
     218:	41835703          	lhu	a4,1048(t1) # 40005418 <__global_pointer$+0x20004c18>
     21c:	40030793          	addi	a5,t1,1024
     220:	8b09                	andi	a4,a4,2
     222:	e77d                	bnez	a4,310 <i2c_write.constprop.0+0x100>
		if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}

	if(i2c_ret == I2C_OK)
	{
		// Send a START Signal and wait for it to assert
		I2C1->CTLR1 |= I2C_CTLR1_START;
     224:	0007d703          	lhu	a4,0(a5)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     228:	400052b7          	lui	t0,0x40005
		I2C1->CTLR1 |= I2C_CTLR1_START;
     22c:	0742                	slli	a4,a4,0x10
     22e:	8341                	srli	a4,a4,0x10
     230:	10076713          	ori	a4,a4,256
     234:	00e79023          	sh	a4,0(a5)
	return (status & status_mask) == status_mask; 
     238:	00030737          	lui	a4,0x30
     23c:	0705                	addi	a4,a4,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     23e:	4142d783          	lhu	a5,1044(t0) # 40005414 <__global_pointer$+0x20004c14>
     242:	01079313          	slli	t1,a5,0x10
     246:	4182d783          	lhu	a5,1048(t0)
     24a:	01035313          	srli	t1,t1,0x10
     24e:	07c2                	slli	a5,a5,0x10
     250:	0067e7b3          	or	a5,a5,t1
	return (status & status_mask) == status_mask; 
     254:	8ff9                	and	a5,a5,a4
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     256:	fee794e3          	bne	a5,a4,23e <i2c_write.constprop.0+0x2e>

		// Send the Address and wait for it to finish transmitting
		timeout = I2C_TIMEOUT;
		I2C1->DATAR = (addr << 1) & 0xFE;
     25a:	0aa00793          	li	a5,170
	return (status & status_mask) == status_mask; 
     25e:	000706b7          	lui	a3,0x70
		I2C1->DATAR = (addr << 1) & 0xFE;
     262:	40f29823          	sh	a5,1040(t0)
     266:	7d100313          	li	t1,2001
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     26a:	400052b7          	lui	t0,0x40005
	return (status & status_mask) == status_mask; 
     26e:	08268693          	addi	a3,a3,130 # 70082 <lib_i2c.c.e7f16be4+0x6c0c7>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     272:	4142d703          	lhu	a4,1044(t0) # 40005414 <__global_pointer$+0x20004c14>
     276:	40028793          	addi	a5,t0,1024
     27a:	01071393          	slli	t2,a4,0x10
     27e:	0187d703          	lhu	a4,24(a5)
     282:	0103d393          	srli	t2,t2,0x10
     286:	0742                	slli	a4,a4,0x10
     288:	00776733          	or	a4,a4,t2
	return (status & status_mask) == status_mask; 
     28c:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
     28e:	0ad71e63          	bne	a4,a3,34a <i2c_write.constprop.0+0x13a>


	if(i2c_ret == I2C_OK)
	{
		// Send the Register Byte
		I2C1->DATAR = reg;
     292:	0542                	slli	a0,a0,0x10
     294:	8141                	srli	a0,a0,0x10
     296:	00a79823          	sh	a0,16(a5)
		while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     29a:	40005737          	lui	a4,0x40005
     29e:	41475783          	lhu	a5,1044(a4) # 40005414 <__global_pointer$+0x20004c14>
     2a2:	0807f793          	andi	a5,a5,128
     2a6:	dfe5                	beqz	a5,29e <i2c_write.constprop.0+0x8e>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     2a8:	6505                	lui	a0,0x1
		while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     2aa:	86ae                	mv	a3,a1
		// Write bytes
		uint8_t cbyte = 0;
		while(cbyte < len)
		{
			// Write the byte and wait for it to finish transmitting
			while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     2ac:	40005337          	lui	t1,0x40005
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     2b0:	80050513          	addi	a0,a0,-2048 # 800 <mini_vpprintf+0xea>
			while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     2b4:	41435703          	lhu	a4,1044(t1) # 40005414 <__global_pointer$+0x20004c14>
     2b8:	40030793          	addi	a5,t1,1024
     2bc:	08077713          	andi	a4,a4,128
     2c0:	db75                	beqz	a4,2b4 <i2c_write.constprop.0+0xa4>
			I2C1->DATAR = buf[cbyte];
     2c2:	0006c703          	lbu	a4,0(a3)
     2c6:	00e79823          	sh	a4,16(a5)
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
     2ca:	0147d703          	lhu	a4,20(a5)
     2ce:	10077713          	andi	a4,a4,256
     2d2:	c76d                	beqz	a4,3bc <i2c_write.constprop.0+0x1ac>
     2d4:	0147d703          	lhu	a4,20(a5)
     2d8:	4505                	li	a0,1
     2da:	0742                	slli	a4,a4,0x10
     2dc:	8341                	srli	a4,a4,0x10
     2de:	eff77713          	andi	a4,a4,-257
     2e2:	0742                	slli	a4,a4,0x10
     2e4:	8341                	srli	a4,a4,0x10
     2e6:	00e79a23          	sh	a4,20(a5)
	return (status & status_mask) == status_mask; 
     2ea:	00070737          	lui	a4,0x70
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     2ee:	400055b7          	lui	a1,0x40005
	return (status & status_mask) == status_mask; 
     2f2:	08470713          	addi	a4,a4,132 # 70084 <lib_i2c.c.e7f16be4+0x6c0c9>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     2f6:	4145d783          	lhu	a5,1044(a1) # 40005414 <__global_pointer$+0x20004c14>
     2fa:	01079693          	slli	a3,a5,0x10
     2fe:	4185d783          	lhu	a5,1048(a1)
     302:	82c1                	srli	a3,a3,0x10
     304:	07c2                	slli	a5,a5,0x10
     306:	8fd5                	or	a5,a5,a3
	return (status & status_mask) == status_mask; 
     308:	8ff9                	and	a5,a5,a4

			++cbyte;
		}

		// Wait for the bus to finish transmitting
		while(!i2c_status(I2C_EVENT_MASTER_BYTE_TRANSMITTED));
     30a:	fee796e3          	bne	a5,a4,2f6 <i2c_write.constprop.0+0xe6>
     30e:	a01d                	j	334 <i2c_write.constprop.0+0x124>
     310:	16fd                	addi	a3,a3,-1
		if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     312:	f299                	bnez	a3,218 <i2c_write.constprop.0+0x8>
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
     314:	0147d703          	lhu	a4,20(a5)
     318:	10077713          	andi	a4,a4,256
     31c:	cb1d                	beqz	a4,352 <i2c_write.constprop.0+0x142>
     31e:	0147d703          	lhu	a4,20(a5)
     322:	4505                	li	a0,1
     324:	0742                	slli	a4,a4,0x10
     326:	8341                	srli	a4,a4,0x10
     328:	eff77713          	andi	a4,a4,-257
     32c:	0742                	slli	a4,a4,0x10
     32e:	8341                	srli	a4,a4,0x10
     330:	00e79a23          	sh	a4,20(a5)
	}

	// Send a STOP Condition, to aut-reset for the next operation
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     334:	40005737          	lui	a4,0x40005
     338:	40075783          	lhu	a5,1024(a4) # 40005400 <__global_pointer$+0x20004c00>
     33c:	07c2                	slli	a5,a5,0x10
     33e:	83c1                	srli	a5,a5,0x10
     340:	2007e793          	ori	a5,a5,512
     344:	40f71023          	sh	a5,1024(a4)

	return i2c_ret;
}
     348:	8082                	ret
     34a:	137d                	addi	t1,t1,-1
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     34c:	f20313e3          	bnez	t1,272 <i2c_write.constprop.0+0x62>
     350:	b7d1                	j	314 <i2c_write.constprop.0+0x104>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
     352:	0147d703          	lhu	a4,20(a5)
     356:	40077713          	andi	a4,a4,1024
     35a:	cf09                	beqz	a4,374 <i2c_write.constprop.0+0x164>
     35c:	0147d703          	lhu	a4,20(a5)
     360:	4509                	li	a0,2
     362:	0742                	slli	a4,a4,0x10
     364:	8341                	srli	a4,a4,0x10
     366:	bff77713          	andi	a4,a4,-1025
     36a:	0742                	slli	a4,a4,0x10
     36c:	8341                	srli	a4,a4,0x10
     36e:	00e79a23          	sh	a4,20(a5)
     372:	b7c9                	j	334 <i2c_write.constprop.0+0x124>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
     374:	0147d703          	lhu	a4,20(a5)
     378:	20077713          	andi	a4,a4,512
     37c:	cf09                	beqz	a4,396 <i2c_write.constprop.0+0x186>
     37e:	0147d703          	lhu	a4,20(a5)
     382:	450d                	li	a0,3
     384:	0742                	slli	a4,a4,0x10
     386:	8341                	srli	a4,a4,0x10
     388:	dff77713          	andi	a4,a4,-513
     38c:	0742                	slli	a4,a4,0x10
     38e:	8341                	srli	a4,a4,0x10
     390:	00e79a23          	sh	a4,20(a5)
     394:	b745                	j	334 <i2c_write.constprop.0+0x124>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     396:	0147d703          	lhu	a4,20(a5)
	if(i2c_err == I2C_OK) i2c_err = I2C_ERR_BUSY;
     39a:	4515                	li	a0,5
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     39c:	01471693          	slli	a3,a4,0x14
     3a0:	f806dae3          	bgez	a3,334 <i2c_write.constprop.0+0x124>
     3a4:	0147d703          	lhu	a4,20(a5)
     3a8:	76fd                	lui	a3,0xfffff
     3aa:	7ff68693          	addi	a3,a3,2047 # fffff7ff <__global_pointer$+0xdfffefff>
     3ae:	0742                	slli	a4,a4,0x10
     3b0:	8341                	srli	a4,a4,0x10
     3b2:	8f75                	and	a4,a4,a3
     3b4:	00e79a23          	sh	a4,20(a5)
     3b8:	4511                	li	a0,4
     3ba:	bfad                	j	334 <i2c_write.constprop.0+0x124>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
     3bc:	0147d703          	lhu	a4,20(a5)
     3c0:	40077713          	andi	a4,a4,1024
     3c4:	cf09                	beqz	a4,3de <i2c_write.constprop.0+0x1ce>
     3c6:	0147d703          	lhu	a4,20(a5)
     3ca:	4509                	li	a0,2
     3cc:	0742                	slli	a4,a4,0x10
     3ce:	8341                	srli	a4,a4,0x10
     3d0:	bff77713          	andi	a4,a4,-1025
     3d4:	0742                	slli	a4,a4,0x10
     3d6:	8341                	srli	a4,a4,0x10
     3d8:	00e79a23          	sh	a4,20(a5)
     3dc:	b739                	j	2ea <i2c_write.constprop.0+0xda>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
     3de:	0147d703          	lhu	a4,20(a5)
     3e2:	20077713          	andi	a4,a4,512
     3e6:	cf09                	beqz	a4,400 <i2c_write.constprop.0+0x1f0>
     3e8:	0147d703          	lhu	a4,20(a5)
     3ec:	450d                	li	a0,3
     3ee:	0742                	slli	a4,a4,0x10
     3f0:	8341                	srli	a4,a4,0x10
     3f2:	dff77713          	andi	a4,a4,-513
     3f6:	0742                	slli	a4,a4,0x10
     3f8:	8341                	srli	a4,a4,0x10
     3fa:	00e79a23          	sh	a4,20(a5)
     3fe:	b5f5                	j	2ea <i2c_write.constprop.0+0xda>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     400:	0147d703          	lhu	a4,20(a5)
     404:	0742                	slli	a4,a4,0x10
     406:	8341                	srli	a4,a4,0x10
     408:	8f69                	and	a4,a4,a0
     40a:	cf09                	beqz	a4,424 <i2c_write.constprop.0+0x214>
     40c:	0147d703          	lhu	a4,20(a5)
     410:	76fd                	lui	a3,0xfffff
     412:	7ff68693          	addi	a3,a3,2047 # fffff7ff <__global_pointer$+0xdfffefff>
     416:	0742                	slli	a4,a4,0x10
     418:	8341                	srli	a4,a4,0x10
     41a:	8f75                	and	a4,a4,a3
     41c:	00e79a23          	sh	a4,20(a5)
     420:	4511                	li	a0,4
     422:	b5e1                	j	2ea <i2c_write.constprop.0+0xda>
     424:	0685                	addi	a3,a3,1
		while(cbyte < len)
     426:	40b687b3          	sub	a5,a3,a1
     42a:	0ff7f793          	andi	a5,a5,255
     42e:	e8c7e3e3          	bltu	a5,a2,2b4 <i2c_write.constprop.0+0xa4>
     432:	4501                	li	a0,0
     434:	bd5d                	j	2ea <i2c_write.constprop.0+0xda>

00000436 <start_blinking>:
		// printf("Button 2 pressed\n");
	}
}

void start_blinking(uint8_t long_count, uint8_t short_count){
	if((SysTick->CNT)- blink_start >= BLINK_SPACE_TIME){
     436:	200007b7          	lui	a5,0x20000
     43a:	e000f637          	lui	a2,0xe000f
     43e:	00078793          	mv	a5,a5
     442:	4398                	lw	a4,0(a5)
     444:	4614                	lw	a3,8(a2)
     446:	8e99                	sub	a3,a3,a4
     448:	0016e737          	lui	a4,0x16e
     44c:	35f70713          	addi	a4,a4,863 # 16e35f <lib_i2c.c.e7f16be4+0x16a3a4>
     450:	02d77663          	bgeu	a4,a3,47c <start_blinking+0x46>
		target_long_blinks = long_count * 2;  
     454:	0506                	slli	a0,a0,0x1
     456:	80a18923          	sb	a0,-2030(gp) # 20000012 <target_long_blinks>
		target_short_blinks = short_count * 2;  
     45a:	0586                	slli	a1,a1,0x1
     45c:	80b189a3          	sb	a1,-2029(gp) # 20000013 <target_short_blinks>
		blink_start = (SysTick->CNT);
     460:	4618                	lw	a4,8(a2)
     462:	c398                	sw	a4,0(a5)
		is_blinking = true;
     464:	4705                	li	a4,1
     466:	80e185a3          	sb	a4,-2037(gp) # 2000000b <is_blinking>
		led_state = false;
     46a:	80018823          	sb	zero,-2032(gp) # 20000010 <led_state>
		GPIOD->OUTDR &= ~(1<<3);
     46e:	400117b7          	lui	a5,0x40011
     472:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
     476:	9b5d                	andi	a4,a4,-9
     478:	40e7a623          	sw	a4,1036(a5)
		// printf("Blink start, long %d, short %d", target_long_blinks, target_short_blinks);
	}
}
     47c:	8082                	ret

0000047e <mini_itoa.part.0>:
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
     47e:	1101                	addi	sp,sp,-32
     480:	ce06                	sw	ra,28(sp)
     482:	cc22                	sw	s0,24(sp)
     484:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     486:	c002                	sw	zero,0(sp)
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
     488:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     48a:	00055763          	bgez	a0,498 <mini_itoa.part.0+0x1a>
     48e:	e689                	bnez	a3,498 <mini_itoa.part.0+0x1a>
		negative = 1;
     490:	4785                	li	a5,1
		value = -value;
     492:	40a00333          	neg	t1,a0
		negative = 1;
     496:	c03e                	sw	a5,0(sp)
     498:	06100413          	li	s0,97
     49c:	c219                	beqz	a2,4a2 <mini_itoa.part.0+0x24>
     49e:	04100413          	li	s0,65
	int	negative = 0;
     4a2:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     4a4:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     4a6:	851a                	mv	a0,t1
     4a8:	c83a                	sw	a4,16(sp)
     4aa:	c21a                	sw	t1,4(sp)
     4ac:	c62e                	sw	a1,12(sp)
     4ae:	c41a                	sw	t1,8(sp)
     4b0:	3115                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     4b2:	47a5                	li	a5,9
     4b4:	4322                	lw	t1,8(sp)
     4b6:	45b2                	lw	a1,12(sp)
     4b8:	4742                	lw	a4,16(sp)
     4ba:	0ff57693          	andi	a3,a0,255
     4be:	06a7e163          	bltu	a5,a0,520 <mini_itoa.part.0+0xa2>
     4c2:	03068693          	addi	a3,a3,48
     4c6:	0ff6f693          	andi	a3,a3,255
     4ca:	00148793          	addi	a5,s1,1
     4ce:	00d48023          	sb	a3,0(s1)
		value /= radix;
     4d2:	851a                	mv	a0,t1
     4d4:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     4d6:	c63e                	sw	a5,12(sp)
		value /= radix;
     4d8:	c42e                	sw	a1,8(sp)
     4da:	36f9                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
     4dc:	4692                	lw	a3,4(sp)
     4de:	45a2                	lw	a1,8(sp)
     4e0:	47b2                	lw	a5,12(sp)
     4e2:	4742                	lw	a4,16(sp)
		value /= radix;
     4e4:	832a                	mv	t1,a0
	} while (value > 0);
     4e6:	02b6fb63          	bgeu	a3,a1,51c <mini_itoa.part.0+0x9e>
	if (negative)
     4ea:	4682                	lw	a3,0(sp)
     4ec:	c699                	beqz	a3,4fa <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     4ee:	02d00693          	li	a3,45
     4f2:	00d78023          	sb	a3,0(a5)
     4f6:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     4fa:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     4fe:	01f55693          	srli	a3,a0,0x1f
     502:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     504:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     508:	8685                	srai	a3,a3,0x1
     50a:	4601                	li	a2,0
     50c:	17fd                	addi	a5,a5,-1
     50e:	00d64b63          	blt	a2,a3,524 <mini_itoa.part.0+0xa6>
}
     512:	40f2                	lw	ra,28(sp)
     514:	4462                	lw	s0,24(sp)
     516:	44d2                	lw	s1,20(sp)
     518:	6105                	addi	sp,sp,32
     51a:	8082                	ret
	} while (value > 0);
     51c:	84be                	mv	s1,a5
     51e:	b761                	j	4a6 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     520:	96a2                	add	a3,a3,s0
     522:	b755                	j	4c6 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     524:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     528:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     52c:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     530:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     532:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     536:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     53a:	bfc9                	j	50c <mini_itoa.part.0+0x8e>

0000053c <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
     53c:	e000f7b7          	lui	a5,0xe000f
     540:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     542:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     546:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     548:	471c                	lw	a5,8(a4)
     54a:	8f89                	sub	a5,a5,a0
     54c:	fe07cee3          	bltz	a5,548 <DelaySysTick+0xc>
	uint32_t targend = SysTick->CNTL + n;
	while( ((int32_t)( SysTick->CNTL - targend )) < 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     550:	8082                	ret

00000552 <PrintN>:
	while( (*DMDATA0) & 0x80 );
     552:	e0000737          	lui	a4,0xe0000
     556:	0f472783          	lw	a5,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
     55a:	0807f793          	andi	a5,a5,128
     55e:	ffe5                	bnez	a5,556 <PrintN+0x4>
	*DMDATA0 = 0x78302088; //" 0x"
     560:	783027b7          	lui	a5,0x78302
     564:	08878793          	addi	a5,a5,136 # 78302088 <__global_pointer$+0x58301888>
     568:	0ef72a23          	sw	a5,244(a4)
		while( (*DMDATA0) & 0x80 );
     56c:	e0000637          	lui	a2,0xe0000
	for( shift = 28; shift >= 0; shift -= 4 )
     570:	4771                	li	a4,28
		s += ( s < 10 ) ? '0' : ('a' - 10);
     572:	4325                	li	t1,9
	for( shift = 28; shift >= 0; shift -= 4 )
     574:	55f1                	li	a1,-4
		while( (*DMDATA0) & 0x80 );
     576:	0f462783          	lw	a5,244(a2) # e00000f4 <__global_pointer$+0xbffff8f4>
     57a:	0807f793          	andi	a5,a5,128
     57e:	ffe5                	bnez	a5,576 <PrintN+0x24>
		int s = (n>>shift) & 0xf;
     580:	00e557b3          	srl	a5,a0,a4
     584:	00f7f693          	andi	a3,a5,15
		s += ( s < 10 ) ? '0' : ('a' - 10);
     588:	03000793          	li	a5,48
     58c:	00d35463          	bge	t1,a3,594 <PrintN+0x42>
     590:	05700793          	li	a5,87
     594:	97b6                	add	a5,a5,a3
		*DMDATA0 = 0x85 | (s<<8); //" 0x"
     596:	07a2                	slli	a5,a5,0x8
     598:	0857e793          	ori	a5,a5,133
     59c:	0ef62a23          	sw	a5,244(a2)
	for( shift = 28; shift >= 0; shift -= 4 )
     5a0:	1771                	addi	a4,a4,-4
     5a2:	fcb71ae3          	bne	a4,a1,576 <PrintN+0x24>
}
     5a6:	8082                	ret

000005a8 <mini_pad>:
	int overflow = 0;
     5a8:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     5aa:	c2ad                	beqz	a3,60c <mini_pad+0x64>
	if(len > pad_to) {
     5ac:	00b6d463          	bge	a3,a1,5b4 <mini_pad+0xc>
     5b0:	85b6                	mv	a1,a3
		overflow = 1;
     5b2:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     5b4:	8e8d                	sub	a3,a3,a1
     5b6:	87ba                	mv	a5,a4
     5b8:	00d703b3          	add	t2,a4,a3
     5bc:	40f382b3          	sub	t0,t2,a5
     5c0:	04504863          	bgtz	t0,610 <mini_pad+0x68>
     5c4:	0006d363          	bgez	a3,5ca <mini_pad+0x22>
     5c8:	4681                	li	a3,0
     5ca:	96ba                	add	a3,a3,a4
     5cc:	4781                	li	a5,0
	for(i = len; i > 0; i --) {
     5ce:	40f58633          	sub	a2,a1,a5
     5d2:	04c04363          	bgtz	a2,618 <mini_pad+0x70>
     5d6:	0005d363          	bgez	a1,5dc <mini_pad+0x34>
     5da:	4581                	li	a1,0
     5dc:	95b6                	add	a1,a1,a3
	len = pbuffer - buffer;
     5de:	40e58533          	sub	a0,a1,a4
	if(overflow) {
     5e2:	02030463          	beqz	t1,60a <mini_pad+0x62>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     5e6:	02b77263          	bgeu	a4,a1,60a <mini_pad+0x62>
			*(pbuffer-- - 1) = '*';
     5ea:	02a00793          	li	a5,42
     5ee:	fef58fa3          	sb	a5,-1(a1)
     5f2:	fff58693          	addi	a3,a1,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     5f6:	00d77a63          	bgeu	a4,a3,60a <mini_pad+0x62>
			*(pbuffer-- - 1) = '*';
     5fa:	fef58f23          	sb	a5,-2(a1)
     5fe:	ffe58693          	addi	a3,a1,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     602:	00d77463          	bgeu	a4,a3,60a <mini_pad+0x62>
			*(pbuffer-- - 1) = '*';
     606:	fef58ea3          	sb	a5,-3(a1)
}
     60a:	8082                	ret
	if(pad_to == 0) pad_to = len;
     60c:	86ae                	mv	a3,a1
     60e:	b75d                	j	5b4 <mini_pad+0xc>
		*(pbuffer++) = pad_char;
     610:	0785                	addi	a5,a5,1
     612:	fec78fa3          	sb	a2,-1(a5)
	for(i = pad_to - len; i > 0; i --) {
     616:	b75d                	j	5bc <mini_pad+0x14>
		*(pbuffer++) = *(ptr++);
     618:	00f50633          	add	a2,a0,a5
     61c:	00064283          	lbu	t0,0(a2)
     620:	00f68633          	add	a2,a3,a5
     624:	0785                	addi	a5,a5,1
     626:	00560023          	sb	t0,0(a2)
	for(i = len; i > 0; i --) {
     62a:	b755                	j	5ce <mini_pad+0x26>

0000062c <__puts_uart>:
{
     62c:	1151                	addi	sp,sp,-12
     62e:	c222                	sw	s0,4(sp)
     630:	c406                	sw	ra,8(sp)
     632:	842e                	mv	s0,a1
	_write( 0, s, len );
     634:	3cd5                	jal	128 <_write.constprop.0>
}
     636:	40a2                	lw	ra,8(sp)
     638:	8522                	mv	a0,s0
     63a:	4412                	lw	s0,4(sp)
     63c:	0131                	addi	sp,sp,12
     63e:	8082                	ret

00000640 <SystemInit>:
	#endif
#elif defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
     640:	400227b7          	lui	a5,0x40022
     644:	4705                	li	a4,1
     646:	c398                	sw	a4,0(a5)
#if defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
     648:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     64c:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
     650:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     654:	08170713          	addi	a4,a4,129 # 1080081 <lib_i2c.c.e7f16be4+0x107c0c6>
     658:	c398                	sw	a4,0(a5)
	#else
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
     65a:	009f0737          	lui	a4,0x9f0
     65e:	c798                	sw	a4,8(a5)

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
     660:	40021737          	lui	a4,0x40021
     664:	431c                	lw	a5,0(a4)
     666:	00679693          	slli	a3,a5,0x6
     66a:	fe06dde3          	bgez	a3,664 <SystemInit+0x24>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     66e:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     670:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     674:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
     676:	0027e793          	ori	a5,a5,2
     67a:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     67c:	4721                	li	a4,8
     67e:	42dc                	lw	a5,4(a3)
     680:	8bb1                	andi	a5,a5,12
     682:	fee79ee3          	bne	a5,a4,67e <SystemInit+0x3e>
	*DMDATA1 = 0x00;
     686:	e00007b7          	lui	a5,0xe0000
     68a:	0e07ac23          	sw	zero,248(a5) # e00000f8 <__global_pointer$+0xbffff8f8>
	*DMDATA0 = 0x80;
     68e:	08000713          	li	a4,128
     692:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     696:	8082                	ret

00000698 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
     698:	34102573          	csrr	a0,mepc
	PrintN( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
     69c:	3d5d                	jal	552 <PrintN>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
     69e:	30002573          	csrr	a0,mstatus
	PrintN( __get_MSTATUS() );
     6a2:	3d45                	jal	552 <PrintN>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
     6a4:	34302573          	csrr	a0,mtval
	PrintN( __get_MTVAL() );
     6a8:	356d                	jal	552 <PrintN>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
     6aa:	34202573          	csrr	a0,mcause
	PrintN( __get_MCAUSE() );
     6ae:	3555                	jal	552 <PrintN>
	while( (*DMDATA0) & 0x80 );
     6b0:	e0000737          	lui	a4,0xe0000
     6b4:	0f472783          	lw	a5,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
     6b8:	0807f793          	andi	a5,a5,128
     6bc:	ffe5                	bnez	a5,6b4 <ADC1_2_IRQHandler+0x1c>
	*DMDATA0 = 0x0a85;
     6be:	6785                	lui	a5,0x1
     6c0:	a8578793          	addi	a5,a5,-1403 # a85 <main+0xdd>
     6c4:	0ef72a23          	sw	a5,244(a4)
	while( (*DMDATA0) & 0x80 );
     6c8:	e0000737          	lui	a4,0xe0000
     6cc:	0f472783          	lw	a5,244(a4) # e00000f4 <__global_pointer$+0xbffff8f4>
     6d0:	0807f793          	andi	a5,a5,128
     6d4:	ffe5                	bnez	a5,6cc <ADC1_2_IRQHandler+0x34>
	*DMDATA0 = 0xaaaaaa83;
     6d6:	aaaab7b7          	lui	a5,0xaaaab
     6da:	a8378793          	addi	a5,a5,-1405 # aaaaaa83 <__global_pointer$+0x8aaaa283>
     6de:	0ef72a23          	sw	a5,244(a4)
	asm volatile( "1: j 1b" );
     6e2:	a001                	j	6e2 <ADC1_2_IRQHandler+0x4a>

000006e4 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     6e4:	40021737          	lui	a4,0x40021
     6e8:	471c                	lw	a5,8(a4)
     6ea:	008006b7          	lui	a3,0x800
     6ee:	8fd5                	or	a5,a5,a3
     6f0:	c71c                	sw	a5,8(a4)

000006f2 <memset>:
WEAK void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     6f2:	962a                	add	a2,a2,a0
     6f4:	87aa                	mv	a5,a0
     6f6:	00c79363          	bne	a5,a2,6fc <memset+0xa>
     6fa:	8082                	ret
     6fc:	00b78023          	sb	a1,0(a5)
     700:	0785                	addi	a5,a5,1
     702:	bfd5                	j	6f6 <memset+0x4>

00000704 <strlen>:
{
     704:	87aa                	mv	a5,a0
	for (; *s; s++);
     706:	0007c703          	lbu	a4,0(a5)
     70a:	e701                	bnez	a4,712 <strlen+0xe>
}
     70c:	40a78533          	sub	a0,a5,a0
     710:	8082                	ret
	for (; *s; s++);
     712:	0785                	addi	a5,a5,1
     714:	bfcd                	j	706 <strlen+0x2>

00000716 <mini_vpprintf>:
{
     716:	fa410113          	addi	sp,sp,-92
     71a:	c8a6                	sw	s1,80(sp)
     71c:	cc86                	sw	ra,88(sp)
     71e:	caa2                	sw	s0,84(sp)
     720:	c02a                	sw	a0,0(sp)
     722:	c22e                	sw	a1,4(sp)
     724:	84b2                	mv	s1,a2
     726:	87b6                	mv	a5,a3
	int n = 0;
     728:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     72a:	0004c703          	lbu	a4,0(s1)
     72e:	00148413          	addi	s0,s1,1
     732:	00e10fa3          	sb	a4,31(sp)
     736:	eb01                	bnez	a4,746 <mini_vpprintf+0x30>
}
     738:	40e6                	lw	ra,88(sp)
     73a:	4456                	lw	s0,84(sp)
     73c:	4542                	lw	a0,16(sp)
     73e:	44c6                	lw	s1,80(sp)
     740:	05c10113          	addi	sp,sp,92
     744:	8082                	ret
		if (ch!='%') {
     746:	02500693          	li	a3,37
     74a:	00d70f63          	beq	a4,a3,768 <mini_vpprintf+0x52>
     74e:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     750:	4612                	lw	a2,4(sp)
     752:	4782                	lw	a5,0(sp)
     754:	4585                	li	a1,1
     756:	01f10513          	addi	a0,sp,31
     75a:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     75c:	84a2                	mv	s1,s0
		n = n + len;
     75e:	47c2                	lw	a5,16(sp)
     760:	97aa                	add	a5,a5,a0
     762:	c83e                	sw	a5,16(sp)
     764:	47a2                	lw	a5,8(sp)
     766:	b7d1                	j	72a <mini_vpprintf+0x14>
			ch=*(fmt++);
     768:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     76c:	03000613          	li	a2,48
			ch=*(fmt++);
     770:	00248713          	addi	a4,s1,2
     774:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     778:	03000413          	li	s0,48
     77c:	08c69063          	bne	a3,a2,7fc <mini_vpprintf+0xe6>
				ch=*(fmt++);
     780:	84ba                	mv	s1,a4
     782:	4601                	li	a2,0
     784:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     786:	4525                	li	a0,9
     788:	a811                	j	79c <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     78a:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     78e:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     790:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     792:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     796:	0706                	slli	a4,a4,0x1
     798:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     79a:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     79c:	fd068593          	addi	a1,a3,-48 # 7fffd0 <lib_i2c.c.e7f16be4+0x7fc015>
     7a0:	0ff5f313          	andi	t1,a1,255
     7a4:	fe6573e3          	bgeu	a0,t1,78a <mini_vpprintf+0x74>
     7a8:	c219                	beqz	a2,7ae <mini_vpprintf+0x98>
     7aa:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     7ae:	c63a                	sw	a4,12(sp)
     7b0:	4661                	li	a2,24
     7b2:	00e65363          	bge	a2,a4,7b8 <mini_vpprintf+0xa2>
     7b6:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     7b8:	06c00593          	li	a1,108
			char l = 0;
     7bc:	4601                	li	a2,0
			if (ch == 'l') {
     7be:	00b69863          	bne	a3,a1,7ce <mini_vpprintf+0xb8>
				ch=*(fmt++);
     7c2:	0004c683          	lbu	a3,0(s1)
				l = 1;
     7c6:	4605                	li	a2,1
				ch=*(fmt++);
     7c8:	0485                	addi	s1,s1,1
     7ca:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     7ce:	01f14683          	lbu	a3,31(sp)
     7d2:	06400593          	li	a1,100
     7d6:	06b68363          	beq	a3,a1,83c <mini_vpprintf+0x126>
     7da:	02d5e463          	bltu	a1,a3,802 <mini_vpprintf+0xec>
     7de:	05800713          	li	a4,88
     7e2:	0ae68063          	beq	a3,a4,882 <mini_vpprintf+0x16c>
     7e6:	06300713          	li	a4,99
     7ea:	0ae68d63          	beq	a3,a4,8a4 <mini_vpprintf+0x18e>
     7ee:	d6a9                	beqz	a3,738 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     7f0:	4612                	lw	a2,4(sp)
     7f2:	c43e                	sw	a5,8(sp)
     7f4:	4585                	li	a1,1
     7f6:	01f10513          	addi	a0,sp,31
     7fa:	a0bd                	j	868 <mini_vpprintf+0x152>
			char pad_char = ' ';
     7fc:	02000413          	li	s0,32
     800:	b741                	j	780 <mini_vpprintf+0x6a>
			switch (ch) {
     802:	07500593          	li	a1,117
     806:	02b68b63          	beq	a3,a1,83c <mini_vpprintf+0x126>
     80a:	07800613          	li	a2,120
     80e:	06c68a63          	beq	a3,a2,882 <mini_vpprintf+0x16c>
     812:	07300613          	li	a2,115
     816:	fcc69de3          	bne	a3,a2,7f0 <mini_vpprintf+0xda>
     81a:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     81c:	00478713          	addi	a4,a5,4
     820:	439c                	lw	a5,0(a5)
     822:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     824:	853e                	mv	a0,a5
     826:	ca3e                	sw	a5,20(sp)
     828:	3df1                	jal	704 <strlen>
					if (pad_to > 0) {
     82a:	4762                	lw	a4,24(sp)
     82c:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     82e:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     830:	c759                	beqz	a4,8be <mini_vpprintf+0x1a8>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     832:	46b2                	lw	a3,12(sp)
     834:	1838                	addi	a4,sp,56
     836:	8622                	mv	a2,s0
     838:	853e                	mv	a0,a5
     83a:	a01d                	j	860 <mini_vpprintf+0x14a>
					if(l) {
     83c:	00478713          	addi	a4,a5,4
     840:	c43a                	sw	a4,8(sp)
     842:	c615                	beqz	a2,86e <mini_vpprintf+0x158>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     844:	f8b68693          	addi	a3,a3,-117
     848:	1018                	addi	a4,sp,32
     84a:	0016b693          	seqz	a3,a3
     84e:	4388                	lw	a0,0(a5)
     850:	4601                	li	a2,0
     852:	45a9                	li	a1,10
     854:	312d                	jal	47e <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     856:	46b2                	lw	a3,12(sp)
     858:	1838                	addi	a4,sp,56
     85a:	8622                	mv	a2,s0
     85c:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     85e:	1008                	addi	a0,sp,32
     860:	33a1                	jal	5a8 <mini_pad>
					len = puts(bf, len, buf);
     862:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     864:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     866:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     868:	4782                	lw	a5,0(sp)
     86a:	9782                	jalr	a5
					break;
     86c:	bdcd                	j	75e <mini_vpprintf+0x48>
						if(ch == 'u') {
     86e:	07500713          	li	a4,117
     872:	00e69563          	bne	a3,a4,87c <mini_vpprintf+0x166>
	if (radix > 16)
     876:	1018                	addi	a4,sp,32
     878:	4685                	li	a3,1
     87a:	bfd1                	j	84e <mini_vpprintf+0x138>
     87c:	1018                	addi	a4,sp,32
     87e:	4681                	li	a3,0
     880:	b7f9                	j	84e <mini_vpprintf+0x138>
					if(l) {
     882:	4388                	lw	a0,0(a5)
     884:	00478713          	addi	a4,a5,4
     888:	fa868613          	addi	a2,a3,-88
     88c:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     88e:	4685                	li	a3,1
     890:	1018                	addi	a4,sp,32
     892:	00163613          	seqz	a2,a2
     896:	45c1                	li	a1,16
     898:	36dd                	jal	47e <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     89a:	46b2                	lw	a3,12(sp)
     89c:	85aa                	mv	a1,a0
     89e:	1838                	addi	a4,sp,56
     8a0:	8622                	mv	a2,s0
     8a2:	bf75                	j	85e <mini_vpprintf+0x148>
					ch = (char)(va_arg(va, int));
     8a4:	00478713          	addi	a4,a5,4
     8a8:	439c                	lw	a5,0(a5)
     8aa:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     8ac:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     8ae:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     8b2:	1838                	addi	a4,sp,56
     8b4:	8622                	mv	a2,s0
     8b6:	4585                	li	a1,1
     8b8:	01f10513          	addi	a0,sp,31
     8bc:	b755                	j	860 <mini_vpprintf+0x14a>
						len = puts(ptr, len, buf);
     8be:	4612                	lw	a2,4(sp)
     8c0:	853e                	mv	a0,a5
     8c2:	b75d                	j	868 <mini_vpprintf+0x152>

000008c4 <puts>:
{
     8c4:	1151                	addi	sp,sp,-12
     8c6:	c406                	sw	ra,8(sp)
     8c8:	c222                	sw	s0,4(sp)
     8ca:	c026                	sw	s1,0(sp)
     8cc:	84aa                	mv	s1,a0
	int sl = strlen( s );
     8ce:	3d1d                	jal	704 <strlen>
     8d0:	842a                	mv	s0,a0
	_write(0, s, sl );
     8d2:	85aa                	mv	a1,a0
     8d4:	8526                	mv	a0,s1
     8d6:	853ff0ef          	jal	ra,128 <_write.constprop.0>
	_write(0, "\n", 1 );
     8da:	6505                	lui	a0,0x1
     8dc:	4585                	li	a1,1
     8de:	1bc50513          	addi	a0,a0,444 # 11bc <handle_reset+0x7e>
     8e2:	847ff0ef          	jal	ra,128 <_write.constprop.0>
}
     8e6:	40a2                	lw	ra,8(sp)
     8e8:	00140513          	addi	a0,s0,1
     8ec:	4412                	lw	s0,4(sp)
     8ee:	4482                	lw	s1,0(sp)
     8f0:	0131                	addi	sp,sp,12
     8f2:	8082                	ret

000008f4 <read_bank_into_ntag>:
	GPIOD->OUTDR &= ~(1<<3);
     8f4:	400117b7          	lui	a5,0x40011
     8f8:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
int read_bank_into_ntag(int bank) {
     8fc:	1151                	addi	sp,sp,-12
     8fe:	c222                	sw	s0,4(sp)
	GPIOD->OUTDR &= ~(1<<3);
     900:	9b5d                	andi	a4,a4,-9
int read_bank_into_ntag(int bank) {
     902:	c406                	sw	ra,8(sp)
     904:	c026                	sw	s1,0(sp)
	GPIOD->OUTDR &= ~(1<<3);
     906:	40e7a623          	sw	a4,1036(a5)
		uint32_t *ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (i<<4));
     90a:	00251713          	slli	a4,a0,0x2
     90e:	6505                	lui	a0,0x1
     910:	2ac50513          	addi	a0,a0,684 # 12ac <bank_addrs>
     914:	953a                	add	a0,a0,a4
     916:	4100                	lw	s0,0(a0)
	for(int i=0; i<55; i++) {
     918:	4781                	li	a5,0
		uint32_t *ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (i<<4));
     91a:	00479593          	slli	a1,a5,0x4
		i2c_err_t i2c_stat = i2c_write(NTAG_ADDR, (i+1), (uint8_t*) ptr, 16);
     91e:	00178493          	addi	s1,a5,1
     922:	4641                	li	a2,16
     924:	95a2                	add	a1,a1,s0
     926:	0ff4f513          	andi	a0,s1,255
     92a:	30dd                	jal	210 <i2c_write.constprop.0>
		if(i2c_stat != I2C_OK) 
     92c:	c509                	beqz	a0,936 <read_bank_into_ntag+0x42>
			printf("Error Using the I2C Bus\n");
     92e:	6505                	lui	a0,0x1
     930:	1c050513          	addi	a0,a0,448 # 11c0 <handle_reset+0x82>
     934:	3f41                	jal	8c4 <puts>
		Delay_Us(160);
     936:	6509                	lui	a0,0x2
     938:	e0050513          	addi	a0,a0,-512 # 1e00 <ch32fun.c.60bab88f+0x83e>
     93c:	3101                	jal	53c <DelaySysTick>
	for(int i=0; i<55; i++) {
     93e:	03700713          	li	a4,55
     942:	87a6                	mv	a5,s1
     944:	fce49be3          	bne	s1,a4,91a <read_bank_into_ntag+0x26>
	i2c_err_t i2c_stat = i2c_write(NTAG_ADDR, (56), (uint8_t*) ptr, 8);
     948:	4621                	li	a2,8
     94a:	38040593          	addi	a1,s0,896
     94e:	03800513          	li	a0,56
     952:	387d                	jal	210 <i2c_write.constprop.0>
	if(i2c_stat != I2C_OK) 
     954:	c509                	beqz	a0,95e <read_bank_into_ntag+0x6a>
		printf("Error Using the I2C Bus\n");
     956:	6505                	lui	a0,0x1
     958:	1c050513          	addi	a0,a0,448 # 11c0 <handle_reset+0x82>
     95c:	37a5                	jal	8c4 <puts>
	Delay_Us(160);
     95e:	6509                	lui	a0,0x2
     960:	e0050513          	addi	a0,a0,-512 # 1e00 <ch32fun.c.60bab88f+0x83e>
     964:	3ee1                	jal	53c <DelaySysTick>
	GPIOD->OUTDR |= (1<<3);
     966:	400117b7          	lui	a5,0x40011
     96a:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
}
     96e:	40a2                	lw	ra,8(sp)
     970:	4412                	lw	s0,4(sp)
	GPIOD->OUTDR |= (1<<3);
     972:	00876713          	ori	a4,a4,8
     976:	40e7a623          	sw	a4,1036(a5)
}
     97a:	4482                	lw	s1,0(sp)
     97c:	4501                	li	a0,0
     97e:	0131                	addi	sp,sp,12
     980:	8082                	ret

00000982 <printf>:
{
     982:	fdc10113          	addi	sp,sp,-36
     986:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     988:	862a                	mv	a2,a0
{
     98a:	c82e                	sw	a1,16(sp)
     98c:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     98e:	4581                	li	a1,0
	va_start( args, format );
     990:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     992:	62c00513          	li	a0,1580
{
     996:	c606                	sw	ra,12(sp)
     998:	ce3a                	sw	a4,28(sp)
     99a:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     99c:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     99e:	3ba5                	jal	716 <mini_vpprintf>
}
     9a0:	40b2                	lw	ra,12(sp)
     9a2:	02410113          	addi	sp,sp,36
     9a6:	8082                	ret

000009a8 <main>:
{
     9a8:	711d                	addi	sp,sp,-96
     9aa:	ce86                	sw	ra,92(sp)
     9ac:	cca2                	sw	s0,88(sp)
     9ae:	caa6                	sw	s1,84(sp)
	SystemInit();
     9b0:	3941                	jal	640 <SystemInit>
	RCC->CFGR0 |= (12<<4); //slowdown for lower power
     9b2:	40021737          	lui	a4,0x40021
     9b6:	435c                	lw	a5,4(a4)
	GPIOA->CFGLR = (GPIO_CNF_IN_PUPD<<(4*2)) |
     9b8:	6685                	lui	a3,0x1
     9ba:	88068593          	addi	a1,a3,-1920 # 880 <mini_vpprintf+0x16a>
	RCC->CFGR0 |= (12<<4); //slowdown for lower power
     9be:	0c07e793          	ori	a5,a5,192
     9c2:	c35c                	sw	a5,4(a4)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD;
     9c4:	4f1c                	lw	a5,24(a4)
	GPIOD->CFGLR &= ~(0xf<<(4*3));
     9c6:	7545                	lui	a0,0xffff1
     9c8:	157d                	addi	a0,a0,-1
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD;
     9ca:	0347e793          	ori	a5,a5,52
     9ce:	cf1c                	sw	a5,24(a4)
	GPIO_port_enable(GPIO_port_D);
     9d0:	4f1c                	lw	a5,24(a4)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
     9d2:	00200337          	lui	t1,0x200
     9d6:	0207e793          	ori	a5,a5,32
     9da:	cf1c                	sw	a5,24(a4)
	GPIOA->CFGLR = (GPIO_CNF_IN_PUPD<<(4*2)) |
     9dc:	400117b7          	lui	a5,0x40011
     9e0:	80b7a023          	sw	a1,-2048(a5) # 40010800 <__global_pointer$+0x20010000>
	GPIOA->BSHR = GPIO_BSHR_BS2 |
     9e4:	4599                	li	a1,6
     9e6:	80b7a823          	sw	a1,-2032(a5)
	GPIOD->CFGLR = (GPIO_CNF_IN_PUPD<<(4*7)) |
     9ea:	800815b7          	lui	a1,0x80081
     9ee:	88058593          	addi	a1,a1,-1920 # 80080880 <__global_pointer$+0x60080080>
     9f2:	40b7a023          	sw	a1,1024(a5)
	 GPIOD->BSHR = GPIO_BSHR_BS7 |
     9f6:	09600593          	li	a1,150
     9fa:	40b7a823          	sw	a1,1040(a5)
	 GPIOC->CFGLR = (GPIO_CNF_IN_PUPD<<(4*7)) |
     9fe:	880895b7          	lui	a1,0x88089
     a02:	88858593          	addi	a1,a1,-1912 # 88088888 <__global_pointer$+0x68088088>
     a06:	c38c                	sw	a1,0(a5)
	 GPIOC->BSHR = GPIO_BSHR_BS7 |
     a08:	0df00593          	li	a1,223
     a0c:	cb8c                	sw	a1,16(a5)
	GPIOD->CFGLR &= ~(0xf<<(4*3));
     a0e:	4007a583          	lw	a1,1024(a5)
     a12:	8de9                	and	a1,a1,a0
     a14:	40b7a023          	sw	a1,1024(a5)
	GPIOD->CFGLR |= ((GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*3));
     a18:	4007a583          	lw	a1,1024(a5)
	GPIO_pinMode(GPIOv_from_PORT_PIN(GPIO_port_D, 5), GPIO_pinMode_I_pullUp, GPIO_Speed_In);
     a1c:	ff100537          	lui	a0,0xff100
     a20:	157d                	addi	a0,a0,-1
	GPIOD->CFGLR |= ((GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*3));
     a22:	8dd5                	or	a1,a1,a3
     a24:	40b7a023          	sw	a1,1024(a5)
	GPIO_pinMode(GPIOv_from_PORT_PIN(GPIO_port_D, 5), GPIO_pinMode_I_pullUp, GPIO_Speed_In);
     a28:	4007a583          	lw	a1,1024(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
     a2c:	d0068693          	addi	a3,a3,-768
     a30:	8de9                	and	a1,a1,a0
     a32:	40b7a023          	sw	a1,1024(a5)
     a36:	4007a583          	lw	a1,1024(a5)
     a3a:	00800537          	lui	a0,0x800
     a3e:	8dc9                	or	a1,a1,a0
     a40:	40b7a023          	sw	a1,1024(a5)
     a44:	02000593          	li	a1,32
     a48:	40b7a823          	sw	a1,1040(a5)
	GPIO_pinMode(GPIOv_from_PORT_PIN(GPIO_port_D, 6), GPIO_pinMode_I_pullUp, GPIO_Speed_In);
     a4c:	4007a583          	lw	a1,1024(a5)
     a50:	f1000537          	lui	a0,0xf1000
     a54:	157d                	addi	a0,a0,-1
     a56:	8de9                	and	a1,a1,a0
     a58:	40b7a023          	sw	a1,1024(a5)
     a5c:	4007a583          	lw	a1,1024(a5)
     a60:	08000537          	lui	a0,0x8000
     a64:	8dc9                	or	a1,a1,a0
     a66:	40b7a023          	sw	a1,1024(a5)
     a6a:	04000593          	li	a1,64
     a6e:	40b7a823          	sw	a1,1040(a5)
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
     a72:	4b0c                	lw	a1,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     a74:	ffe00537          	lui	a0,0xffe00
     a78:	157d                	addi	a0,a0,-1
	RCC->APB1PRSTR |=  RCC_APB1Periph_I2C1;
     a7a:	0065e5b3          	or	a1,a1,t1
     a7e:	cb0c                	sw	a1,16(a4)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     a80:	4b0c                	lw	a1,16(a4)
     a82:	8de9                	and	a1,a1,a0
     a84:	cb0c                	sw	a1,16(a4)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     a86:	4f50                	lw	a2,28(a4)
	AFIO->PCFR1 &= ~(0x04400002);
     a88:	fbc005b7          	lui	a1,0xfbc00
     a8c:	15f5                	addi	a1,a1,-3
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     a8e:	00666633          	or	a2,a2,t1
     a92:	cf50                	sw	a2,28(a4)
	RCC->APB2PCENR |= I2C_PORT_RCC | RCC_APB2Periph_AFIO;
     a94:	4f10                	lw	a2,24(a4)
     a96:	01166613          	ori	a2,a2,17
     a9a:	cf10                	sw	a2,24(a4)
	AFIO->PCFR1 &= ~(0x04400002);
     a9c:	40010737          	lui	a4,0x40010
     aa0:	4350                	lw	a2,4(a4)
     aa2:	8e6d                	and	a2,a2,a1
     aa4:	c350                	sw	a2,4(a4)
	AFIO->PCFR1 |= I2C_AFIO_REG;
     aa6:	4350                	lw	a2,4(a4)
     aa8:	c350                	sw	a2,4(a4)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
     aaa:	4398                	lw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
     aac:	767d                	lui	a2,0xfffff
     aae:	0ff60613          	addi	a2,a2,255 # fffff0ff <__global_pointer$+0xdfffe8ff>
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SDA));
     ab2:	f0f77713          	andi	a4,a4,-241
     ab6:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SDA);	
     ab8:	4398                	lw	a4,0(a5)
     aba:	0d076713          	ori	a4,a4,208
     abe:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR &= ~(0x0F << (4 * I2C_PIN_SCL));
     ac0:	4398                	lw	a4,0(a5)
     ac2:	8f71                	and	a4,a4,a2
     ac4:	c398                	sw	a4,0(a5)
	I2C_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF) << (4 * I2C_PIN_SCL);
     ac6:	4398                	lw	a4,0(a5)
     ac8:	8ed9                	or	a3,a3,a4
     aca:	c394                	sw	a3,0(a5)
	uint16_t i2c_conf = I2C1->CTLR2 & ~I2C_CTLR2_FREQ;
     acc:	400056b7          	lui	a3,0x40005
     ad0:	4046d783          	lhu	a5,1028(a3) # 40005404 <__global_pointer$+0x20004c04>
     ad4:	07c2                	slli	a5,a5,0x10
     ad6:	83c1                	srli	a5,a5,0x10
     ad8:	fc07f793          	andi	a5,a5,-64
	i2c_conf |= (FUNCONF_SYSTEM_CORE_CLOCK / I2C_PRERATE) & I2C_CTLR2_FREQ;
     adc:	0307e793          	ori	a5,a5,48
	I2C1->CTLR2 = i2c_conf;
     ae0:	40f69223          	sh	a5,1028(a3)
	I2C1->CKCFGR = i2c_conf;
     ae4:	0f000793          	li	a5,240
     ae8:	40f69e23          	sh	a5,1052(a3)
	I2C1->CTLR1 |= I2C_CTLR1_PE;
     aec:	4006d783          	lhu	a5,1024(a3)
     af0:	07c2                	slli	a5,a5,0x10
     af2:	83c1                	srli	a5,a5,0x10
     af4:	0017e793          	ori	a5,a5,1
     af8:	40f69023          	sh	a5,1024(a3)
	if(I2C1->STAR1 & I2C_STAR1_BERR) 
     afc:	4146d783          	lhu	a5,1044(a3)
     b00:	1007f793          	andi	a5,a5,256
     b04:	cf99                	beqz	a5,b22 <main+0x17a>
		I2C1->STAR1 &= ~(I2C_STAR1_BERR); 
     b06:	4146d783          	lhu	a5,1044(a3)
	if(i2c_init(I2C_CLK_100KHZ) != I2C_OK) printf("Failed to init the I2C Bus\n");
     b0a:	6505                	lui	a0,0x1
     b0c:	1d850513          	addi	a0,a0,472 # 11d8 <handle_reset+0x9a>
     b10:	07c2                	slli	a5,a5,0x10
     b12:	83c1                	srli	a5,a5,0x10
     b14:	eff7f793          	andi	a5,a5,-257
     b18:	07c2                	slli	a5,a5,0x10
     b1a:	83c1                	srli	a5,a5,0x10
     b1c:	40f69a23          	sh	a5,1044(a3)
     b20:	3355                	jal	8c4 <puts>
	Delay_Ms(100);
     b22:	00494537          	lui	a0,0x494
     b26:	e0050513          	addi	a0,a0,-512 # 493e00 <lib_i2c.c.e7f16be4+0x48fe45>
     b2a:	3c09                	jal	53c <DelaySysTick>
	GPIOD->OUTDR = 1<<3;
     b2c:	400117b7          	lui	a5,0x40011
     b30:	4721                	li	a4,8
     b32:	40e7a623          	sw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
	mode = 0;
     b36:	800188a3          	sb	zero,-2031(gp) # 20000011 <mode>
     b3a:	81118413          	addi	s0,gp,-2031 # 20000011 <mode>
		uint32_t current_time = (SysTick->CNT);
     b3e:	e000f6b7          	lui	a3,0xe000f
		if (current_time - last_interaction > TIMEOUT) {
     b42:	80c1a783          	lw	a5,-2036(gp) # 2000000c <last_interaction>
		uint32_t current_time = (SysTick->CNT);
     b46:	4698                	lw	a4,8(a3)
		if (current_time - last_interaction > TIMEOUT) {
     b48:	8f1d                	sub	a4,a4,a5
     b4a:	02aea7b7          	lui	a5,0x2aea
     b4e:	54078793          	addi	a5,a5,1344 # 2aea540 <lib_i2c.c.e7f16be4+0x2ae6585>
     b52:	00e7fa63          	bgeu	a5,a4,b66 <main+0x1be>
			mode = 0;
     b56:	00040023          	sb	zero,0(s0)
			count = 0;
     b5a:	80018523          	sb	zero,-2038(gp) # 2000000a <count>
			last_interaction = (SysTick->CNT);
     b5e:	469c                	lw	a5,8(a3)
     b60:	80c18713          	addi	a4,gp,-2036 # 2000000c <last_interaction>
     b64:	c31c                	sw	a5,0(a4)
		uint8_t button1 = GPIO_digitalRead(GPIOv_from_PORT_PIN(GPIO_port_D, 5));
     b66:	400117b7          	lui	a5,0x40011
     b6a:	4087a703          	lw	a4,1032(a5) # 40011408 <__global_pointer$+0x20010c08>
     b6e:	40078793          	addi	a5,a5,1024
		uint8_t button2 = GPIO_digitalRead(GPIOv_from_PORT_PIN(GPIO_port_D, 6));
     b72:	479c                	lw	a5,8(a5)
		uint8_t button1 = GPIO_digitalRead(GPIOv_from_PORT_PIN(GPIO_port_D, 5));
     b74:	8315                	srli	a4,a4,0x5
    if (pressed) {  
     b76:	8b05                	andi	a4,a4,1
		uint8_t button2 = GPIO_digitalRead(GPIOv_from_PORT_PIN(GPIO_port_D, 6));
     b78:	8399                	srli	a5,a5,0x6
     b7a:	c03e                	sw	a5,0(sp)
    if (pressed) {  
     b7c:	80818793          	addi	a5,gp,-2040 # 20000008 <button_1_pressed>
     b80:	0007c683          	lbu	a3,0(a5)
     b84:	0e070163          	beqz	a4,c66 <main+0x2be>
        if (!button_1_pressed) {  
     b88:	ea99                	bnez	a3,b9e <main+0x1f6>
            button_1_pressed = true;
     b8a:	4705                	li	a4,1
     b8c:	00e78023          	sb	a4,0(a5)
            button_1_press_start = (SysTick->CNT);
     b90:	e000f7b7          	lui	a5,0xe000f
     b94:	4798                	lw	a4,8(a5)
     b96:	200007b7          	lui	a5,0x20000
     b9a:	00e7a223          	sw	a4,4(a5) # 20000004 <button_1_press_start>
	if (pressed) {  
     b9e:	4702                	lw	a4,0(sp)
     ba0:	80918793          	addi	a5,gp,-2039 # 20000009 <button_2_pressed>
     ba4:	8b05                	andi	a4,a4,1
     ba6:	0007c683          	lbu	a3,0(a5)
     baa:	4a070163          	beqz	a4,104c <main+0x6a4>
        if (!button_2_pressed) {  
     bae:	e699                	bnez	a3,bbc <main+0x214>
            button_2_pressed = true;
     bb0:	4705                	li	a4,1
     bb2:	00e78023          	sb	a4,0(a5)
            button_2_press_start = (SysTick->CNT);
     bb6:	e000f7b7          	lui	a5,0xe000f
     bba:	479c                	lw	a5,8(a5)

void update_blinking() {
	
    if (!is_blinking) {
     bbc:	80b1c783          	lbu	a5,-2037(gp) # 2000000b <is_blinking>
     bc0:	80b18693          	addi	a3,gp,-2037 # 2000000b <is_blinking>
     bc4:	cfa5                	beqz	a5,c3c <main+0x294>
		return;
	};

    uint32_t current_time = (SysTick->CNT);
     bc6:	e000f7b7          	lui	a5,0xe000f
	if(target_long_blinks){
     bca:	8121c603          	lbu	a2,-2030(gp) # 20000012 <target_long_blinks>
    uint32_t current_time = (SysTick->CNT);
     bce:	4798                	lw	a4,8(a5)
	if(target_long_blinks){
     bd0:	81218593          	addi	a1,gp,-2030 # 20000012 <target_long_blinks>
     bd4:	81018793          	addi	a5,gp,-2032 # 20000010 <led_state>
     bd8:	4c060a63          	beqz	a2,10ac <main+0x704>
		if (!led_state && (current_time - blink_start >= LONG_BLINK_TIME)) {
     bdc:	20000537          	lui	a0,0x20000
     be0:	00050513          	mv	a0,a0
     be4:	00052283          	lw	t0,0(a0) # 20000000 <blink_start>
     be8:	0007c383          	lbu	t2,0(a5) # e000f000 <__global_pointer$+0xc000e800>
     bec:	00113337          	lui	t1,0x113
     bf0:	405702b3          	sub	t0,a4,t0
     bf4:	a8730313          	addi	t1,t1,-1401 # 112a87 <lib_i2c.c.e7f16be4+0x10eacc>
     bf8:	48039f63          	bnez	t2,1096 <main+0x6ee>
     bfc:	04537063          	bgeu	t1,t0,c3c <main+0x294>
			led_state = true;
     c00:	4305                	li	t1,1
     c02:	00678023          	sb	t1,0(a5)
			GPIOD->OUTDR |= (1<<3);
     c06:	40011337          	lui	t1,0x40011
     c0a:	40c32283          	lw	t0,1036(t1) # 4001140c <__global_pointer$+0x20010c0c>
     c0e:	0082e293          	ori	t0,t0,8
			target_long_blinks--;
			// printf("Long blink on");
		} 
		else if (led_state && (current_time - blink_start >= LONG_BLINK_TIME)) {
			led_state = false;
			GPIOD->OUTDR &= ~(1<<3);
     c12:	40532623          	sw	t0,1036(t1)
			blink_start = current_time;
			target_long_blinks--;
     c16:	167d                	addi	a2,a2,-1
     c18:	00c58023          	sb	a2,0(a1) # fbc00000 <__global_pointer$+0xdbbff800>
			target_short_blinks--;
			// printf("short blink off");
		}
	}

    if ((target_long_blinks == 0) && (target_short_blinks == 0) && !led_state) {
     c1c:	0005c603          	lbu	a2,0(a1)
			blink_start = current_time;
     c20:	c118                	sw	a4,0(a0)
    if ((target_long_blinks == 0) && (target_short_blinks == 0) && !led_state) {
     c22:	ee09                	bnez	a2,c3c <main+0x294>
     c24:	8131c603          	lbu	a2,-2029(gp) # 20000013 <target_short_blinks>
     c28:	ea11                	bnez	a2,c3c <main+0x294>
     c2a:	0007c783          	lbu	a5,0(a5)
     c2e:	e799                	bnez	a5,c3c <main+0x294>
		// printf("Targer blinks reached\n");
        is_blinking = false;
		blink_start = current_time;
     c30:	200007b7          	lui	a5,0x20000
        is_blinking = false;
     c34:	00068023          	sb	zero,0(a3) # e000f000 <__global_pointer$+0xc000e800>
		blink_start = current_time;
     c38:	00e7a023          	sw	a4,0(a5) # 20000000 <blink_start>
		switch (mode) {
     c3c:	00044783          	lbu	a5,0(s0)
     c40:	4705                	li	a4,1
     c42:	4ce78863          	beq	a5,a4,1112 <main+0x76a>
     c46:	4709                	li	a4,2
     c48:	4ee78063          	beq	a5,a4,1128 <main+0x780>
     c4c:	eb81                	bnez	a5,c5c <main+0x2b4>
				if (!is_blinking) {
     c4e:	0006c783          	lbu	a5,0(a3)
     c52:	e789                	bnez	a5,c5c <main+0x2b4>
					start_blinking(0, (1));
     c54:	4585                	li	a1,1
     c56:	4501                	li	a0,0
					start_blinking(2, (count+1));
     c58:	fdeff0ef          	jal	ra,436 <start_blinking>
	Delay_Us(500);
     c5c:	6519                	lui	a0,0x6
     c5e:	dc050513          	addi	a0,a0,-576 # 5dc0 <lib_i2c.c.e7f16be4+0x1e05>
     c62:	38e9                	jal	53c <DelaySysTick>
	while(1) {
     c64:	bde9                	j	b3e <main+0x196>
    } else if (button_1_pressed) {  
     c66:	de85                	beqz	a3,b9e <main+0x1f6>
        uint32_t press_duration = (SysTick->CNT) - button_1_press_start;
     c68:	e000f6b7          	lui	a3,0xe000f
     c6c:	20000637          	lui	a2,0x20000
     c70:	4698                	lw	a4,8(a3)
     c72:	00462603          	lw	a2,4(a2) # 20000004 <button_1_press_start>
        button_1_pressed = false;
     c76:	00078023          	sb	zero,0(a5)
        if (press_duration >= SHORT_PRESS_TIME && press_duration < LONG_PRESS_TIME) {
     c7a:	7795                	lui	a5,0xfffe5
        uint32_t press_duration = (SysTick->CNT) - button_1_press_start;
     c7c:	8f11                	sub	a4,a4,a2
        if (press_duration >= SHORT_PRESS_TIME && press_duration < LONG_PRESS_TIME) {
     c7e:	88c78793          	addi	a5,a5,-1908 # fffe488c <__global_pointer$+0xdffe408c>
     c82:	00153637          	lui	a2,0x153
     c86:	97ba                	add	a5,a5,a4
     c88:	beb60613          	addi	a2,a2,-1045 # 152beb <lib_i2c.c.e7f16be4+0x14ec30>
     c8c:	38f66c63          	bltu	a2,a5,1024 <main+0x67c>
			if (mode == 0) {
     c90:	00044783          	lbu	a5,0(s0)
     c94:	eb91                	bnez	a5,ca8 <main+0x300>
				read_bank_into_ntag(0);
     c96:	4501                	li	a0,0
     c98:	39b1                	jal	8f4 <read_bank_into_ntag>
        last_interaction = (SysTick->CNT);
     c9a:	e000f7b7          	lui	a5,0xe000f
     c9e:	479c                	lw	a5,8(a5)
     ca0:	80c18713          	addi	a4,gp,-2036 # 2000000c <last_interaction>
     ca4:	c31c                	sw	a5,0(a4)
     ca6:	bde5                	j	b9e <main+0x1f6>
			else if (mode == 1) {
     ca8:	4705                	li	a4,1
     caa:	00e79863          	bne	a5,a4,cba <main+0x312>
                read_bank_into_ntag(count);
     cae:	80a1c503          	lbu	a0,-2038(gp) # 2000000a <count>
     cb2:	3189                	jal	8f4 <read_bank_into_ntag>
				mode = 0;
     cb4:	00040023          	sb	zero,0(s0)
     cb8:	b7cd                	j	c9a <main+0x2f2>
            } else if (mode == 2) {
     cba:	4709                	li	a4,2
     cbc:	fce79fe3          	bne	a5,a4,c9a <main+0x2f2>
	FLASH->KEYR = FLASH_KEY1;
     cc0:	456706b7          	lui	a3,0x45670
                write_ntag_into_bank(count);
     cc4:	80a1c603          	lbu	a2,-2038(gp) # 2000000a <count>
	FLASH->KEYR = FLASH_KEY1;
     cc8:	12368693          	addi	a3,a3,291 # 45670123 <__global_pointer$+0x2566f923>
     ccc:	400227b7          	lui	a5,0x40022
	FLASH->KEYR = FLASH_KEY2;
     cd0:	cdef9737          	lui	a4,0xcdef9
	FLASH->KEYR = FLASH_KEY1;
     cd4:	c3d4                	sw	a3,4(a5)
	FLASH->KEYR = FLASH_KEY2;
     cd6:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <__global_pointer$+0xadef81ab>
     cda:	c3d8                	sw	a4,4(a5)
	FLASH->MODEKEYR = FLASH_KEY1;
     cdc:	d3d4                	sw	a3,36(a5)
	FLASH->MODEKEYR = FLASH_KEY2;
     cde:	d3d8                	sw	a4,36(a5)
	if( FLASH->CTLR & 0x8080 ) 
     ce0:	4b9c                	lw	a5,16(a5)
     ce2:	6721                	lui	a4,0x8
     ce4:	08070713          	addi	a4,a4,128 # 8080 <lib_i2c.c.e7f16be4+0x40c5>
     ce8:	8ff9                	and	a5,a5,a4
     cea:	cb99                	beqz	a5,d00 <main+0x358>
		printf( "Flash still locked\n" );
     cec:	6505                	lui	a0,0x1
     cee:	1f450513          	addi	a0,a0,500 # 11f4 <handle_reset+0xb6>
     cf2:	c232                	sw	a2,4(sp)
     cf4:	3ec1                	jal	8c4 <puts>
		printf("Flash Locked!\n");
     cf6:	6505                	lui	a0,0x1
     cf8:	20850513          	addi	a0,a0,520 # 1208 <handle_reset+0xca>
     cfc:	36e1                	jal	8c4 <puts>
     cfe:	4612                	lw	a2,4(sp)
	GPIOD->OUTDR &= ~(1<<3);
     d00:	400117b7          	lui	a5,0x40011
     d04:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
		uint32_t * ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (j<<6));
     d08:	060a                	slli	a2,a2,0x2
	int block_to_read = 1;
     d0a:	4485                	li	s1,1
	GPIOD->OUTDR &= ~(1<<3);
     d0c:	9b5d                	andi	a4,a4,-9
     d0e:	40e7a623          	sw	a4,1036(a5)
		uint32_t * ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (j<<6));
     d12:	6785                	lui	a5,0x1
     d14:	2ac78793          	addi	a5,a5,684 # 12ac <bank_addrs>
     d18:	97b2                	add	a5,a5,a2
     d1a:	c23e                	sw	a5,4(sp)
		uint32_t blocks[4][4] = {0};
     d1c:	04000613          	li	a2,64
     d20:	4581                	li	a1,0
     d22:	0848                	addi	a0,sp,20
     d24:	32f9                	jal	6f2 <memset>
		uint32_t * ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (j<<6));
     d26:	4712                	lw	a4,4(sp)
     d28:	00449293          	slli	t0,s1,0x4
     d2c:	ff028793          	addi	a5,t0,-16
     d30:	00072283          	lw	t0,0(a4)
		printf("Reading 4 blocks from %d to %d from ntag, writing to address %lx \n", block_to_read, block_to_read + 3, (uint32_t) ptr);
     d34:	6505                	lui	a0,0x1
     d36:	00348613          	addi	a2,s1,3
		uint32_t * ptr = (uint32_t *) ((uint32_t)bank_addrs[bank] + (j<<6));
     d3a:	92be                	add	t0,t0,a5
		printf("Reading 4 blocks from %d to %d from ntag, writing to address %lx \n", block_to_read, block_to_read + 3, (uint32_t) ptr);
     d3c:	8696                	mv	a3,t0
     d3e:	85a6                	mv	a1,s1
     d40:	21850513          	addi	a0,a0,536 # 1218 <handle_reset+0xda>
     d44:	c416                	sw	t0,8(sp)
     d46:	3935                	jal	982 <printf>
		for(int k=0; k<4; k++){
     d48:	42a2                	lw	t0,8(sp)
     d4a:	085c                	addi	a5,sp,20
     d4c:	4381                	li	t2,0
     d4e:	7d100613          	li	a2,2001
	while(I2C1->STAR2 & I2C_STAR2_BUSY) 
     d52:	400055b7          	lui	a1,0x40005
     d56:	4185d683          	lhu	a3,1048(a1) # 40005418 <__global_pointer$+0x20004c18>
     d5a:	40058713          	addi	a4,a1,1024
     d5e:	8a89                	andi	a3,a3,2
     d60:	14069f63          	bnez	a3,ebe <main+0x516>
		I2C1->CTLR1 |= I2C_CTLR1_START;
     d64:	00075683          	lhu	a3,0(a4)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     d68:	400055b7          	lui	a1,0x40005
		I2C1->CTLR1 |= I2C_CTLR1_START;
     d6c:	06c2                	slli	a3,a3,0x10
     d6e:	82c1                	srli	a3,a3,0x10
     d70:	1006e693          	ori	a3,a3,256
     d74:	00d71023          	sh	a3,0(a4)
	return (status & status_mask) == status_mask; 
     d78:	000306b7          	lui	a3,0x30
     d7c:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     d7e:	4145d703          	lhu	a4,1044(a1) # 40005414 <__global_pointer$+0x20004c14>
     d82:	01071513          	slli	a0,a4,0x10
     d86:	4185d703          	lhu	a4,1048(a1)
     d8a:	8141                	srli	a0,a0,0x10
     d8c:	0742                	slli	a4,a4,0x10
     d8e:	8f49                	or	a4,a4,a0
	return (status & status_mask) == status_mask; 
     d90:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     d92:	fed716e3          	bne	a4,a3,d7e <main+0x3d6>
		I2C1->DATAR = (addr << 1) & 0xFE;
     d96:	0aa00713          	li	a4,170
	return (status & status_mask) == status_mask; 
     d9a:	00070637          	lui	a2,0x70
		I2C1->DATAR = (addr << 1) & 0xFE;
     d9e:	40e59823          	sh	a4,1040(a1)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     da2:	40005537          	lui	a0,0x40005
		I2C1->DATAR = (addr << 1) & 0xFE;
     da6:	7d100593          	li	a1,2001
	return (status & status_mask) == status_mask; 
     daa:	08260613          	addi	a2,a2,130 # 70082 <lib_i2c.c.e7f16be4+0x6c0c7>
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     dae:	41455683          	lhu	a3,1044(a0) # 40005414 <__global_pointer$+0x20004c14>
     db2:	40050713          	addi	a4,a0,1024
     db6:	01069093          	slli	ra,a3,0x10
     dba:	01875683          	lhu	a3,24(a4)
     dbe:	0100d093          	srli	ra,ra,0x10
     dc2:	06c2                	slli	a3,a3,0x10
     dc4:	0016e6b3          	or	a3,a3,ra
	return (status & status_mask) == status_mask; 
     dc8:	8ef1                	and	a3,a3,a2
		while(!i2c_status(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
     dca:	1ec69e63          	bne	a3,a2,fc6 <main+0x61e>
     dce:	007486b3          	add	a3,s1,t2
     dd2:	06c2                	slli	a3,a3,0x10
     dd4:	82c1                	srli	a3,a3,0x10
		I2C1->DATAR = reg;
     dd6:	00d71823          	sh	a3,16(a4)
		while(!(I2C1->STAR1 & I2C_STAR1_TXE));
     dda:	40005637          	lui	a2,0x40005
     dde:	41465683          	lhu	a3,1044(a2) # 40005414 <__global_pointer$+0x20004c14>
     de2:	0806f693          	andi	a3,a3,128
     de6:	dee5                	beqz	a3,dde <main+0x436>
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
     de8:	40065683          	lhu	a3,1024(a2)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     dec:	400055b7          	lui	a1,0x40005
		if(len > 1) I2C1->CTLR1 |= I2C_CTLR1_ACK;
     df0:	06c2                	slli	a3,a3,0x10
     df2:	82c1                	srli	a3,a3,0x10
     df4:	4006e693          	ori	a3,a3,1024
     df8:	40d61023          	sh	a3,1024(a2)
		I2C1->CTLR1 |= I2C_CTLR1_START;
     dfc:	40065683          	lhu	a3,1024(a2)
     e00:	06c2                	slli	a3,a3,0x10
     e02:	82c1                	srli	a3,a3,0x10
     e04:	1006e693          	ori	a3,a3,256
     e08:	40d61023          	sh	a3,1024(a2)
	return (status & status_mask) == status_mask; 
     e0c:	000306b7          	lui	a3,0x30
     e10:	0685                	addi	a3,a3,1
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     e12:	4145d703          	lhu	a4,1044(a1) # 40005414 <__global_pointer$+0x20004c14>
     e16:	01071513          	slli	a0,a4,0x10
     e1a:	4185d703          	lhu	a4,1048(a1)
     e1e:	8141                	srli	a0,a0,0x10
     e20:	0742                	slli	a4,a4,0x10
     e22:	8f49                	or	a4,a4,a0
	return (status & status_mask) == status_mask; 
     e24:	8f75                	and	a4,a4,a3
		while(!i2c_status(I2C_EVENT_MASTER_MODE_SELECT));
     e26:	fed716e3          	bne	a4,a3,e12 <main+0x46a>
		I2C1->DATAR = (addr << 1) | 0x01;
     e2a:	0ab00713          	li	a4,171
	return (status & status_mask) == status_mask; 
     e2e:	00030637          	lui	a2,0x30
		I2C1->DATAR = (addr << 1) | 0x01;
     e32:	40e59823          	sh	a4,1040(a1)
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     e36:	40005537          	lui	a0,0x40005
		I2C1->DATAR = (addr << 1) | 0x01;
     e3a:	7d100593          	li	a1,2001
	return (status & status_mask) == status_mask; 
     e3e:	0609                	addi	a2,a2,2
	uint32_t status = (uint32_t)I2C1->STAR1 | (uint32_t)(I2C1->STAR2 << 16);
     e40:	41455683          	lhu	a3,1044(a0) # 40005414 <__global_pointer$+0x20004c14>
     e44:	40050713          	addi	a4,a0,1024
     e48:	01069093          	slli	ra,a3,0x10
     e4c:	01875683          	lhu	a3,24(a4)
     e50:	0100d093          	srli	ra,ra,0x10
     e54:	06c2                	slli	a3,a3,0x10
     e56:	0016e6b3          	or	a3,a3,ra
	return (status & status_mask) == status_mask; 
     e5a:	8ef1                	and	a3,a3,a2
		while(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
     e5c:	16c69963          	bne	a3,a2,fce <main+0x626>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     e60:	6585                	lui	a1,0x1
		while(!i2c_status(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
     e62:	863e                	mv	a2,a5
			while(!(I2C1->STAR1 & I2C_STAR1_RXNE));
     e64:	400050b7          	lui	ra,0x40005
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     e68:	80058593          	addi	a1,a1,-2048 # 800 <mini_vpprintf+0xea>
		while(cbyte < len)
     e6c:	01078513          	addi	a0,a5,16
			while(!(I2C1->STAR1 & I2C_STAR1_RXNE));
     e70:	4140d683          	lhu	a3,1044(ra) # 40005414 <__global_pointer$+0x20004c14>
     e74:	40008713          	addi	a4,ra,1024
     e78:	0406f693          	andi	a3,a3,64
     e7c:	daf5                	beqz	a3,e70 <main+0x4c8>
			buf[cbyte] = I2C1->DATAR;
     e7e:	01075683          	lhu	a3,16(a4)
     e82:	00d60023          	sb	a3,0(a2) # 30000 <lib_i2c.c.e7f16be4+0x2c045>
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
     e86:	01475683          	lhu	a3,20(a4)
     e8a:	1006f693          	andi	a3,a3,256
     e8e:	e2a9                	bnez	a3,ed0 <main+0x528>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
     e90:	01475683          	lhu	a3,20(a4)
     e94:	4006f693          	andi	a3,a3,1024
     e98:	14069463          	bnez	a3,fe0 <main+0x638>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
     e9c:	01475683          	lhu	a3,20(a4)
     ea0:	2006f693          	andi	a3,a3,512
     ea4:	14069a63          	bnez	a3,ff8 <main+0x650>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
     ea8:	01475683          	lhu	a3,20(a4)
     eac:	06c2                	slli	a3,a3,0x10
     eae:	82c1                	srli	a3,a3,0x10
     eb0:	8eed                	and	a3,a3,a1
     eb2:	16069063          	bnez	a3,1012 <main+0x66a>
     eb6:	0605                	addi	a2,a2,1
		while(cbyte < len)
     eb8:	faa61ce3          	bne	a2,a0,e70 <main+0x4c8>
     ebc:	a025                	j	ee4 <main+0x53c>
     ebe:	167d                	addi	a2,a2,-1
		if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     ec0:	e8061be3          	bnez	a2,d56 <main+0x3ae>
	if(I2C1->STAR1 & I2C_STAR1_BERR) {I2C1->STAR1 &= ~I2C_STAR1_BERR; return I2C_ERR_BERR;}
     ec4:	01475683          	lhu	a3,20(a4)
     ec8:	1006f693          	andi	a3,a3,256
     ecc:	10068563          	beqz	a3,fd6 <main+0x62e>
     ed0:	01475683          	lhu	a3,20(a4)
     ed4:	06c2                	slli	a3,a3,0x10
     ed6:	82c1                	srli	a3,a3,0x10
     ed8:	eff6f693          	andi	a3,a3,-257
     edc:	06c2                	slli	a3,a3,0x10
     ede:	82c1                	srli	a3,a3,0x10
     ee0:	00d71a23          	sh	a3,20(a4)
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     ee4:	400056b7          	lui	a3,0x40005
     ee8:	4006d703          	lhu	a4,1024(a3) # 40005400 <__global_pointer$+0x20004c00>
     eec:	c81e                	sw	t2,16(sp)
     eee:	c616                	sw	t0,12(sp)
     ef0:	0742                	slli	a4,a4,0x10
     ef2:	8341                	srli	a4,a4,0x10
     ef4:	20076713          	ori	a4,a4,512
     ef8:	40e69023          	sh	a4,1024(a3)
			printf("0x%lx, 0x%lx, 0x%lx, 0x%lx \n", blocks[k][0], blocks[k][1], blocks[k][2], blocks[k][3]);
     efc:	43d0                	lw	a2,4(a5)
     efe:	47d8                	lw	a4,12(a5)
     f00:	4794                	lw	a3,8(a5)
     f02:	438c                	lw	a1,0(a5)
     f04:	c43e                	sw	a5,8(sp)
     f06:	6785                	lui	a5,0x1
     f08:	25c78513          	addi	a0,a5,604 # 125c <handle_reset+0x11e>
     f0c:	3c9d                	jal	982 <printf>
		for(int k=0; k<4; k++){
     f0e:	43c2                	lw	t2,16(sp)
     f10:	47a2                	lw	a5,8(sp)
     f12:	4711                	li	a4,4
     f14:	0385                	addi	t2,t2,1
     f16:	42b2                	lw	t0,12(sp)
     f18:	07c1                	addi	a5,a5,16
     f1a:	e2e39ae3          	bne	t2,a4,d4e <main+0x3a6>
		FLASH->CTLR = CR_PAGE_ER;
     f1e:	40022737          	lui	a4,0x40022
     f22:	000207b7          	lui	a5,0x20
     f26:	cb1c                	sw	a5,16(a4)
		FLASH->ADDR = (intptr_t)ptr;
     f28:	00572a23          	sw	t0,20(a4) # 40022014 <__global_pointer$+0x20021814>
		FLASH->CTLR = CR_STRT_Set | CR_PAGE_ER;
     f2c:	04078793          	addi	a5,a5,64 # 20040 <lib_i2c.c.e7f16be4+0x1c085>
     f30:	0491                	addi	s1,s1,4
     f32:	cb1c                	sw	a5,16(a4)
		while( FLASH->STATR & FLASH_STATR_BSY );  // Takes about 3ms.
     f34:	475c                	lw	a5,12(a4)
     f36:	8b85                	andi	a5,a5,1
     f38:	fff5                	bnez	a5,f34 <main+0x58c>
		if( ptr[0] != 0xffffffff )
     f3a:	0002a703          	lw	a4,0(t0)
     f3e:	57fd                	li	a5,-1
     f40:	00f70863          	beq	a4,a5,f50 <main+0x5a8>
			printf( "WARNING/FAILURE: Flash general erasure failed\n" );
     f44:	6505                	lui	a0,0x1
     f46:	27c50513          	addi	a0,a0,636 # 127c <handle_reset+0x13e>
     f4a:	c416                	sw	t0,8(sp)
     f4c:	3aa5                	jal	8c4 <puts>
     f4e:	42a2                	lw	t0,8(sp)
		FLASH->CTLR = CR_PAGE_PG;  // synonym of FTPG.
     f50:	400227b7          	lui	a5,0x40022
     f54:	6741                	lui	a4,0x10
     f56:	cb98                	sw	a4,16(a5)
		FLASH->CTLR = CR_BUF_RST | CR_PAGE_PG;
     f58:	00090737          	lui	a4,0x90
     f5c:	cb98                	sw	a4,16(a5)
		FLASH->ADDR = (intptr_t)ptr;  // This can actually happen about anywhere toward the end here.
     f5e:	0057aa23          	sw	t0,20(a5) # 40022014 <__global_pointer$+0x20021814>
		while( FLASH->STATR & FLASH_STATR_BSY );  // No real need for this.
     f62:	40022737          	lui	a4,0x40022
     f66:	475c                	lw	a5,12(a4)
     f68:	8b85                	andi	a5,a5,1
     f6a:	fff5                	bnez	a5,f66 <main+0x5be>
			FLASH->CTLR = CR_PAGE_PG | FLASH_CTLR_BUF_LOAD; // Load the buffer.
     f6c:	40022737          	lui	a4,0x40022
     f70:	000505b7          	lui	a1,0x50
		for( i = 0; i < 16; i++ )
     f74:	4641                	li	a2,16
			ptr[i] = blocks[i/4][i%4]; //Write to the memory
     f76:	00279513          	slli	a0,a5,0x2
     f7a:	05410313          	addi	t1,sp,84
     f7e:	951a                	add	a0,a0,t1
     f80:	fc052503          	lw	a0,-64(a0)
     f84:	00279693          	slli	a3,a5,0x2
     f88:	9696                	add	a3,a3,t0
     f8a:	c288                	sw	a0,0(a3)
			FLASH->CTLR = CR_PAGE_PG | FLASH_CTLR_BUF_LOAD; // Load the buffer.
     f8c:	cb0c                	sw	a1,16(a4)
			while( FLASH->STATR & FLASH_STATR_BSY );  // Only needed if running from RAM.
     f8e:	4754                	lw	a3,12(a4)
     f90:	8a85                	andi	a3,a3,1
     f92:	fef5                	bnez	a3,f8e <main+0x5e6>
		for( i = 0; i < 16; i++ )
     f94:	0785                	addi	a5,a5,1
     f96:	fec790e3          	bne	a5,a2,f76 <main+0x5ce>
		FLASH->CTLR = CR_PAGE_PG|CR_STRT_Set;
     f9a:	67c1                	lui	a5,0x10
     f9c:	04078793          	addi	a5,a5,64 # 10040 <lib_i2c.c.e7f16be4+0xc085>
     fa0:	cb1c                	sw	a5,16(a4)
		while( FLASH->STATR & FLASH_STATR_BSY );
     fa2:	40022737          	lui	a4,0x40022
     fa6:	475c                	lw	a5,12(a4)
     fa8:	8b85                	andi	a5,a5,1
     faa:	fff5                	bnez	a5,fa6 <main+0x5fe>
	for(int j=0; j<14; j++) {	
     fac:	03900793          	li	a5,57
     fb0:	d6f496e3          	bne	s1,a5,d1c <main+0x374>
	GPIOD->OUTDR |= (1<<3);
     fb4:	400117b7          	lui	a5,0x40011
     fb8:	40c7a703          	lw	a4,1036(a5) # 4001140c <__global_pointer$+0x20010c0c>
     fbc:	00876713          	ori	a4,a4,8
     fc0:	40e7a623          	sw	a4,1036(a5)
     fc4:	b9c5                	j	cb4 <main+0x30c>
     fc6:	15fd                	addi	a1,a1,-1
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     fc8:	de0593e3          	bnez	a1,dae <main+0x406>
     fcc:	bde5                	j	ec4 <main+0x51c>
     fce:	15fd                	addi	a1,a1,-1
			if(--timeout < 0) {i2c_ret = i2c_get_busy_error(); break;}
     fd0:	e60598e3          	bnez	a1,e40 <main+0x498>
     fd4:	bdc5                	j	ec4 <main+0x51c>
	if(I2C1->STAR1 & I2C_STAR1_AF) {I2C1->STAR1 &= ~I2C_STAR1_AF; return I2C_ERR_NACK;}
     fd6:	01475683          	lhu	a3,20(a4) # 40022014 <__global_pointer$+0x20021814>
     fda:	4006f693          	andi	a3,a3,1024
     fde:	ca81                	beqz	a3,fee <main+0x646>
     fe0:	01475683          	lhu	a3,20(a4)
     fe4:	06c2                	slli	a3,a3,0x10
     fe6:	82c1                	srli	a3,a3,0x10
     fe8:	bff6f693          	andi	a3,a3,-1025
     fec:	bdc5                	j	edc <main+0x534>
	if(I2C1->STAR1 & I2C_STAR1_ARLO) {I2C1->STAR1 &= ~I2C_STAR1_ARLO; return I2C_ERR_ARLO;}
     fee:	01475683          	lhu	a3,20(a4)
     ff2:	2006f693          	andi	a3,a3,512
     ff6:	ca81                	beqz	a3,1006 <main+0x65e>
     ff8:	01475683          	lhu	a3,20(a4)
     ffc:	06c2                	slli	a3,a3,0x10
     ffe:	82c1                	srli	a3,a3,0x10
    1000:	dff6f693          	andi	a3,a3,-513
    1004:	bde1                	j	edc <main+0x534>
	if(I2C1->STAR1 & I2C_STAR1_OVR) {I2C1->STAR1 &= ~I2C_STAR1_OVR; return I2C_ERR_OVR;}
    1006:	01475683          	lhu	a3,20(a4)
    100a:	01469613          	slli	a2,a3,0x14
    100e:	ec065be3          	bgez	a2,ee4 <main+0x53c>
    1012:	01475683          	lhu	a3,20(a4)
    1016:	767d                	lui	a2,0xfffff
    1018:	7ff60613          	addi	a2,a2,2047 # fffff7ff <__global_pointer$+0xdfffefff>
    101c:	06c2                	slli	a3,a3,0x10
    101e:	82c1                	srli	a3,a3,0x10
    1020:	8ef1                	and	a3,a3,a2
    1022:	bd7d                	j	ee0 <main+0x538>
		else if (press_duration > LONG_PRESS_TIME) {
    1024:	0016e7b7          	lui	a5,0x16e
    1028:	36078793          	addi	a5,a5,864 # 16e360 <lib_i2c.c.e7f16be4+0x16a3a5>
    102c:	c6e7f7e3          	bgeu	a5,a4,c9a <main+0x2f2>
			mode = (mode + 1)%3;
    1030:	00044503          	lbu	a0,0(s0)
    1034:	458d                	li	a1,3
    1036:	0505                	addi	a0,a0,1
    1038:	8c0ff0ef          	jal	ra,f8 <__modsi3>
    103c:	00a40023          	sb	a0,0(s0)
			count = 0; // Reset count when switching modes
    1040:	80018523          	sb	zero,-2038(gp) # 2000000a <count>
			last_interaction = (SysTick->CNT);
    1044:	e000f6b7          	lui	a3,0xe000f
    1048:	469c                	lw	a5,8(a3)
    104a:	b981                	j	c9a <main+0x2f2>
    } else if (button_2_pressed) {  
    104c:	b60688e3          	beqz	a3,bbc <main+0x214>
        uint32_t press_duration = (SysTick->CNT) - button_1_press_start;
    1050:	e000f6b7          	lui	a3,0xe000f
    1054:	20000637          	lui	a2,0x20000
    1058:	4698                	lw	a4,8(a3)
    105a:	00462603          	lw	a2,4(a2) # 20000004 <button_1_press_start>
        button_2_pressed = false;
    105e:	00078023          	sb	zero,0(a5)
        if (press_duration >= SHORT_PRESS_TIME){
    1062:	67ed                	lui	a5,0x1b
        uint32_t press_duration = (SysTick->CNT) - button_1_press_start;
    1064:	8f11                	sub	a4,a4,a2
        if (press_duration >= SHORT_PRESS_TIME){
    1066:	77378793          	addi	a5,a5,1907 # 1b773 <lib_i2c.c.e7f16be4+0x177b8>
    106a:	b4e7f9e3          	bgeu	a5,a4,bbc <main+0x214>
			if(mode == 0){
    106e:	00044783          	lbu	a5,0(s0)
    1072:	e789                	bnez	a5,107c <main+0x6d4>
				read_bank_into_ntag(1);
    1074:	4505                	li	a0,1
    1076:	87fff0ef          	jal	ra,8f4 <read_bank_into_ntag>
    107a:	b689                	j	bbc <main+0x214>
			count = (count + 1)%4;
    107c:	80a18713          	addi	a4,gp,-2038 # 2000000a <count>
    1080:	00074783          	lbu	a5,0(a4)
    1084:	0785                	addi	a5,a5,1
    1086:	8b8d                	andi	a5,a5,3
    1088:	00f70023          	sb	a5,0(a4)
			last_interaction = (SysTick->CNT);
    108c:	469c                	lw	a5,8(a3)
    108e:	80c18713          	addi	a4,gp,-2036 # 2000000c <last_interaction>
    1092:	c31c                	sw	a5,0(a4)
    1094:	b625                	j	bbc <main+0x214>
		else if (led_state && (current_time - blink_start >= LONG_BLINK_TIME)) {
    1096:	ba5373e3          	bgeu	t1,t0,c3c <main+0x294>
			GPIOD->OUTDR &= ~(1<<3);
    109a:	40011337          	lui	t1,0x40011
    109e:	40c32283          	lw	t0,1036(t1) # 4001140c <__global_pointer$+0x20010c0c>
			led_state = false;
    10a2:	00078023          	sb	zero,0(a5)
			GPIOD->OUTDR &= ~(1<<3);
    10a6:	ff72f293          	andi	t0,t0,-9
    10aa:	b6a5                	j	c12 <main+0x26a>
	} else if(target_short_blinks) {
    10ac:	81318593          	addi	a1,gp,-2029 # 20000013 <target_short_blinks>
    10b0:	0005c603          	lbu	a2,0(a1) # 50000 <lib_i2c.c.e7f16be4+0x4c045>
    10b4:	b6060be3          	beqz	a2,c2a <main+0x282>
		if (!led_state && (current_time - blink_start >= SHORT_BLINK_TIME)) {
    10b8:	20000537          	lui	a0,0x20000
    10bc:	00050513          	mv	a0,a0
    10c0:	00052283          	lw	t0,0(a0) # 20000000 <blink_start>
    10c4:	0007c383          	lbu	t2,0(a5)
    10c8:	00049337          	lui	t1,0x49
    10cc:	405702b3          	sub	t0,a4,t0
    10d0:	3df30313          	addi	t1,t1,991 # 493df <lib_i2c.c.e7f16be4+0x45424>
    10d4:	02039463          	bnez	t2,10fc <main+0x754>
    10d8:	b65372e3          	bgeu	t1,t0,c3c <main+0x294>
			led_state = true;
    10dc:	4305                	li	t1,1
    10de:	00678023          	sb	t1,0(a5)
			GPIOD->OUTDR |= (1<<3);
    10e2:	40011337          	lui	t1,0x40011
    10e6:	40c32283          	lw	t0,1036(t1) # 4001140c <__global_pointer$+0x20010c0c>
    10ea:	0082e293          	ori	t0,t0,8
			GPIOD->OUTDR &= ~(1<<3);
    10ee:	40532623          	sw	t0,1036(t1)
			target_short_blinks--;
    10f2:	167d                	addi	a2,a2,-1
			blink_start = current_time;
    10f4:	c118                	sw	a4,0(a0)
			target_short_blinks--;
    10f6:	00c58023          	sb	a2,0(a1)
    10fa:	b62d                	j	c24 <main+0x27c>
		else if (led_state && (current_time - blink_start >= SHORT_BLINK_TIME)) {
    10fc:	b45370e3          	bgeu	t1,t0,c3c <main+0x294>
			GPIOD->OUTDR &= ~(1<<3);
    1100:	40011337          	lui	t1,0x40011
    1104:	40c32283          	lw	t0,1036(t1) # 4001140c <__global_pointer$+0x20010c0c>
			led_state = false;
    1108:	00078023          	sb	zero,0(a5)
			GPIOD->OUTDR &= ~(1<<3);
    110c:	ff72f293          	andi	t0,t0,-9
    1110:	bff9                	j	10ee <main+0x746>
				if (!is_blinking) {
    1112:	0006c783          	lbu	a5,0(a3) # e000f000 <__global_pointer$+0xc000e800>
    1116:	b40793e3          	bnez	a5,c5c <main+0x2b4>
					start_blinking(1, (count+1));
    111a:	80a1c583          	lbu	a1,-2038(gp) # 2000000a <count>
    111e:	4505                	li	a0,1
    1120:	0585                	addi	a1,a1,1
    1122:	0ff5f593          	andi	a1,a1,255
    1126:	be0d                	j	c58 <main+0x2b0>
				if (!is_blinking) {
    1128:	0006c783          	lbu	a5,0(a3)
    112c:	b20798e3          	bnez	a5,c5c <main+0x2b4>
					start_blinking(2, (count+1));
    1130:	80a1c583          	lbu	a1,-2038(gp) # 2000000a <count>
    1134:	4509                	li	a0,2
    1136:	0585                	addi	a1,a1,1
    1138:	0ff5f593          	andi	a1,a1,255
    113c:	be31                	j	c58 <main+0x2b0>

0000113e <handle_reset>:
	asm volatile( "\n\
    113e:	1ffff197          	auipc	gp,0x1ffff
    1142:	6c218193          	addi	gp,gp,1730 # 20000800 <__global_pointer$>
    1146:	00018113          	mv	sp,gp
    114a:	08000513          	li	a0,128
    114e:	30051073          	csrw	mstatus,a0
    1152:	468d                	li	a3,3
    1154:	fffff517          	auipc	a0,0xfffff
    1158:	eac50513          	addi	a0,a0,-340 # 0 <InterruptVector>
    115c:	8d55                	or	a0,a0,a3
    115e:	30551073          	csrw	mtvec,a0
asm volatile(
    1162:	1ffff517          	auipc	a0,0x1ffff
    1166:	e9e50513          	addi	a0,a0,-354 # 20000000 <blink_start>
    116a:	81418593          	addi	a1,gp,-2028 # 20000014 <_ebss>
    116e:	4601                	li	a2,0
    1170:	00b55663          	bge	a0,a1,117c <handle_reset+0x3e>
    1174:	c110                	sw	a2,0(a0)
    1176:	0511                	addi	a0,a0,4
    1178:	feb54ee3          	blt	a0,a1,1174 <handle_reset+0x36>
    117c:	00000517          	auipc	a0,0x0
    1180:	14050513          	addi	a0,a0,320 # 12bc <_data_lma>
    1184:	1ffff597          	auipc	a1,0x1ffff
    1188:	e7c58593          	addi	a1,a1,-388 # 20000000 <blink_start>
    118c:	1ffff617          	auipc	a2,0x1ffff
    1190:	e7460613          	addi	a2,a2,-396 # 20000000 <blink_start>
    1194:	00c58863          	beq	a1,a2,11a4 <handle_reset+0x66>
    1198:	4114                	lw	a3,0(a0)
    119a:	c194                	sw	a3,0(a1)
    119c:	0511                	addi	a0,a0,4
    119e:	0591                	addi	a1,a1,4
    11a0:	fec59ae3          	bne	a1,a2,1194 <handle_reset+0x56>
	SysTick->CTLR = 5;
    11a4:	e000f7b7          	lui	a5,0xe000f
    11a8:	4715                	li	a4,5
    11aa:	c398                	sw	a4,0(a5)
asm volatile(
    11ac:	6785                	lui	a5,0x1
    11ae:	9a878793          	addi	a5,a5,-1624 # 9a8 <main>
    11b2:	34179073          	csrw	mepc,a5
    11b6:	30200073          	mret
    11ba:	0000                	unimp
    11bc:	000a                	c.slli	zero,0x2
    11be:	0000                	unimp
    11c0:	7245                	lui	tp,0xffff1
    11c2:	6f72                	flw	ft10,28(sp)
    11c4:	2072                	fld	ft0,280(sp)
    11c6:	7355                	lui	t1,0xffff5
    11c8:	6e69                	lui	t3,0x1a
    11ca:	68742067          	0x68742067
    11ce:	2065                	jal	1276 <handle_reset+0x138>
    11d0:	3249                	jal	b52 <main+0x1aa>
    11d2:	75422043          	0x75422043
    11d6:	61460073          	0x61460073
    11da:	6c69                	lui	s8,0x1a
    11dc:	6465                	lui	s0,0x19
    11de:	7420                	flw	fs0,104(s0)
    11e0:	6e69206f          	j	938c6 <lib_i2c.c.e7f16be4+0x8f90b>
    11e4:	7469                	lui	s0,0xffffa
    11e6:	7420                	flw	fs0,104(s0)
    11e8:	6568                	flw	fa0,76(a0)
    11ea:	4920                	lw	s0,80(a0)
    11ec:	4332                	lw	t1,12(sp)
    11ee:	4220                	lw	s0,64(a2)
    11f0:	7375                	lui	t1,0xffffd
    11f2:	0000                	unimp
    11f4:	6c46                	flw	fs8,80(sp)
    11f6:	7361                	lui	t1,0xffff8
    11f8:	2068                	fld	fa0,192(s0)
    11fa:	6c697473          	csrrci	s0,0x6c6,18
    11fe:	206c                	fld	fa1,192(s0)
    1200:	6f6c                	flw	fa1,92(a4)
    1202:	64656b63          	bltu	a0,t1,1858 <ch32fun.c.60bab88f+0x296>
    1206:	0000                	unimp
    1208:	6c46                	flw	fs8,80(sp)
    120a:	7361                	lui	t1,0xffff8
    120c:	2068                	fld	fa0,192(s0)
    120e:	6f4c                	flw	fa1,28(a4)
    1210:	64656b63          	bltu	a0,t1,1866 <ch32fun.c.60bab88f+0x2a4>
    1214:	0021                	c.nop	8
    1216:	0000                	unimp
    1218:	6552                	flw	fa0,20(sp)
    121a:	6461                	lui	s0,0x18
    121c:	6e69                	lui	t3,0x1a
    121e:	20342067          	0x20342067
    1222:	6c62                	flw	fs8,24(sp)
    1224:	736b636f          	jal	t1,b795a <lib_i2c.c.e7f16be4+0xb399f>
    1228:	6620                	flw	fs0,72(a2)
    122a:	6f72                	flw	ft10,28(sp)
    122c:	206d                	jal	12d6 <_data_lma+0x1a>
    122e:	6425                	lui	s0,0x9
    1230:	7420                	flw	fs0,104(s0)
    1232:	6425206f          	j	53874 <lib_i2c.c.e7f16be4+0x4f8b9>
    1236:	6620                	flw	fs0,72(a2)
    1238:	6f72                	flw	ft10,28(sp)
    123a:	206d                	jal	12e4 <_data_lma+0x28>
    123c:	746e                	flw	fs0,248(sp)
    123e:	6761                	lui	a4,0x18
    1240:	202c                	fld	fa1,64(s0)
    1242:	74697277          	0x74697277
    1246:	6e69                	lui	t3,0x1a
    1248:	6f742067          	0x6f742067
    124c:	6120                	flw	fs0,64(a0)
    124e:	6464                	flw	fs1,76(s0)
    1250:	6572                	flw	fa0,28(sp)
    1252:	25207373          	csrrci	t1,0x252,0
    1256:	786c                	flw	fa1,116(s0)
    1258:	0a20                	addi	s0,sp,280
    125a:	0000                	unimp
    125c:	7830                	flw	fa2,112(s0)
    125e:	6c25                	lui	s8,0x9
    1260:	2c78                	fld	fa4,216(s0)
    1262:	3020                	fld	fs0,96(s0)
    1264:	2578                	fld	fa4,200(a0)
    1266:	786c                	flw	fa1,116(s0)
    1268:	202c                	fld	fa1,64(s0)
    126a:	7830                	flw	fa2,112(s0)
    126c:	6c25                	lui	s8,0x9
    126e:	2c78                	fld	fa4,216(s0)
    1270:	3020                	fld	fs0,96(s0)
    1272:	2578                	fld	fa4,200(a0)
    1274:	786c                	flw	fa1,116(s0)
    1276:	0a20                	addi	s0,sp,280
    1278:	0000                	unimp
    127a:	0000                	unimp
    127c:	4e524157          	0x4e524157
    1280:	4e49                	li	t3,18
    1282:	41462f47          	fmsub.s	ft10,fa2,fs4,fs0,rdn
    1286:	4c49                	li	s8,18
    1288:	5255                	li	tp,-11
    128a:	3a45                	jal	c3a <main+0x292>
    128c:	4620                	lw	s0,72(a2)
    128e:	616c                	flw	fa1,68(a0)
    1290:	67206873          	csrrsi	a6,0x672,0
    1294:	6e65                	lui	t3,0x19
    1296:	7265                	lui	tp,0xffff9
    1298:	6c61                	lui	s8,0x18
    129a:	6520                	flw	fs0,72(a0)
    129c:	6172                	flw	ft2,28(sp)
    129e:	65727573          	csrrci	a0,0x657,4
    12a2:	6620                	flw	fs0,72(a2)
    12a4:	6961                	lui	s2,0x18
    12a6:	656c                	flw	fa1,76(a0)
    12a8:	0064                	addi	s1,sp,12
	...

000012ac <bank_addrs>:
    12ac:	3000 0800 3400 0800 3800 0800 3c00 0800     .0...4...8...<..
